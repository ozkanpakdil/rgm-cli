/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// OracleTopQueryDto
    /// </summary>
    [DataContract(Name = "OracleTopQueryDto")]
    public partial class OracleTopQueryDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OracleTopQueryDto" /> class.
        /// </summary>
        /// <param name="channelInstanceRef">channelInstanceRef.</param>
        /// <param name="sqlId">sqlId.</param>
        /// <param name="sqlText">sqlText.</param>
        /// <param name="executionCount">executionCount.</param>
        /// <param name="elapsedTime">elapsedTime.</param>
        /// <param name="cpuTime">cpuTime.</param>
        /// <param name="userIoWait">userIoWait.</param>
        /// <param name="shareableMemory">shareableMemory.</param>
        /// <param name="optimizerCost">optimizerCost.</param>
        /// <param name="planHashValue">planHashValue.</param>
        /// <param name="containerName">containerName.</param>
        public OracleTopQueryDto(ChannelInstanceRef channelInstanceRef = default(ChannelInstanceRef), string sqlId = default(string), string sqlText = default(string), long executionCount = default(long), long elapsedTime = default(long), long cpuTime = default(long), long userIoWait = default(long), long shareableMemory = default(long), long optimizerCost = default(long), string planHashValue = default(string), string containerName = default(string))
        {
            this.ChannelInstanceRef = channelInstanceRef;
            this.SqlId = sqlId;
            this.SqlText = sqlText;
            this.ExecutionCount = executionCount;
            this.ElapsedTime = elapsedTime;
            this.CpuTime = cpuTime;
            this.UserIoWait = userIoWait;
            this.ShareableMemory = shareableMemory;
            this.OptimizerCost = optimizerCost;
            this.PlanHashValue = planHashValue;
            this.ContainerName = containerName;
        }

        /// <summary>
        /// Gets or Sets ChannelInstanceRef
        /// </summary>
        [DataMember(Name = "channelInstanceRef", EmitDefaultValue = true)]
        public ChannelInstanceRef ChannelInstanceRef { get; set; }

        /// <summary>
        /// Gets or Sets SqlId
        /// </summary>
        [DataMember(Name = "sqlId", EmitDefaultValue = true)]
        public string SqlId { get; set; }

        /// <summary>
        /// Gets or Sets SqlText
        /// </summary>
        [DataMember(Name = "sqlText", EmitDefaultValue = true)]
        public string SqlText { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionCount
        /// </summary>
        [DataMember(Name = "executionCount", EmitDefaultValue = false)]
        public long ExecutionCount { get; set; }

        /// <summary>
        /// Gets or Sets ElapsedTime
        /// </summary>
        [DataMember(Name = "elapsedTime", EmitDefaultValue = false)]
        public long ElapsedTime { get; set; }

        /// <summary>
        /// Gets or Sets CpuTime
        /// </summary>
        [DataMember(Name = "cpuTime", EmitDefaultValue = false)]
        public long CpuTime { get; set; }

        /// <summary>
        /// Gets or Sets UserIoWait
        /// </summary>
        [DataMember(Name = "userIoWait", EmitDefaultValue = false)]
        public long UserIoWait { get; set; }

        /// <summary>
        /// Gets or Sets ShareableMemory
        /// </summary>
        [DataMember(Name = "shareableMemory", EmitDefaultValue = false)]
        public long ShareableMemory { get; set; }

        /// <summary>
        /// Gets or Sets OptimizerCost
        /// </summary>
        [DataMember(Name = "optimizerCost", EmitDefaultValue = false)]
        public long OptimizerCost { get; set; }

        /// <summary>
        /// Gets or Sets PlanHashValue
        /// </summary>
        [DataMember(Name = "planHashValue", EmitDefaultValue = true)]
        public string PlanHashValue { get; set; }

        /// <summary>
        /// Gets or Sets ContainerName
        /// </summary>
        [DataMember(Name = "containerName", EmitDefaultValue = true)]
        public string ContainerName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OracleTopQueryDto {\n");
            sb.Append("  ChannelInstanceRef: ").Append(ChannelInstanceRef).Append("\n");
            sb.Append("  SqlId: ").Append(SqlId).Append("\n");
            sb.Append("  SqlText: ").Append(SqlText).Append("\n");
            sb.Append("  ExecutionCount: ").Append(ExecutionCount).Append("\n");
            sb.Append("  ElapsedTime: ").Append(ElapsedTime).Append("\n");
            sb.Append("  CpuTime: ").Append(CpuTime).Append("\n");
            sb.Append("  UserIoWait: ").Append(UserIoWait).Append("\n");
            sb.Append("  ShareableMemory: ").Append(ShareableMemory).Append("\n");
            sb.Append("  OptimizerCost: ").Append(OptimizerCost).Append("\n");
            sb.Append("  PlanHashValue: ").Append(PlanHashValue).Append("\n");
            sb.Append("  ContainerName: ").Append(ContainerName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
