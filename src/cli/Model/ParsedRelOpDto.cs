/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace cli.Model;

/// <summary>
///     ParsedRelOpDto
/// </summary>
[DataContract(Name = "ParsedRelOpDto")]
public class ParsedRelOpDto : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="ParsedRelOpDto" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected ParsedRelOpDto()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="ParsedRelOpDto" /> class.
    /// </summary>
    /// <param name="id">id (required).</param>
    /// <param name="name">name (required).</param>
    /// <param name="estimatedRows">estimatedRows (required).</param>
    /// <param name="actualRows">actualRows (required).</param>
    /// <param name="difference">difference (required).</param>
    /// <param name="cost">cost (required).</param>
    public ParsedRelOpDto(IntegerIdentifier id = default, string name = default, double estimatedRows = default,
        double actualRows = default, double difference = default, double cost = default)
    {
        // to ensure "id" is required (not null)
        if (id == null)
            throw new ArgumentNullException("id is a required property for ParsedRelOpDto and cannot be null");
        Id = id;
        // to ensure "name" is required (not null)
        if (name == null)
            throw new ArgumentNullException("name is a required property for ParsedRelOpDto and cannot be null");
        Name = name;
        EstimatedRows = estimatedRows;
        ActualRows = actualRows;
        Difference = difference;
        Cost = cost;
    }

    /// <summary>
    ///     Gets or Sets Id
    /// </summary>
    [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
    public IntegerIdentifier Id { get; set; }

    /// <summary>
    ///     Gets or Sets Name
    /// </summary>
    [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
    public string Name { get; set; }

    /// <summary>
    ///     Gets or Sets EstimatedRows
    /// </summary>
    [DataMember(Name = "estimatedRows", IsRequired = true, EmitDefaultValue = true)]
    public double EstimatedRows { get; set; }

    /// <summary>
    ///     Gets or Sets ActualRows
    /// </summary>
    [DataMember(Name = "actualRows", IsRequired = true, EmitDefaultValue = true)]
    public double ActualRows { get; set; }

    /// <summary>
    ///     Gets or Sets Difference
    /// </summary>
    [DataMember(Name = "difference", IsRequired = true, EmitDefaultValue = true)]
    public double Difference { get; set; }

    /// <summary>
    ///     Gets or Sets Cost
    /// </summary>
    [DataMember(Name = "cost", IsRequired = true, EmitDefaultValue = true)]
    public double Cost { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ParsedRelOpDto {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Name: ").Append(Name).Append("\n");
        sb.Append("  EstimatedRows: ").Append(EstimatedRows).Append("\n");
        sb.Append("  ActualRows: ").Append(ActualRows).Append("\n");
        sb.Append("  Difference: ").Append(Difference).Append("\n");
        sb.Append("  Cost: ").Append(Cost).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}