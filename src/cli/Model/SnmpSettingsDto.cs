/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// SnmpSettingsDto
    /// </summary>
    [DataContract(Name = "SnmpSettingsDto")]
    public partial class SnmpSettingsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SnmpSettingsDto" /> class.
        /// </summary>
        /// <param name="enable">enable.</param>
        /// <param name="alertOnEnded">alertOnEnded.</param>
        /// <param name="snmpAllAddress">snmpAllAddress.</param>
        /// <param name="snmpAllPort">snmpAllPort.</param>
        /// <param name="snmpAllCommunityString">snmpAllCommunityString.</param>
        public SnmpSettingsDto(bool enable = default(bool), bool alertOnEnded = default(bool), string snmpAllAddress = default(string), int snmpAllPort = default(int), string snmpAllCommunityString = default(string))
        {
            this.Enable = enable;
            this.AlertOnEnded = alertOnEnded;
            this.SnmpAllAddress = snmpAllAddress;
            this.SnmpAllPort = snmpAllPort;
            this.SnmpAllCommunityString = snmpAllCommunityString;
        }

        /// <summary>
        /// Gets or Sets Enable
        /// </summary>
        [DataMember(Name = "enable", EmitDefaultValue = true)]
        public bool Enable { get; set; }

        /// <summary>
        /// Gets or Sets AlertOnEnded
        /// </summary>
        [DataMember(Name = "alertOnEnded", EmitDefaultValue = true)]
        public bool AlertOnEnded { get; set; }

        /// <summary>
        /// Gets or Sets SnmpAllAddress
        /// </summary>
        [DataMember(Name = "snmpAllAddress", EmitDefaultValue = true)]
        public string SnmpAllAddress { get; set; }

        /// <summary>
        /// Gets or Sets SnmpAllPort
        /// </summary>
        [DataMember(Name = "snmpAllPort", EmitDefaultValue = false)]
        public int SnmpAllPort { get; set; }

        /// <summary>
        /// Gets or Sets SnmpAllCommunityString
        /// </summary>
        [DataMember(Name = "snmpAllCommunityString", EmitDefaultValue = true)]
        public string SnmpAllCommunityString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SnmpSettingsDto {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  AlertOnEnded: ").Append(AlertOnEnded).Append("\n");
            sb.Append("  SnmpAllAddress: ").Append(SnmpAllAddress).Append("\n");
            sb.Append("  SnmpAllPort: ").Append(SnmpAllPort).Append("\n");
            sb.Append("  SnmpAllCommunityString: ").Append(SnmpAllCommunityString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
