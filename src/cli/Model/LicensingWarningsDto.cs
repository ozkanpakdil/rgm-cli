/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// LicensingWarningsDto
    /// </summary>
    [DataContract(Name = "LicensingWarningsDto")]
    public partial class LicensingWarningsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicensingWarningsDto" /> class.
        /// </summary>
        /// <param name="licenceText">licenceText.</param>
        /// <param name="isTrial">isTrial.</param>
        /// <param name="isTrialExpired">isTrialExpired.</param>
        /// <param name="permitText">permitText.</param>
        /// <param name="showPermitExpiringSoon">showPermitExpiringSoon.</param>
        /// <param name="areUnlicensedServers">areUnlicensedServers.</param>
        public LicensingWarningsDto(string licenceText = default(string), bool isTrial = default(bool), bool isTrialExpired = default(bool), string permitText = default(string), bool showPermitExpiringSoon = default(bool), bool areUnlicensedServers = default(bool))
        {
            this.LicenceText = licenceText;
            this.IsTrial = isTrial;
            this.IsTrialExpired = isTrialExpired;
            this.PermitText = permitText;
            this.ShowPermitExpiringSoon = showPermitExpiringSoon;
            this.AreUnlicensedServers = areUnlicensedServers;
        }

        /// <summary>
        /// Gets or Sets LicenceText
        /// </summary>
        [DataMember(Name = "licenceText", EmitDefaultValue = true)]
        public string LicenceText { get; set; }

        /// <summary>
        /// Gets or Sets IsTrial
        /// </summary>
        [DataMember(Name = "isTrial", EmitDefaultValue = true)]
        public bool IsTrial { get; set; }

        /// <summary>
        /// Gets or Sets IsTrialExpired
        /// </summary>
        [DataMember(Name = "isTrialExpired", EmitDefaultValue = true)]
        public bool IsTrialExpired { get; set; }

        /// <summary>
        /// Gets or Sets PermitText
        /// </summary>
        [DataMember(Name = "permitText", EmitDefaultValue = true)]
        public string PermitText { get; set; }

        /// <summary>
        /// Gets or Sets ShowPermitExpiringSoon
        /// </summary>
        [DataMember(Name = "showPermitExpiringSoon", EmitDefaultValue = true)]
        public bool ShowPermitExpiringSoon { get; set; }

        /// <summary>
        /// Gets or Sets AreUnlicensedServers
        /// </summary>
        [DataMember(Name = "areUnlicensedServers", EmitDefaultValue = true)]
        public bool AreUnlicensedServers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LicensingWarningsDto {\n");
            sb.Append("  LicenceText: ").Append(LicenceText).Append("\n");
            sb.Append("  IsTrial: ").Append(IsTrial).Append("\n");
            sb.Append("  IsTrialExpired: ").Append(IsTrialExpired).Append("\n");
            sb.Append("  PermitText: ").Append(PermitText).Append("\n");
            sb.Append("  ShowPermitExpiringSoon: ").Append(ShowPermitExpiringSoon).Append("\n");
            sb.Append("  AreUnlicensedServers: ").Append(AreUnlicensedServers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
