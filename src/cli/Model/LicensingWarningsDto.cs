/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace cli.Model;

/// <summary>
///     LicensingWarningsDto
/// </summary>
[DataContract(Name = "LicensingWarningsDto")]
public class LicensingWarningsDto : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="LicensingWarningsDto" /> class.
    /// </summary>
    /// <param name="licenceText">licenceText.</param>
    /// <param name="isTrial">isTrial.</param>
    /// <param name="isTrialExpired">isTrialExpired.</param>
    /// <param name="permitText">permitText.</param>
    /// <param name="showPermitExpiringSoon">showPermitExpiringSoon.</param>
    /// <param name="areUnlicensedServers">areUnlicensedServers.</param>
    public LicensingWarningsDto(string licenceText = default, bool isTrial = default, bool isTrialExpired = default,
        string permitText = default, bool showPermitExpiringSoon = default, bool areUnlicensedServers = default)
    {
        LicenceText = licenceText;
        IsTrial = isTrial;
        IsTrialExpired = isTrialExpired;
        PermitText = permitText;
        ShowPermitExpiringSoon = showPermitExpiringSoon;
        AreUnlicensedServers = areUnlicensedServers;
    }

    /// <summary>
    ///     Gets or Sets LicenceText
    /// </summary>
    [DataMember(Name = "licenceText", EmitDefaultValue = true)]
    public string LicenceText { get; set; }

    /// <summary>
    ///     Gets or Sets IsTrial
    /// </summary>
    [DataMember(Name = "isTrial", EmitDefaultValue = true)]
    public bool IsTrial { get; set; }

    /// <summary>
    ///     Gets or Sets IsTrialExpired
    /// </summary>
    [DataMember(Name = "isTrialExpired", EmitDefaultValue = true)]
    public bool IsTrialExpired { get; set; }

    /// <summary>
    ///     Gets or Sets PermitText
    /// </summary>
    [DataMember(Name = "permitText", EmitDefaultValue = true)]
    public string PermitText { get; set; }

    /// <summary>
    ///     Gets or Sets ShowPermitExpiringSoon
    /// </summary>
    [DataMember(Name = "showPermitExpiringSoon", EmitDefaultValue = true)]
    public bool ShowPermitExpiringSoon { get; set; }

    /// <summary>
    ///     Gets or Sets AreUnlicensedServers
    /// </summary>
    [DataMember(Name = "areUnlicensedServers", EmitDefaultValue = true)]
    public bool AreUnlicensedServers { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class LicensingWarningsDto {\n");
        sb.Append("  LicenceText: ").Append(LicenceText).Append("\n");
        sb.Append("  IsTrial: ").Append(IsTrial).Append("\n");
        sb.Append("  IsTrialExpired: ").Append(IsTrialExpired).Append("\n");
        sb.Append("  PermitText: ").Append(PermitText).Append("\n");
        sb.Append("  ShowPermitExpiringSoon: ").Append(ShowPermitExpiringSoon).Append("\n");
        sb.Append("  AreUnlicensedServers: ").Append(AreUnlicensedServers).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}