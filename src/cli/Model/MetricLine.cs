/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// MetricLine
    /// </summary>
    [DataContract(Name = "MetricLine")]
    public partial class MetricLine : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MetricLine" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="data">data.</param>
        /// <param name="analysisLinkData">analysisLinkData.</param>
        /// <param name="id">id.</param>
        /// <param name="max">max.</param>
        /// <param name="tooltipFormatter">tooltipFormatter.</param>
        /// <param name="tooltipSuffix">tooltipSuffix.</param>
        /// <param name="color">color.</param>
        /// <param name="markerSymbol">markerSymbol.</param>
        /// <param name="dashStyle">dashStyle.</param>
        /// <param name="lineWidth">lineWidth.</param>
        /// <param name="lineColor">lineColor.</param>
        /// <param name="yAxisScale">yAxisScale.</param>
        public MetricLine(string name = default(string), List<List<double>> data = default(List<List<double>>), AnalysisLinkData analysisLinkData = default(AnalysisLinkData), string id = default(string), double max = default(double), string tooltipFormatter = default(string), string tooltipSuffix = default(string), string color = default(string), string markerSymbol = default(string), string dashStyle = default(string), int lineWidth = default(int), string lineColor = default(string), MetricLineYAxisScale yAxisScale = default(MetricLineYAxisScale))
        {
            this.Name = name;
            this.Data = data;
            this.AnalysisLinkData = analysisLinkData;
            this.Id = id;
            this.Max = max;
            this.TooltipFormatter = tooltipFormatter;
            this.TooltipSuffix = tooltipSuffix;
            this.Color = color;
            this.MarkerSymbol = markerSymbol;
            this.DashStyle = dashStyle;
            this.LineWidth = lineWidth;
            this.LineColor = lineColor;
            this.YAxisScale = yAxisScale;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public List<List<double>> Data { get; set; }

        /// <summary>
        /// Gets or Sets AnalysisLinkData
        /// </summary>
        [DataMember(Name = "analysisLinkData", EmitDefaultValue = false)]
        public AnalysisLinkData AnalysisLinkData { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Max
        /// </summary>
        [DataMember(Name = "max", EmitDefaultValue = false)]
        public double Max { get; set; }

        /// <summary>
        /// Gets or Sets TooltipFormatter
        /// </summary>
        [DataMember(Name = "tooltipFormatter", EmitDefaultValue = false)]
        public string TooltipFormatter { get; set; }

        /// <summary>
        /// Gets or Sets TooltipSuffix
        /// </summary>
        [DataMember(Name = "tooltipSuffix", EmitDefaultValue = false)]
        public string TooltipSuffix { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets MarkerSymbol
        /// </summary>
        [DataMember(Name = "markerSymbol", EmitDefaultValue = false)]
        public string MarkerSymbol { get; set; }

        /// <summary>
        /// Gets or Sets DashStyle
        /// </summary>
        [DataMember(Name = "dashStyle", EmitDefaultValue = false)]
        public string DashStyle { get; set; }

        /// <summary>
        /// Gets or Sets LineWidth
        /// </summary>
        [DataMember(Name = "lineWidth", EmitDefaultValue = false)]
        public int LineWidth { get; set; }

        /// <summary>
        /// Gets or Sets LineColor
        /// </summary>
        [DataMember(Name = "lineColor", EmitDefaultValue = false)]
        public string LineColor { get; set; }

        /// <summary>
        /// Gets or Sets YAxisScale
        /// </summary>
        [DataMember(Name = "yAxisScale", EmitDefaultValue = false)]
        public MetricLineYAxisScale YAxisScale { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MetricLine {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  AnalysisLinkData: ").Append(AnalysisLinkData).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  TooltipFormatter: ").Append(TooltipFormatter).Append("\n");
            sb.Append("  TooltipSuffix: ").Append(TooltipSuffix).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  MarkerSymbol: ").Append(MarkerSymbol).Append("\n");
            sb.Append("  DashStyle: ").Append(DashStyle).Append("\n");
            sb.Append("  LineWidth: ").Append(LineWidth).Append("\n");
            sb.Append("  LineColor: ").Append(LineColor).Append("\n");
            sb.Append("  YAxisScale: ").Append(YAxisScale).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
