/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// ChannelRef
    /// </summary>
    [DataContract(Name = "ChannelRef")]
    public partial class ChannelRef : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelRef" /> class.
        /// </summary>
        /// <param name="channelName">channelName.</param>
        /// <param name="qualifiedChannelName">qualifiedChannelName.</param>
        public ChannelRef(ChannelName channelName = default(ChannelName), QualifiedChannelName qualifiedChannelName = default(QualifiedChannelName))
        {
            this.ChannelName = channelName;
            this.QualifiedChannelName = qualifiedChannelName;
        }

        /// <summary>
        /// Gets or Sets IsRoot
        /// </summary>
        [DataMember(Name = "isRoot", EmitDefaultValue = true)]
        public bool IsRoot { get; private set; }

        /// <summary>
        /// Returns false as IsRoot should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsRoot()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Depth
        /// </summary>
        [DataMember(Name = "depth", EmitDefaultValue = false)]
        public int Depth { get; private set; }

        /// <summary>
        /// Returns false as Depth should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDepth()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public ChannelInstanceRef Parent { get; private set; }

        /// <summary>
        /// Returns false as Parent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeParent()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ChannelName
        /// </summary>
        [DataMember(Name = "channelName", EmitDefaultValue = false)]
        public ChannelName ChannelName { get; set; }

        /// <summary>
        /// Gets or Sets LeadingChannelRefs
        /// </summary>
        [DataMember(Name = "leadingChannelRefs", EmitDefaultValue = false)]
        public List<ChannelRef> LeadingChannelRefs { get; private set; }

        /// <summary>
        /// Returns false as LeadingChannelRefs should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLeadingChannelRefs()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets QualifiedChannelName
        /// </summary>
        [DataMember(Name = "qualifiedChannelName", EmitDefaultValue = false)]
        public QualifiedChannelName QualifiedChannelName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelRef {\n");
            sb.Append("  IsRoot: ").Append(IsRoot).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
            sb.Append("  LeadingChannelRefs: ").Append(LeadingChannelRefs).Append("\n");
            sb.Append("  QualifiedChannelName: ").Append(QualifiedChannelName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
