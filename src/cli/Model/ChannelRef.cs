/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using RedGate.SqlMonitor.Channels.Data;

namespace cli.Model;

/// <summary>
///     ChannelRef
/// </summary>
[DataContract(Name = "ChannelRef")]
public class ChannelRef : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="ChannelRef" /> class.
    /// </summary>
    /// <param name="channelName">channelName.</param>
    /// <param name="qualifiedChannelName">qualifiedChannelName.</param>
    public ChannelRef(ChannelName channelName = default, QualifiedChannelName qualifiedChannelName = default)
    {
        ChannelName = channelName;
        QualifiedChannelName = qualifiedChannelName;
    }

    /// <summary>
    ///     Gets or Sets IsRoot
    /// </summary>
    [DataMember(Name = "isRoot", EmitDefaultValue = true)]
    public bool IsRoot { get; private set; }

    /// <summary>
    ///     Gets or Sets Depth
    /// </summary>
    [DataMember(Name = "depth", EmitDefaultValue = false)]
    public int Depth { get; private set; }

    /// <summary>
    ///     Gets or Sets Parent
    /// </summary>
    [DataMember(Name = "parent", EmitDefaultValue = false)]
    public ChannelInstanceRef Parent { get; private set; }

    /// <summary>
    ///     Gets or Sets ChannelName
    /// </summary>
    [DataMember(Name = "channelName", EmitDefaultValue = false)]
    public ChannelName ChannelName { get; set; }

    /// <summary>
    ///     Gets or Sets LeadingChannelRefs
    /// </summary>
    [DataMember(Name = "leadingChannelRefs", EmitDefaultValue = false)]
    public List<ChannelRef> LeadingChannelRefs { get; private set; }

    /// <summary>
    ///     Gets or Sets QualifiedChannelName
    /// </summary>
    [DataMember(Name = "qualifiedChannelName", EmitDefaultValue = false)]
    public QualifiedChannelName QualifiedChannelName { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns false as IsRoot should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeIsRoot()
    {
        return false;
    }

    /// <summary>
    ///     Returns false as Depth should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeDepth()
    {
        return false;
    }

    /// <summary>
    ///     Returns false as Parent should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeParent()
    {
        return false;
    }

    /// <summary>
    ///     Returns false as LeadingChannelRefs should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeLeadingChannelRefs()
    {
        return false;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ChannelRef {\n");
        sb.Append("  IsRoot: ").Append(IsRoot).Append("\n");
        sb.Append("  Depth: ").Append(Depth).Append("\n");
        sb.Append("  Parent: ").Append(Parent).Append("\n");
        sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
        sb.Append("  LeadingChannelRefs: ").Append(LeadingChannelRefs).Append("\n");
        sb.Append("  QualifiedChannelName: ").Append(QualifiedChannelName).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}