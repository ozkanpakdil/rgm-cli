/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// AlertSuppressionWindowDto
    /// </summary>
    [DataContract(Name = "AlertSuppressionWindowDto")]
    public partial class AlertSuppressionWindowDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ScheduleFrequency
        /// </summary>
        [DataMember(Name = "scheduleFrequency", EmitDefaultValue = false)]
        public ScheduleFrequencyDto? ScheduleFrequency { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public AlertSuppressionWindowStatusDto? Status { get; set; }

        /// <summary>
        /// Gets or Sets AlertSuppressionLevel
        /// </summary>
        [DataMember(Name = "alertSuppressionLevel", EmitDefaultValue = false)]
        public AlertSuppressionLevelDto? AlertSuppressionLevel { get; set; }

        /// <summary>
        /// Gets or Sets AlertTypeGroupToSuppress
        /// </summary>
        [DataMember(Name = "alertTypeGroupToSuppress", EmitDefaultValue = false)]
        public AlertTypeGroupToSuppressDto? AlertTypeGroupToSuppress { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleSetPosition
        /// </summary>
        [DataMember(Name = "scheduleSetPosition", EmitDefaultValue = false)]
        public ScheduleSetPositionDto? ScheduleSetPosition { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyScheduleDayOfWeek
        /// </summary>
        [DataMember(Name = "monthlyScheduleDayOfWeek", EmitDefaultValue = false)]
        public DayOfWeek? MonthlyScheduleDayOfWeek { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertSuppressionWindowDto" /> class.
        /// </summary>
        /// <param name="scheduleFrequency">scheduleFrequency.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="start">start.</param>
        /// <param name="duration">duration.</param>
        /// <param name="status">status.</param>
        /// <param name="alertSuppressionLevel">alertSuppressionLevel.</param>
        /// <param name="alertTypeGroupToSuppress">alertTypeGroupToSuppress.</param>
        /// <param name="monday">monday.</param>
        /// <param name="tuesday">tuesday.</param>
        /// <param name="wednesday">wednesday.</param>
        /// <param name="thursday">thursday.</param>
        /// <param name="friday">friday.</param>
        /// <param name="saturday">saturday.</param>
        /// <param name="sunday">sunday.</param>
        /// <param name="scheduleSetPosition">scheduleSetPosition.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="monthlyScheduleDayOfWeek">monthlyScheduleDayOfWeek.</param>
        /// <param name="targets">targets.</param>
        public AlertSuppressionWindowDto(ScheduleFrequencyDto? scheduleFrequency = default(ScheduleFrequencyDto?), IntegerIdentifier id = default(IntegerIdentifier), string name = default(string), string start = default(string), int? duration = default(int?), AlertSuppressionWindowStatusDto? status = default(AlertSuppressionWindowStatusDto?), AlertSuppressionLevelDto? alertSuppressionLevel = default(AlertSuppressionLevelDto?), AlertTypeGroupToSuppressDto? alertTypeGroupToSuppress = default(AlertTypeGroupToSuppressDto?), bool monday = default(bool), bool tuesday = default(bool), bool wednesday = default(bool), bool thursday = default(bool), bool friday = default(bool), bool saturday = default(bool), bool sunday = default(bool), ScheduleSetPositionDto? scheduleSetPosition = default(ScheduleSetPositionDto?), DateTime? startDate = default(DateTime?), DayOfWeek? monthlyScheduleDayOfWeek = default(DayOfWeek?), List<MonitoredObjectWithIdDto> targets = default(List<MonitoredObjectWithIdDto>))
        {
            this.ScheduleFrequency = scheduleFrequency;
            this.Id = id;
            this.Name = name;
            this.Start = start;
            this.Duration = duration;
            this.Status = status;
            this.AlertSuppressionLevel = alertSuppressionLevel;
            this.AlertTypeGroupToSuppress = alertTypeGroupToSuppress;
            this.Monday = monday;
            this.Tuesday = tuesday;
            this.Wednesday = wednesday;
            this.Thursday = thursday;
            this.Friday = friday;
            this.Saturday = saturday;
            this.Sunday = sunday;
            this.ScheduleSetPosition = scheduleSetPosition;
            this.StartDate = startDate;
            this.MonthlyScheduleDayOfWeek = monthlyScheduleDayOfWeek;
            this.Targets = targets;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; private set; }

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public IntegerIdentifier Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", EmitDefaultValue = true)]
        public string Start { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = true)]
        public int? Duration { get; set; }

        /// <summary>
        /// Gets or Sets Monday
        /// </summary>
        [DataMember(Name = "monday", EmitDefaultValue = true)]
        public bool Monday { get; set; }

        /// <summary>
        /// Gets or Sets Tuesday
        /// </summary>
        [DataMember(Name = "tuesday", EmitDefaultValue = true)]
        public bool Tuesday { get; set; }

        /// <summary>
        /// Gets or Sets Wednesday
        /// </summary>
        [DataMember(Name = "wednesday", EmitDefaultValue = true)]
        public bool Wednesday { get; set; }

        /// <summary>
        /// Gets or Sets Thursday
        /// </summary>
        [DataMember(Name = "thursday", EmitDefaultValue = true)]
        public bool Thursday { get; set; }

        /// <summary>
        /// Gets or Sets Friday
        /// </summary>
        [DataMember(Name = "friday", EmitDefaultValue = true)]
        public bool Friday { get; set; }

        /// <summary>
        /// Gets or Sets Saturday
        /// </summary>
        [DataMember(Name = "saturday", EmitDefaultValue = true)]
        public bool Saturday { get; set; }

        /// <summary>
        /// Gets or Sets Sunday
        /// </summary>
        [DataMember(Name = "sunday", EmitDefaultValue = true)]
        public bool Sunday { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "startDate", EmitDefaultValue = true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Targets
        /// </summary>
        [DataMember(Name = "targets", EmitDefaultValue = true)]
        public List<MonitoredObjectWithIdDto> Targets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlertSuppressionWindowDto {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ScheduleFrequency: ").Append(ScheduleFrequency).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AlertSuppressionLevel: ").Append(AlertSuppressionLevel).Append("\n");
            sb.Append("  AlertTypeGroupToSuppress: ").Append(AlertTypeGroupToSuppress).Append("\n");
            sb.Append("  Monday: ").Append(Monday).Append("\n");
            sb.Append("  Tuesday: ").Append(Tuesday).Append("\n");
            sb.Append("  Wednesday: ").Append(Wednesday).Append("\n");
            sb.Append("  Thursday: ").Append(Thursday).Append("\n");
            sb.Append("  Friday: ").Append(Friday).Append("\n");
            sb.Append("  Saturday: ").Append(Saturday).Append("\n");
            sb.Append("  Sunday: ").Append(Sunday).Append("\n");
            sb.Append("  ScheduleSetPosition: ").Append(ScheduleSetPosition).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  MonthlyScheduleDayOfWeek: ").Append(MonthlyScheduleDayOfWeek).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Duration (int?) maximum
            if (this.Duration > (int?)5999)
            {
                yield return new ValidationResult("Invalid value for Duration, must be a value less than or equal to 5999.", new [] { "Duration" });
            }

            // Duration (int?) minimum
            if (this.Duration < (int?)0)
            {
                yield return new ValidationResult("Invalid value for Duration, must be a value greater than or equal to 0.", new [] { "Duration" });
            }

            yield break;
        }
    }

}
