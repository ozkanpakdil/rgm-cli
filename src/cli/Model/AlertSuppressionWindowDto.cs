/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace cli.Model;

/// <summary>
///     AlertSuppressionWindowDto
/// </summary>
[DataContract(Name = "AlertSuppressionWindowDto")]
public class AlertSuppressionWindowDto : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="AlertSuppressionWindowDto" /> class.
    /// </summary>
    /// <param name="scheduleFrequency">scheduleFrequency.</param>
    /// <param name="id">id.</param>
    /// <param name="name">name.</param>
    /// <param name="start">start.</param>
    /// <param name="duration">duration.</param>
    /// <param name="status">status.</param>
    /// <param name="alertSuppressionLevel">alertSuppressionLevel.</param>
    /// <param name="alertTypeGroupToSuppress">alertTypeGroupToSuppress.</param>
    /// <param name="monday">monday.</param>
    /// <param name="tuesday">tuesday.</param>
    /// <param name="wednesday">wednesday.</param>
    /// <param name="thursday">thursday.</param>
    /// <param name="friday">friday.</param>
    /// <param name="saturday">saturday.</param>
    /// <param name="sunday">sunday.</param>
    /// <param name="scheduleSetPosition">scheduleSetPosition.</param>
    /// <param name="startDate">startDate.</param>
    /// <param name="monthlyScheduleDayOfWeek">monthlyScheduleDayOfWeek.</param>
    /// <param name="targets">targets.</param>
    public AlertSuppressionWindowDto(ScheduleFrequencyDto? scheduleFrequency = default, IntegerIdentifier id = default,
        string name = default, string start = default, int? duration = default,
        AlertSuppressionWindowStatusDto? status = default, AlertSuppressionLevelDto? alertSuppressionLevel = default,
        AlertTypeGroupToSuppressDto? alertTypeGroupToSuppress = default, bool monday = default, bool tuesday = default,
        bool wednesday = default, bool thursday = default, bool friday = default, bool saturday = default,
        bool sunday = default, ScheduleSetPositionDto? scheduleSetPosition = default, DateTime? startDate = default,
        DayOfWeek? monthlyScheduleDayOfWeek = default, List<MonitoredObjectWithIdDto> targets = default)
    {
        ScheduleFrequency = scheduleFrequency;
        Id = id;
        Name = name;
        Start = start;
        Duration = duration;
        Status = status;
        AlertSuppressionLevel = alertSuppressionLevel;
        AlertTypeGroupToSuppress = alertTypeGroupToSuppress;
        Monday = monday;
        Tuesday = tuesday;
        Wednesday = wednesday;
        Thursday = thursday;
        Friday = friday;
        Saturday = saturday;
        Sunday = sunday;
        ScheduleSetPosition = scheduleSetPosition;
        StartDate = startDate;
        MonthlyScheduleDayOfWeek = monthlyScheduleDayOfWeek;
        Targets = targets;
    }

    /// <summary>
    ///     Gets or Sets ScheduleFrequency
    /// </summary>
    [DataMember(Name = "scheduleFrequency", EmitDefaultValue = false)]
    public ScheduleFrequencyDto? ScheduleFrequency { get; set; }

    /// <summary>
    ///     Gets or Sets Status
    /// </summary>
    [DataMember(Name = "status", EmitDefaultValue = false)]
    public AlertSuppressionWindowStatusDto? Status { get; set; }

    /// <summary>
    ///     Gets or Sets AlertSuppressionLevel
    /// </summary>
    [DataMember(Name = "alertSuppressionLevel", EmitDefaultValue = false)]
    public AlertSuppressionLevelDto? AlertSuppressionLevel { get; set; }

    /// <summary>
    ///     Gets or Sets AlertTypeGroupToSuppress
    /// </summary>
    [DataMember(Name = "alertTypeGroupToSuppress", EmitDefaultValue = false)]
    public AlertTypeGroupToSuppressDto? AlertTypeGroupToSuppress { get; set; }

    /// <summary>
    ///     Gets or Sets ScheduleSetPosition
    /// </summary>
    [DataMember(Name = "scheduleSetPosition", EmitDefaultValue = false)]
    public ScheduleSetPositionDto? ScheduleSetPosition { get; set; }

    /// <summary>
    ///     Gets or Sets MonthlyScheduleDayOfWeek
    /// </summary>
    [DataMember(Name = "monthlyScheduleDayOfWeek", EmitDefaultValue = false)]
    public DayOfWeek? MonthlyScheduleDayOfWeek { get; set; }

    /// <summary>
    ///     Gets or Sets Type
    /// </summary>
    [DataMember(Name = "type", EmitDefaultValue = true)]
    public string Type { get; private set; }

    /// <summary>
    ///     Gets or Sets Id
    /// </summary>
    [DataMember(Name = "id", EmitDefaultValue = false)]
    public IntegerIdentifier Id { get; set; }

    /// <summary>
    ///     Gets or Sets Name
    /// </summary>
    [DataMember(Name = "name", EmitDefaultValue = true)]
    public string Name { get; set; }

    /// <summary>
    ///     Gets or Sets Start
    /// </summary>
    [DataMember(Name = "start", EmitDefaultValue = true)]
    public string Start { get; set; }

    /// <summary>
    ///     Gets or Sets Duration
    /// </summary>
    [DataMember(Name = "duration", EmitDefaultValue = true)]
    public int? Duration { get; set; }

    /// <summary>
    ///     Gets or Sets Monday
    /// </summary>
    [DataMember(Name = "monday", EmitDefaultValue = true)]
    public bool Monday { get; set; }

    /// <summary>
    ///     Gets or Sets Tuesday
    /// </summary>
    [DataMember(Name = "tuesday", EmitDefaultValue = true)]
    public bool Tuesday { get; set; }

    /// <summary>
    ///     Gets or Sets Wednesday
    /// </summary>
    [DataMember(Name = "wednesday", EmitDefaultValue = true)]
    public bool Wednesday { get; set; }

    /// <summary>
    ///     Gets or Sets Thursday
    /// </summary>
    [DataMember(Name = "thursday", EmitDefaultValue = true)]
    public bool Thursday { get; set; }

    /// <summary>
    ///     Gets or Sets Friday
    /// </summary>
    [DataMember(Name = "friday", EmitDefaultValue = true)]
    public bool Friday { get; set; }

    /// <summary>
    ///     Gets or Sets Saturday
    /// </summary>
    [DataMember(Name = "saturday", EmitDefaultValue = true)]
    public bool Saturday { get; set; }

    /// <summary>
    ///     Gets or Sets Sunday
    /// </summary>
    [DataMember(Name = "sunday", EmitDefaultValue = true)]
    public bool Sunday { get; set; }

    /// <summary>
    ///     Gets or Sets StartDate
    /// </summary>
    [DataMember(Name = "startDate", EmitDefaultValue = true)]
    public DateTime? StartDate { get; set; }

    /// <summary>
    ///     Gets or Sets Targets
    /// </summary>
    [DataMember(Name = "targets", EmitDefaultValue = true)]
    public List<MonitoredObjectWithIdDto> Targets { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        // Duration (int?) maximum
        if (Duration > 5999)
            yield return new ValidationResult("Invalid value for Duration, must be a value less than or equal to 5999.",
                new[] { "Duration" });

        // Duration (int?) minimum
        if (Duration < 0)
            yield return new ValidationResult("Invalid value for Duration, must be a value greater than or equal to 0.",
                new[] { "Duration" });

        yield break;
    }

    /// <summary>
    ///     Returns false as Type should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeType()
    {
        return false;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class AlertSuppressionWindowDto {\n");
        sb.Append("  Type: ").Append(Type).Append("\n");
        sb.Append("  ScheduleFrequency: ").Append(ScheduleFrequency).Append("\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  Name: ").Append(Name).Append("\n");
        sb.Append("  Start: ").Append(Start).Append("\n");
        sb.Append("  Duration: ").Append(Duration).Append("\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("  AlertSuppressionLevel: ").Append(AlertSuppressionLevel).Append("\n");
        sb.Append("  AlertTypeGroupToSuppress: ").Append(AlertTypeGroupToSuppress).Append("\n");
        sb.Append("  Monday: ").Append(Monday).Append("\n");
        sb.Append("  Tuesday: ").Append(Tuesday).Append("\n");
        sb.Append("  Wednesday: ").Append(Wednesday).Append("\n");
        sb.Append("  Thursday: ").Append(Thursday).Append("\n");
        sb.Append("  Friday: ").Append(Friday).Append("\n");
        sb.Append("  Saturday: ").Append(Saturday).Append("\n");
        sb.Append("  Sunday: ").Append(Sunday).Append("\n");
        sb.Append("  ScheduleSetPosition: ").Append(ScheduleSetPosition).Append("\n");
        sb.Append("  StartDate: ").Append(StartDate).Append("\n");
        sb.Append("  MonthlyScheduleDayOfWeek: ").Append(MonthlyScheduleDayOfWeek).Append("\n");
        sb.Append("  Targets: ").Append(Targets).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}