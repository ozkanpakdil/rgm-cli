/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace cli.Model;

/// <summary>
///     TopQueryDtoTopQueryOutOfRangeDtoOneOf
/// </summary>
[JsonConverter(typeof(TopQueryDtoTopQueryOutOfRangeDtoOneOfJsonConverter))]
[DataContract(Name = "TopQueryDtoTopQueryOutOfRangeDtoOneOf")]
public class TopQueryDtoTopQueryOutOfRangeDtoOneOf : AbstractOpenAPISchema, IValidatableObject
{
    private object _actualInstance;

    /// <summary>
    ///     Initializes a new instance of the <see cref="TopQueryDtoTopQueryOutOfRangeDtoOneOf" /> class
    ///     with the <see cref="TopQueryDto" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of TopQueryDto.</param>
    public TopQueryDtoTopQueryOutOfRangeDtoOneOf(TopQueryDto actualInstance)
    {
        IsNullable = false;
        SchemaType = "oneOf";
        ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="TopQueryDtoTopQueryOutOfRangeDtoOneOf" /> class
    ///     with the <see cref="TopQueryOutOfRangeDto" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of TopQueryOutOfRangeDto.</param>
    public TopQueryDtoTopQueryOutOfRangeDtoOneOf(TopQueryOutOfRangeDto actualInstance)
    {
        IsNullable = false;
        SchemaType = "oneOf";
        ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    ///     Gets or Sets ActualInstance
    /// </summary>
    public override object ActualInstance
    {
        get => _actualInstance;
        set
        {
            if (value.GetType() == typeof(TopQueryDto) || value is TopQueryDto)
                _actualInstance = value;
            else if (value.GetType() == typeof(TopQueryOutOfRangeDto) || value is TopQueryOutOfRangeDto)
                _actualInstance = value;
            else
                throw new ArgumentException(
                    "Invalid instance found. Must be the following types: TopQueryDto, TopQueryOutOfRangeDto");
        }
    }


    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Get the actual instance of `TopQueryDto`. If the actual instance is not `TopQueryDto`,
    ///     the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of TopQueryDto</returns>
    public TopQueryDto GetTopQueryDto()
    {
        return (TopQueryDto)ActualInstance;
    }

    /// <summary>
    ///     Get the actual instance of `TopQueryOutOfRangeDto`. If the actual instance is not `TopQueryOutOfRangeDto`,
    ///     the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of TopQueryOutOfRangeDto</returns>
    public TopQueryOutOfRangeDto GetTopQueryOutOfRangeDto()
    {
        return (TopQueryOutOfRangeDto)ActualInstance;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class TopQueryDtoTopQueryOutOfRangeDtoOneOf {\n");
        sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public override string ToJson()
    {
        return JsonConvert.SerializeObject(ActualInstance, SerializerSettings);
    }

    /// <summary>
    ///     Converts the JSON string into an instance of TopQueryDtoTopQueryOutOfRangeDtoOneOf
    /// </summary>
    /// <param name="jsonString">JSON string</param>
    /// <returns>An instance of TopQueryDtoTopQueryOutOfRangeDtoOneOf</returns>
    public static TopQueryDtoTopQueryOutOfRangeDtoOneOf FromJson(string jsonString)
    {
        TopQueryDtoTopQueryOutOfRangeDtoOneOf newTopQueryDtoTopQueryOutOfRangeDtoOneOf = null;

        if (string.IsNullOrEmpty(jsonString)) return newTopQueryDtoTopQueryOutOfRangeDtoOneOf;
        var match = 0;
        var matchedTypes = new List<string>();

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(TopQueryDto).GetProperty("AdditionalProperties") == null)
                newTopQueryDtoTopQueryOutOfRangeDtoOneOf =
                    new TopQueryDtoTopQueryOutOfRangeDtoOneOf(
                        JsonConvert.DeserializeObject<TopQueryDto>(jsonString, SerializerSettings));
            else
                newTopQueryDtoTopQueryOutOfRangeDtoOneOf = new TopQueryDtoTopQueryOutOfRangeDtoOneOf(
                    JsonConvert.DeserializeObject<TopQueryDto>(jsonString, AdditionalPropertiesSerializerSettings));
            matchedTypes.Add("TopQueryDto");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            Debug.WriteLine("Failed to deserialize `{0}` into TopQueryDto: {1}", jsonString, exception);
        }

        try
        {
            // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
            if (typeof(TopQueryOutOfRangeDto).GetProperty("AdditionalProperties") == null)
                newTopQueryDtoTopQueryOutOfRangeDtoOneOf =
                    new TopQueryDtoTopQueryOutOfRangeDtoOneOf(
                        JsonConvert.DeserializeObject<TopQueryOutOfRangeDto>(jsonString, SerializerSettings));
            else
                newTopQueryDtoTopQueryOutOfRangeDtoOneOf = new TopQueryDtoTopQueryOutOfRangeDtoOneOf(
                    JsonConvert.DeserializeObject<TopQueryOutOfRangeDto>(jsonString,
                        AdditionalPropertiesSerializerSettings));
            matchedTypes.Add("TopQueryOutOfRangeDto");
            match++;
        }
        catch (Exception exception)
        {
            // deserialization failed, try the next one
            Debug.WriteLine("Failed to deserialize `{0}` into TopQueryOutOfRangeDto: {1}", jsonString, exception);
        }

        if (match == 0)
            throw new InvalidDataException("The JSON string `" + jsonString +
                                           "` cannot be deserialized into any schema defined.");

        if (match > 1)
            throw new InvalidDataException("The JSON string `" + jsonString +
                                           "` incorrectly matches more than one schema (should be exactly one match): " +
                                           string.Join(",", matchedTypes));

        // deserialization is considered successful at this point if no exception has been thrown.
        return newTopQueryDtoTopQueryOutOfRangeDtoOneOf;
    }
}

/// <summary>
///     Custom JSON converter for TopQueryDtoTopQueryOutOfRangeDtoOneOf
/// </summary>
public class TopQueryDtoTopQueryOutOfRangeDtoOneOfJsonConverter : JsonConverter
{
    /// <summary>
    ///     To write the JSON string
    /// </summary>
    /// <param name="writer">JSON writer</param>
    /// <param name="value">Object to be converted into a JSON string</param>
    /// <param name="serializer">JSON Serializer</param>
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
        writer.WriteRawValue((string)typeof(TopQueryDtoTopQueryOutOfRangeDtoOneOf).GetMethod("ToJson")
            .Invoke(value, null));
    }

    /// <summary>
    ///     To convert a JSON string into an object
    /// </summary>
    /// <param name="reader">JSON reader</param>
    /// <param name="objectType">Object type</param>
    /// <param name="existingValue">Existing value</param>
    /// <param name="serializer">JSON Serializer</param>
    /// <returns>The object converted from the JSON string</returns>
    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
        switch (reader.TokenType)
        {
            case JsonToken.StartObject:
                return TopQueryDtoTopQueryOutOfRangeDtoOneOf.FromJson(JObject.Load(reader).ToString(Formatting.None));
            case JsonToken.StartArray:
                return TopQueryDtoTopQueryOutOfRangeDtoOneOf.FromJson(JArray.Load(reader).ToString(Formatting.None));
            default:
                return null;
        }
    }

    /// <summary>
    ///     Check if the object can be converted
    /// </summary>
    /// <param name="objectType">Object type</param>
    /// <returns>True if the object can be converted</returns>
    public override bool CanConvert(Type objectType)
    {
        return false;
    }
}