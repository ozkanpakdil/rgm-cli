/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace cli.Model;

/// <summary>
///     NetworkDto
/// </summary>
[DataContract(Name = "NetworkDto")]
public class NetworkDto : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="NetworkDto" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    public NetworkDto()
    {
    }

    /// <summary>
    ///     Gets or Sets NamedPipesEnabled
    /// </summary>
    [DataMember(Name = "namedPipesEnabled", EmitDefaultValue = true)]
    public bool? NamedPipesEnabled { get; private set; }

    /// <summary>
    ///     Gets or Sets SharedMemoryEnabled
    /// </summary>
    [DataMember(Name = "sharedMemoryEnabled", EmitDefaultValue = true)]
    public bool? SharedMemoryEnabled { get; private set; }

    /// <summary>
    ///     Gets or Sets TcpIpEnabled
    /// </summary>
    [DataMember(Name = "tcpIpEnabled", EmitDefaultValue = true)]
    public bool? TcpIpEnabled { get; private set; }

    /// <summary>
    ///     Gets or Sets TcpListenAll
    /// </summary>
    [DataMember(Name = "tcpListenAll", EmitDefaultValue = true)]
    public bool? TcpListenAll { get; private set; }

    /// <summary>
    ///     Gets or Sets TcpEndpoints
    /// </summary>
    [DataMember(Name = "tcpEndpoints", EmitDefaultValue = false)]
    public List<TcpEndpointDto> TcpEndpoints { get; private set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns false as NamedPipesEnabled should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeNamedPipesEnabled()
    {
        return false;
    }

    /// <summary>
    ///     Returns false as SharedMemoryEnabled should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeSharedMemoryEnabled()
    {
        return false;
    }

    /// <summary>
    ///     Returns false as TcpIpEnabled should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeTcpIpEnabled()
    {
        return false;
    }

    /// <summary>
    ///     Returns false as TcpListenAll should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeTcpListenAll()
    {
        return false;
    }

    /// <summary>
    ///     Returns false as TcpEndpoints should not be serialized given that it's read-only.
    /// </summary>
    /// <returns>false (boolean)</returns>
    public bool ShouldSerializeTcpEndpoints()
    {
        return false;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class NetworkDto {\n");
        sb.Append("  NamedPipesEnabled: ").Append(NamedPipesEnabled).Append("\n");
        sb.Append("  SharedMemoryEnabled: ").Append(SharedMemoryEnabled).Append("\n");
        sb.Append("  TcpIpEnabled: ").Append(TcpIpEnabled).Append("\n");
        sb.Append("  TcpListenAll: ").Append(TcpListenAll).Append("\n");
        sb.Append("  TcpEndpoints: ").Append(TcpEndpoints).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}