/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using RedGate.SqlMonitor.Channels.Data;

namespace cli.Model;

/// <summary>
///     PermissionChangeDto
/// </summary>
[DataContract(Name = "PermissionChangeDto")]
public class PermissionChangeDto : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="PermissionChangeDto" /> class.
    /// </summary>
    /// <param name="cir">cir.</param>
    /// <param name="permissionType">permissionType.</param>
    /// <param name="dateOfChange">dateOfChange.</param>
    /// <param name="serverName">serverName.</param>
    /// <param name="databaseName">databaseName.</param>
    /// <param name="principal">principal.</param>
    /// <param name="principalType">principalType.</param>
    /// <param name="objectName">objectName.</param>
    /// <param name="currentState">currentState.</param>
    /// <param name="previousState">previousState.</param>
    /// <param name="changedBy">changedBy.</param>
    /// <param name="permissionChangeType">permissionChangeType.</param>
    /// <param name="majorId">majorId.</param>
    /// <param name="additionalInfo">additionalInfo.</param>
    public PermissionChangeDto(ChannelInstanceRef cir = default, string permissionType = default,
        DateTime dateOfChange = default, string serverName = default, string databaseName = default,
        string principal = default, string principalType = default, string objectName = default,
        string currentState = default, string previousState = default, string changedBy = default,
        PermissionChangeType? permissionChangeType = default, IntegerIdentifier majorId = default,
        string additionalInfo = default)
    {
        Cir = cir;
        PermissionType = permissionType;
        DateOfChange = dateOfChange;
        ServerName = serverName;
        DatabaseName = databaseName;
        Principal = principal;
        PrincipalType = principalType;
        ObjectName = objectName;
        CurrentState = currentState;
        PreviousState = previousState;
        ChangedBy = changedBy;
        PermissionChangeType = permissionChangeType;
        MajorId = majorId;
        AdditionalInfo = additionalInfo;
    }

    /// <summary>
    ///     Gets or Sets PermissionChangeType
    /// </summary>
    [DataMember(Name = "permissionChangeType", EmitDefaultValue = false)]
    public PermissionChangeType? PermissionChangeType { get; set; }

    /// <summary>
    ///     Gets or Sets Cir
    /// </summary>
    [DataMember(Name = "cir", EmitDefaultValue = false)]
    public ChannelInstanceRef Cir { get; set; }

    /// <summary>
    ///     Gets or Sets PermissionType
    /// </summary>
    [DataMember(Name = "permissionType", EmitDefaultValue = false)]
    public string PermissionType { get; set; }

    /// <summary>
    ///     Gets or Sets DateOfChange
    /// </summary>
    [DataMember(Name = "dateOfChange", EmitDefaultValue = false)]
    public DateTime DateOfChange { get; set; }

    /// <summary>
    ///     Gets or Sets ServerName
    /// </summary>
    [DataMember(Name = "serverName", EmitDefaultValue = false)]
    public string ServerName { get; set; }

    /// <summary>
    ///     Gets or Sets DatabaseName
    /// </summary>
    [DataMember(Name = "databaseName", EmitDefaultValue = false)]
    public string DatabaseName { get; set; }

    /// <summary>
    ///     Gets or Sets Principal
    /// </summary>
    [DataMember(Name = "principal", EmitDefaultValue = false)]
    public string Principal { get; set; }

    /// <summary>
    ///     Gets or Sets PrincipalType
    /// </summary>
    [DataMember(Name = "principalType", EmitDefaultValue = false)]
    public string PrincipalType { get; set; }

    /// <summary>
    ///     Gets or Sets ObjectName
    /// </summary>
    [DataMember(Name = "objectName", EmitDefaultValue = false)]
    public string ObjectName { get; set; }

    /// <summary>
    ///     Gets or Sets CurrentState
    /// </summary>
    [DataMember(Name = "currentState", EmitDefaultValue = false)]
    public string CurrentState { get; set; }

    /// <summary>
    ///     Gets or Sets PreviousState
    /// </summary>
    [DataMember(Name = "previousState", EmitDefaultValue = true)]
    public string PreviousState { get; set; }

    /// <summary>
    ///     Gets or Sets ChangedBy
    /// </summary>
    [DataMember(Name = "changedBy", EmitDefaultValue = false)]
    public string ChangedBy { get; set; }

    /// <summary>
    ///     Gets or Sets MajorId
    /// </summary>
    [DataMember(Name = "majorId", EmitDefaultValue = false)]
    public IntegerIdentifier MajorId { get; set; }

    /// <summary>
    ///     Gets or Sets AdditionalInfo
    /// </summary>
    [DataMember(Name = "additionalInfo", EmitDefaultValue = false)]
    public string AdditionalInfo { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class PermissionChangeDto {\n");
        sb.Append("  Cir: ").Append(Cir).Append("\n");
        sb.Append("  PermissionType: ").Append(PermissionType).Append("\n");
        sb.Append("  DateOfChange: ").Append(DateOfChange).Append("\n");
        sb.Append("  ServerName: ").Append(ServerName).Append("\n");
        sb.Append("  DatabaseName: ").Append(DatabaseName).Append("\n");
        sb.Append("  Principal: ").Append(Principal).Append("\n");
        sb.Append("  PrincipalType: ").Append(PrincipalType).Append("\n");
        sb.Append("  ObjectName: ").Append(ObjectName).Append("\n");
        sb.Append("  CurrentState: ").Append(CurrentState).Append("\n");
        sb.Append("  PreviousState: ").Append(PreviousState).Append("\n");
        sb.Append("  ChangedBy: ").Append(ChangedBy).Append("\n");
        sb.Append("  PermissionChangeType: ").Append(PermissionChangeType).Append("\n");
        sb.Append("  MajorId: ").Append(MajorId).Append("\n");
        sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}