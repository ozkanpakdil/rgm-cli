/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using RedGate.SqlMonitor.Common.Domain;

namespace cli.Model;

/// <summary>
///     MonitoredEntityDto
/// </summary>
[DataContract(Name = "MonitoredEntityDto")]
public class MonitoredEntityDto : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="MonitoredEntityDto" /> class.
    /// </summary>
    /// <param name="id">id.</param>
    /// <param name="displayName">displayName.</param>
    /// <param name="type">type.</param>
    /// <param name="fullyQualifiedName">fullyQualifiedName.</param>
    /// <param name="group">group.</param>
    /// <param name="monitoringStatus">monitoringStatus.</param>
    /// <param name="parentId">parentId.</param>
    public MonitoredEntityDto(string id = default, string displayName = default, EntityType? type = default,
        string fullyQualifiedName = default, string group = default,
        MonitoredEntitySeverity? monitoringStatus = default, string parentId = default)
    {
        Id = id;
        DisplayName = displayName;
        Type = type;
        FullyQualifiedName = fullyQualifiedName;
        Group = group;
        MonitoringStatus = monitoringStatus;
        ParentId = parentId;
    }

    /// <summary>
    ///     Gets or Sets Type
    /// </summary>
    [DataMember(Name = "type", EmitDefaultValue = false)]
    public EntityType? Type { get; set; }

    /// <summary>
    ///     Gets or Sets MonitoringStatus
    /// </summary>
    [DataMember(Name = "monitoringStatus", EmitDefaultValue = false)]
    public MonitoredEntitySeverity? MonitoringStatus { get; set; }

    /// <summary>
    ///     Gets or Sets Id
    /// </summary>
    [DataMember(Name = "id", EmitDefaultValue = true)]
    public string Id { get; set; }

    /// <summary>
    ///     Gets or Sets DisplayName
    /// </summary>
    [DataMember(Name = "displayName", EmitDefaultValue = true)]
    public string DisplayName { get; set; }

    /// <summary>
    ///     Gets or Sets FullyQualifiedName
    /// </summary>
    [DataMember(Name = "fullyQualifiedName", EmitDefaultValue = true)]
    public string FullyQualifiedName { get; set; }

    /// <summary>
    ///     Gets or Sets Group
    /// </summary>
    [DataMember(Name = "group", EmitDefaultValue = true)]
    public string Group { get; set; }

    /// <summary>
    ///     Gets or Sets ParentId
    /// </summary>
    [DataMember(Name = "parentId", EmitDefaultValue = true)]
    public string ParentId { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class MonitoredEntityDto {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
        sb.Append("  Type: ").Append(Type).Append("\n");
        sb.Append("  FullyQualifiedName: ").Append(FullyQualifiedName).Append("\n");
        sb.Append("  Group: ").Append(Group).Append("\n");
        sb.Append("  MonitoringStatus: ").Append(MonitoringStatus).Append("\n");
        sb.Append("  ParentId: ").Append(ParentId).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}