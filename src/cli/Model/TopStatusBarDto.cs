/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// TopStatusBarDto
    /// </summary>
    [DataContract(Name = "TopStatusBarDto")]
    public partial class TopStatusBarDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TopStatusBarDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TopStatusBarDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TopStatusBarDto" /> class.
        /// </summary>
        /// <param name="productName">productName (required).</param>
        /// <param name="licensingWarnings">licensingWarnings (required).</param>
        /// <param name="failingNotifiers">failingNotifiers (required).</param>
        /// <param name="showHttpWarning">showHttpWarning (required).</param>
        /// <param name="showTopBar">showTopBar (required).</param>
        /// <param name="updates">updates (required).</param>
        /// <param name="skewedClocks">skewedClocks (required).</param>
        /// <param name="blockedBaseMonitors">blockedBaseMonitors (required).</param>
        /// <param name="baseMonitorsWithDecryptionFailures">baseMonitorsWithDecryptionFailures (required).</param>
        /// <param name="isConnectedToBaseMonitorUsingPostgres">isConnectedToBaseMonitorUsingPostgres (required).</param>
        public TopStatusBarDto(string productName = default(string), LicensingWarningsDto licensingWarnings = default(LicensingWarningsDto), List<string> failingNotifiers = default(List<string>), bool showHttpWarning = default(bool), bool showTopBar = default(bool), UpdatesDto updates = default(UpdatesDto), SkewedClocksDto skewedClocks = default(SkewedClocksDto), BlockedBaseMonitorsDto blockedBaseMonitors = default(BlockedBaseMonitorsDto), List<string> baseMonitorsWithDecryptionFailures = default(List<string>), bool isConnectedToBaseMonitorUsingPostgres = default(bool))
        {
            // to ensure "productName" is required (not null)
            if (productName == null)
            {
                throw new ArgumentNullException("productName is a required property for TopStatusBarDto and cannot be null");
            }
            this.ProductName = productName;
            // to ensure "licensingWarnings" is required (not null)
            if (licensingWarnings == null)
            {
                throw new ArgumentNullException("licensingWarnings is a required property for TopStatusBarDto and cannot be null");
            }
            this.LicensingWarnings = licensingWarnings;
            // to ensure "failingNotifiers" is required (not null)
            if (failingNotifiers == null)
            {
                throw new ArgumentNullException("failingNotifiers is a required property for TopStatusBarDto and cannot be null");
            }
            this.FailingNotifiers = failingNotifiers;
            this.ShowHttpWarning = showHttpWarning;
            this.ShowTopBar = showTopBar;
            // to ensure "updates" is required (not null)
            if (updates == null)
            {
                throw new ArgumentNullException("updates is a required property for TopStatusBarDto and cannot be null");
            }
            this.Updates = updates;
            // to ensure "skewedClocks" is required (not null)
            if (skewedClocks == null)
            {
                throw new ArgumentNullException("skewedClocks is a required property for TopStatusBarDto and cannot be null");
            }
            this.SkewedClocks = skewedClocks;
            // to ensure "blockedBaseMonitors" is required (not null)
            if (blockedBaseMonitors == null)
            {
                throw new ArgumentNullException("blockedBaseMonitors is a required property for TopStatusBarDto and cannot be null");
            }
            this.BlockedBaseMonitors = blockedBaseMonitors;
            // to ensure "baseMonitorsWithDecryptionFailures" is required (not null)
            if (baseMonitorsWithDecryptionFailures == null)
            {
                throw new ArgumentNullException("baseMonitorsWithDecryptionFailures is a required property for TopStatusBarDto and cannot be null");
            }
            this.BaseMonitorsWithDecryptionFailures = baseMonitorsWithDecryptionFailures;
            this.IsConnectedToBaseMonitorUsingPostgres = isConnectedToBaseMonitorUsingPostgres;
        }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        [DataMember(Name = "productName", IsRequired = true, EmitDefaultValue = true)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets LicensingWarnings
        /// </summary>
        [DataMember(Name = "licensingWarnings", IsRequired = true, EmitDefaultValue = true)]
        public LicensingWarningsDto LicensingWarnings { get; set; }

        /// <summary>
        /// Gets or Sets FailingNotifiers
        /// </summary>
        [DataMember(Name = "failingNotifiers", IsRequired = true, EmitDefaultValue = true)]
        public List<string> FailingNotifiers { get; set; }

        /// <summary>
        /// Gets or Sets ShowHttpWarning
        /// </summary>
        [DataMember(Name = "showHttpWarning", IsRequired = true, EmitDefaultValue = true)]
        public bool ShowHttpWarning { get; set; }

        /// <summary>
        /// Gets or Sets ShowTopBar
        /// </summary>
        [DataMember(Name = "showTopBar", IsRequired = true, EmitDefaultValue = true)]
        public bool ShowTopBar { get; set; }

        /// <summary>
        /// Gets or Sets Updates
        /// </summary>
        [DataMember(Name = "updates", IsRequired = true, EmitDefaultValue = true)]
        public UpdatesDto Updates { get; set; }

        /// <summary>
        /// Gets or Sets SkewedClocks
        /// </summary>
        [DataMember(Name = "skewedClocks", IsRequired = true, EmitDefaultValue = true)]
        public SkewedClocksDto SkewedClocks { get; set; }

        /// <summary>
        /// Gets or Sets BlockedBaseMonitors
        /// </summary>
        [DataMember(Name = "blockedBaseMonitors", IsRequired = true, EmitDefaultValue = true)]
        public BlockedBaseMonitorsDto BlockedBaseMonitors { get; set; }

        /// <summary>
        /// Gets or Sets BaseMonitorsWithDecryptionFailures
        /// </summary>
        [DataMember(Name = "baseMonitorsWithDecryptionFailures", IsRequired = true, EmitDefaultValue = true)]
        public List<string> BaseMonitorsWithDecryptionFailures { get; set; }

        /// <summary>
        /// Gets or Sets IsConnectedToBaseMonitorUsingPostgres
        /// </summary>
        [DataMember(Name = "isConnectedToBaseMonitorUsingPostgres", IsRequired = true, EmitDefaultValue = true)]
        public bool IsConnectedToBaseMonitorUsingPostgres { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TopStatusBarDto {\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  LicensingWarnings: ").Append(LicensingWarnings).Append("\n");
            sb.Append("  FailingNotifiers: ").Append(FailingNotifiers).Append("\n");
            sb.Append("  ShowHttpWarning: ").Append(ShowHttpWarning).Append("\n");
            sb.Append("  ShowTopBar: ").Append(ShowTopBar).Append("\n");
            sb.Append("  Updates: ").Append(Updates).Append("\n");
            sb.Append("  SkewedClocks: ").Append(SkewedClocks).Append("\n");
            sb.Append("  BlockedBaseMonitors: ").Append(BlockedBaseMonitors).Append("\n");
            sb.Append("  BaseMonitorsWithDecryptionFailures: ").Append(BaseMonitorsWithDecryptionFailures).Append("\n");
            sb.Append("  IsConnectedToBaseMonitorUsingPostgres: ").Append(IsConnectedToBaseMonitorUsingPostgres).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
