/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace cli.Model;

/// <summary>
///     TopStatusBarDto
/// </summary>
[DataContract(Name = "TopStatusBarDto")]
public class TopStatusBarDto : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="TopStatusBarDto" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected TopStatusBarDto()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="TopStatusBarDto" /> class.
    /// </summary>
    /// <param name="productName">productName (required).</param>
    /// <param name="licensingWarnings">licensingWarnings (required).</param>
    /// <param name="failingNotifiers">failingNotifiers (required).</param>
    /// <param name="showHttpWarning">showHttpWarning (required).</param>
    /// <param name="showTopBar">showTopBar (required).</param>
    /// <param name="updates">updates (required).</param>
    /// <param name="skewedClocks">skewedClocks (required).</param>
    /// <param name="blockedBaseMonitors">blockedBaseMonitors (required).</param>
    /// <param name="baseMonitorsWithDecryptionFailures">baseMonitorsWithDecryptionFailures (required).</param>
    /// <param name="isConnectedToBaseMonitorUsingPostgres">isConnectedToBaseMonitorUsingPostgres (required).</param>
    public TopStatusBarDto(string productName = default, LicensingWarningsDto licensingWarnings = default,
        List<string> failingNotifiers = default, bool showHttpWarning = default, bool showTopBar = default,
        UpdatesDto updates = default, SkewedClocksDto skewedClocks = default,
        BlockedBaseMonitorsDto blockedBaseMonitors = default, List<string> baseMonitorsWithDecryptionFailures = default,
        bool isConnectedToBaseMonitorUsingPostgres = default)
    {
        // to ensure "productName" is required (not null)
        if (productName == null)
            throw new ArgumentNullException(
                "productName is a required property for TopStatusBarDto and cannot be null");
        ProductName = productName;
        // to ensure "licensingWarnings" is required (not null)
        if (licensingWarnings == null)
            throw new ArgumentNullException(
                "licensingWarnings is a required property for TopStatusBarDto and cannot be null");
        LicensingWarnings = licensingWarnings;
        // to ensure "failingNotifiers" is required (not null)
        if (failingNotifiers == null)
            throw new ArgumentNullException(
                "failingNotifiers is a required property for TopStatusBarDto and cannot be null");
        FailingNotifiers = failingNotifiers;
        ShowHttpWarning = showHttpWarning;
        ShowTopBar = showTopBar;
        // to ensure "updates" is required (not null)
        if (updates == null)
            throw new ArgumentNullException("updates is a required property for TopStatusBarDto and cannot be null");
        Updates = updates;
        // to ensure "skewedClocks" is required (not null)
        if (skewedClocks == null)
            throw new ArgumentNullException(
                "skewedClocks is a required property for TopStatusBarDto and cannot be null");
        SkewedClocks = skewedClocks;
        // to ensure "blockedBaseMonitors" is required (not null)
        if (blockedBaseMonitors == null)
            throw new ArgumentNullException(
                "blockedBaseMonitors is a required property for TopStatusBarDto and cannot be null");
        BlockedBaseMonitors = blockedBaseMonitors;
        // to ensure "baseMonitorsWithDecryptionFailures" is required (not null)
        if (baseMonitorsWithDecryptionFailures == null)
            throw new ArgumentNullException(
                "baseMonitorsWithDecryptionFailures is a required property for TopStatusBarDto and cannot be null");
        BaseMonitorsWithDecryptionFailures = baseMonitorsWithDecryptionFailures;
        IsConnectedToBaseMonitorUsingPostgres = isConnectedToBaseMonitorUsingPostgres;
    }

    /// <summary>
    ///     Gets or Sets ProductName
    /// </summary>
    [DataMember(Name = "productName", IsRequired = true, EmitDefaultValue = true)]
    public string ProductName { get; set; }

    /// <summary>
    ///     Gets or Sets LicensingWarnings
    /// </summary>
    [DataMember(Name = "licensingWarnings", IsRequired = true, EmitDefaultValue = true)]
    public LicensingWarningsDto LicensingWarnings { get; set; }

    /// <summary>
    ///     Gets or Sets FailingNotifiers
    /// </summary>
    [DataMember(Name = "failingNotifiers", IsRequired = true, EmitDefaultValue = true)]
    public List<string> FailingNotifiers { get; set; }

    /// <summary>
    ///     Gets or Sets ShowHttpWarning
    /// </summary>
    [DataMember(Name = "showHttpWarning", IsRequired = true, EmitDefaultValue = true)]
    public bool ShowHttpWarning { get; set; }

    /// <summary>
    ///     Gets or Sets ShowTopBar
    /// </summary>
    [DataMember(Name = "showTopBar", IsRequired = true, EmitDefaultValue = true)]
    public bool ShowTopBar { get; set; }

    /// <summary>
    ///     Gets or Sets Updates
    /// </summary>
    [DataMember(Name = "updates", IsRequired = true, EmitDefaultValue = true)]
    public UpdatesDto Updates { get; set; }

    /// <summary>
    ///     Gets or Sets SkewedClocks
    /// </summary>
    [DataMember(Name = "skewedClocks", IsRequired = true, EmitDefaultValue = true)]
    public SkewedClocksDto SkewedClocks { get; set; }

    /// <summary>
    ///     Gets or Sets BlockedBaseMonitors
    /// </summary>
    [DataMember(Name = "blockedBaseMonitors", IsRequired = true, EmitDefaultValue = true)]
    public BlockedBaseMonitorsDto BlockedBaseMonitors { get; set; }

    /// <summary>
    ///     Gets or Sets BaseMonitorsWithDecryptionFailures
    /// </summary>
    [DataMember(Name = "baseMonitorsWithDecryptionFailures", IsRequired = true, EmitDefaultValue = true)]
    public List<string> BaseMonitorsWithDecryptionFailures { get; set; }

    /// <summary>
    ///     Gets or Sets IsConnectedToBaseMonitorUsingPostgres
    /// </summary>
    [DataMember(Name = "isConnectedToBaseMonitorUsingPostgres", IsRequired = true, EmitDefaultValue = true)]
    public bool IsConnectedToBaseMonitorUsingPostgres { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class TopStatusBarDto {\n");
        sb.Append("  ProductName: ").Append(ProductName).Append("\n");
        sb.Append("  LicensingWarnings: ").Append(LicensingWarnings).Append("\n");
        sb.Append("  FailingNotifiers: ").Append(FailingNotifiers).Append("\n");
        sb.Append("  ShowHttpWarning: ").Append(ShowHttpWarning).Append("\n");
        sb.Append("  ShowTopBar: ").Append(ShowTopBar).Append("\n");
        sb.Append("  Updates: ").Append(Updates).Append("\n");
        sb.Append("  SkewedClocks: ").Append(SkewedClocks).Append("\n");
        sb.Append("  BlockedBaseMonitors: ").Append(BlockedBaseMonitors).Append("\n");
        sb.Append("  BaseMonitorsWithDecryptionFailures: ").Append(BaseMonitorsWithDecryptionFailures).Append("\n");
        sb.Append("  IsConnectedToBaseMonitorUsingPostgres: ").Append(IsConnectedToBaseMonitorUsingPostgres)
            .Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}