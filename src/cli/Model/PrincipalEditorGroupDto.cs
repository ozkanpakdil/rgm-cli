/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// PrincipalEditorGroupDto
    /// </summary>
    [DataContract(Name = "PrincipalEditorGroupDto")]
    public partial class PrincipalEditorGroupDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrincipalEditorGroupDto" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="selected">selected.</param>
        /// <param name="groups">groups.</param>
        /// <param name="clusters">clusters.</param>
        /// <param name="azureSqlServers">azureSqlServers.</param>
        /// <param name="amazonRdsSqlServers">amazonRdsSqlServers.</param>
        /// <param name="azureManagedInstances">azureManagedInstances.</param>
        /// <param name="linuxMachines">linuxMachines.</param>
        /// <param name="postgreSqlInstances">postgreSqlInstances.</param>
        /// <param name="id">id.</param>
        /// <param name="baseMonitorNames">baseMonitorNames.</param>
        public PrincipalEditorGroupDto(string name = default(string), bool? selected = default(bool?), List<PrincipalEditorGroupDto> groups = default(List<PrincipalEditorGroupDto>), List<PrincipalEditorMonitoredEntityDto> clusters = default(List<PrincipalEditorMonitoredEntityDto>), List<PrincipalEditorMonitoredEntityDto> azureSqlServers = default(List<PrincipalEditorMonitoredEntityDto>), List<PrincipalEditorMonitoredEntityDto> amazonRdsSqlServers = default(List<PrincipalEditorMonitoredEntityDto>), List<PrincipalEditorMonitoredEntityDto> azureManagedInstances = default(List<PrincipalEditorMonitoredEntityDto>), List<PrincipalEditorMonitoredEntityDto> linuxMachines = default(List<PrincipalEditorMonitoredEntityDto>), List<PrincipalEditorMonitoredEntityDto> postgreSqlInstances = default(List<PrincipalEditorMonitoredEntityDto>), string id = default(string), List<string> baseMonitorNames = default(List<string>))
        {
            this.Name = name;
            this.Selected = selected;
            this.Groups = groups;
            this.Clusters = clusters;
            this.AzureSqlServers = azureSqlServers;
            this.AmazonRdsSqlServers = amazonRdsSqlServers;
            this.AzureManagedInstances = azureManagedInstances;
            this.LinuxMachines = linuxMachines;
            this.PostgreSqlInstances = postgreSqlInstances;
            this.Id = id;
            this.BaseMonitorNames = baseMonitorNames;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Selected
        /// </summary>
        [DataMember(Name = "selected", EmitDefaultValue = true)]
        public bool? Selected { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", EmitDefaultValue = true)]
        public List<PrincipalEditorGroupDto> Groups { get; set; }

        /// <summary>
        /// Gets or Sets Clusters
        /// </summary>
        [DataMember(Name = "clusters", EmitDefaultValue = true)]
        public List<PrincipalEditorMonitoredEntityDto> Clusters { get; set; }

        /// <summary>
        /// Gets or Sets AzureSqlServers
        /// </summary>
        [DataMember(Name = "azureSqlServers", EmitDefaultValue = true)]
        public List<PrincipalEditorMonitoredEntityDto> AzureSqlServers { get; set; }

        /// <summary>
        /// Gets or Sets AmazonRdsSqlServers
        /// </summary>
        [DataMember(Name = "amazonRdsSqlServers", EmitDefaultValue = true)]
        public List<PrincipalEditorMonitoredEntityDto> AmazonRdsSqlServers { get; set; }

        /// <summary>
        /// Gets or Sets AzureManagedInstances
        /// </summary>
        [DataMember(Name = "azureManagedInstances", EmitDefaultValue = true)]
        public List<PrincipalEditorMonitoredEntityDto> AzureManagedInstances { get; set; }

        /// <summary>
        /// Gets or Sets LinuxMachines
        /// </summary>
        [DataMember(Name = "linuxMachines", EmitDefaultValue = true)]
        public List<PrincipalEditorMonitoredEntityDto> LinuxMachines { get; set; }

        /// <summary>
        /// Gets or Sets PostgreSqlInstances
        /// </summary>
        [DataMember(Name = "postgreSqlInstances", EmitDefaultValue = true)]
        public List<PrincipalEditorMonitoredEntityDto> PostgreSqlInstances { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets BaseMonitorNames
        /// </summary>
        [DataMember(Name = "baseMonitorNames", EmitDefaultValue = true)]
        public List<string> BaseMonitorNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrincipalEditorGroupDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Clusters: ").Append(Clusters).Append("\n");
            sb.Append("  AzureSqlServers: ").Append(AzureSqlServers).Append("\n");
            sb.Append("  AmazonRdsSqlServers: ").Append(AmazonRdsSqlServers).Append("\n");
            sb.Append("  AzureManagedInstances: ").Append(AzureManagedInstances).Append("\n");
            sb.Append("  LinuxMachines: ").Append(LinuxMachines).Append("\n");
            sb.Append("  PostgreSqlInstances: ").Append(PostgreSqlInstances).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BaseMonitorNames: ").Append(BaseMonitorNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
