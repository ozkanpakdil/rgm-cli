/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace cli.Model;

/// <summary>
///     SqlServerInstanceConfiguration
/// </summary>
[DataContract(Name = "SqlServerInstanceConfiguration")]
public class SqlServerInstanceConfiguration : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="SqlServerInstanceConfiguration" /> class.
    /// </summary>
    /// <param name="sqlServerConnectionProperties">sqlServerConnectionProperties.</param>
    /// <param name="useBaseMonitorServiceAccount">useBaseMonitorServiceAccount.</param>
    /// <param name="useSameCredentialsAsHost">useSameCredentialsAsHost.</param>
    /// <param name="authenticationMode">authenticationMode.</param>
    /// <param name="credentials">credentials.</param>
    public SqlServerInstanceConfiguration(SqlServerConnectionPropertiesModel sqlServerConnectionProperties = default,
        bool useBaseMonitorServiceAccount = default, bool useSameCredentialsAsHost = default,
        SqlServerAuthenticationMode? authenticationMode = default, CredentialsDto credentials = default)
    {
        SqlServerConnectionProperties = sqlServerConnectionProperties;
        UseBaseMonitorServiceAccount = useBaseMonitorServiceAccount;
        UseSameCredentialsAsHost = useSameCredentialsAsHost;
        AuthenticationMode = authenticationMode;
        Credentials = credentials;
    }

    /// <summary>
    ///     Gets or Sets AuthenticationMode
    /// </summary>
    [DataMember(Name = "authenticationMode", EmitDefaultValue = false)]
    public SqlServerAuthenticationMode? AuthenticationMode { get; set; }

    /// <summary>
    ///     Gets or Sets SqlServerConnectionProperties
    /// </summary>
    [DataMember(Name = "sqlServerConnectionProperties", EmitDefaultValue = false)]
    public SqlServerConnectionPropertiesModel SqlServerConnectionProperties { get; set; }

    /// <summary>
    ///     Gets or Sets UseBaseMonitorServiceAccount
    /// </summary>
    [DataMember(Name = "useBaseMonitorServiceAccount", EmitDefaultValue = true)]
    public bool UseBaseMonitorServiceAccount { get; set; }

    /// <summary>
    ///     Gets or Sets UseSameCredentialsAsHost
    /// </summary>
    [DataMember(Name = "useSameCredentialsAsHost", EmitDefaultValue = true)]
    public bool UseSameCredentialsAsHost { get; set; }

    /// <summary>
    ///     Gets or Sets Credentials
    /// </summary>
    [DataMember(Name = "credentials", EmitDefaultValue = false)]
    public CredentialsDto Credentials { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class SqlServerInstanceConfiguration {\n");
        sb.Append("  SqlServerConnectionProperties: ").Append(SqlServerConnectionProperties).Append("\n");
        sb.Append("  UseBaseMonitorServiceAccount: ").Append(UseBaseMonitorServiceAccount).Append("\n");
        sb.Append("  UseSameCredentialsAsHost: ").Append(UseSameCredentialsAsHost).Append("\n");
        sb.Append("  AuthenticationMode: ").Append(AuthenticationMode).Append("\n");
        sb.Append("  Credentials: ").Append(Credentials).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}