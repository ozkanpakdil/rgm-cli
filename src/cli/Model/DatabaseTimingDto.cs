/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace cli.Model;

/// <summary>
///     DatabaseTimingDto
/// </summary>
[DataContract(Name = "DatabaseTimingDto")]
public class DatabaseTimingDto : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="DatabaseTimingDto" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected DatabaseTimingDto()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="DatabaseTimingDto" /> class.
    /// </summary>
    /// <param name="database">database (required).</param>
    /// <param name="channelName">channelName (required).</param>
    /// <param name="tableKind">tableKind (required).</param>
    /// <param name="operation">operation (required).</param>
    /// <param name="timeWindowMinimum">timeWindowMinimum (required).</param>
    /// <param name="totalDurationMilliseconds">totalDurationMilliseconds (required).</param>
    /// <param name="averageRowCount">averageRowCount (required).</param>
    /// <param name="count">count (required).</param>
    public DatabaseTimingDto(string database = default, string channelName = default, string tableKind = default,
        string operation = default, string timeWindowMinimum = default, double totalDurationMilliseconds = default,
        double averageRowCount = default, int count = default)
    {
        // to ensure "database" is required (not null)
        if (database == null)
            throw new ArgumentNullException("database is a required property for DatabaseTimingDto and cannot be null");
        Database = database;
        // to ensure "channelName" is required (not null)
        if (channelName == null)
            throw new ArgumentNullException(
                "channelName is a required property for DatabaseTimingDto and cannot be null");
        ChannelName = channelName;
        // to ensure "tableKind" is required (not null)
        if (tableKind == null)
            throw new ArgumentNullException(
                "tableKind is a required property for DatabaseTimingDto and cannot be null");
        TableKind = tableKind;
        // to ensure "operation" is required (not null)
        if (operation == null)
            throw new ArgumentNullException(
                "operation is a required property for DatabaseTimingDto and cannot be null");
        Operation = operation;
        // to ensure "timeWindowMinimum" is required (not null)
        if (timeWindowMinimum == null)
            throw new ArgumentNullException(
                "timeWindowMinimum is a required property for DatabaseTimingDto and cannot be null");
        TimeWindowMinimum = timeWindowMinimum;
        TotalDurationMilliseconds = totalDurationMilliseconds;
        AverageRowCount = averageRowCount;
        Count = count;
    }

    /// <summary>
    ///     Gets or Sets Database
    /// </summary>
    [DataMember(Name = "database", IsRequired = true, EmitDefaultValue = true)]
    public string Database { get; set; }

    /// <summary>
    ///     Gets or Sets ChannelName
    /// </summary>
    [DataMember(Name = "channelName", IsRequired = true, EmitDefaultValue = true)]
    public string ChannelName { get; set; }

    /// <summary>
    ///     Gets or Sets TableKind
    /// </summary>
    [DataMember(Name = "tableKind", IsRequired = true, EmitDefaultValue = true)]
    public string TableKind { get; set; }

    /// <summary>
    ///     Gets or Sets Operation
    /// </summary>
    [DataMember(Name = "operation", IsRequired = true, EmitDefaultValue = true)]
    public string Operation { get; set; }

    /// <summary>
    ///     Gets or Sets TimeWindowMinimum
    /// </summary>
    [DataMember(Name = "timeWindowMinimum", IsRequired = true, EmitDefaultValue = true)]
    public string TimeWindowMinimum { get; set; }

    /// <summary>
    ///     Gets or Sets TotalDurationMilliseconds
    /// </summary>
    [DataMember(Name = "totalDurationMilliseconds", IsRequired = true, EmitDefaultValue = true)]
    public double TotalDurationMilliseconds { get; set; }

    /// <summary>
    ///     Gets or Sets AverageRowCount
    /// </summary>
    [DataMember(Name = "averageRowCount", IsRequired = true, EmitDefaultValue = true)]
    public double AverageRowCount { get; set; }

    /// <summary>
    ///     Gets or Sets Count
    /// </summary>
    [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
    public int Count { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class DatabaseTimingDto {\n");
        sb.Append("  Database: ").Append(Database).Append("\n");
        sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
        sb.Append("  TableKind: ").Append(TableKind).Append("\n");
        sb.Append("  Operation: ").Append(Operation).Append("\n");
        sb.Append("  TimeWindowMinimum: ").Append(TimeWindowMinimum).Append("\n");
        sb.Append("  TotalDurationMilliseconds: ").Append(TotalDurationMilliseconds).Append("\n");
        sb.Append("  AverageRowCount: ").Append(AverageRowCount).Append("\n");
        sb.Append("  Count: ").Append(Count).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}