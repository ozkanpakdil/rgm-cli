/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// AuthPrincipalDto
    /// </summary>
    [DataContract(Name = "AuthPrincipalDto")]
    public partial class AuthPrincipalDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PrincipalRole
        /// </summary>
        [DataMember(Name = "principalRole", EmitDefaultValue = false)]
        public PrincipalRole? PrincipalRole { get; set; }

        /// <summary>
        /// Gets or Sets PrincipalType
        /// </summary>
        [DataMember(Name = "principalType", EmitDefaultValue = false)]
        public PrincipalType? PrincipalType { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationType
        /// </summary>
        [DataMember(Name = "authenticationType", EmitDefaultValue = false)]
        public AuthenticationType? AuthenticationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthPrincipalDto" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="baseMonitor">baseMonitor.</param>
        /// <param name="principalRole">principalRole.</param>
        /// <param name="principalType">principalType.</param>
        /// <param name="groups">groups.</param>
        /// <param name="monitoredObjects">monitoredObjects.</param>
        /// <param name="all">all.</param>
        /// <param name="authenticationType">authenticationType.</param>
        public AuthPrincipalDto(string name = default(string), BaseMonitorDto baseMonitor = default(BaseMonitorDto), PrincipalRole? principalRole = default(PrincipalRole?), PrincipalType? principalType = default(PrincipalType?), List<GroupDto> groups = default(List<GroupDto>), List<MonitoredObjectDto> monitoredObjects = default(List<MonitoredObjectDto>), bool all = default(bool), AuthenticationType? authenticationType = default(AuthenticationType?))
        {
            this.Name = name;
            this.BaseMonitor = baseMonitor;
            this.PrincipalRole = principalRole;
            this.PrincipalType = principalType;
            this.Groups = groups;
            this.MonitoredObjects = monitoredObjects;
            this.All = all;
            this.AuthenticationType = authenticationType;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets BaseMonitor
        /// </summary>
        [DataMember(Name = "baseMonitor", EmitDefaultValue = false)]
        public BaseMonitorDto BaseMonitor { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", EmitDefaultValue = true)]
        public List<GroupDto> Groups { get; set; }

        /// <summary>
        /// Gets or Sets MonitoredObjects
        /// </summary>
        [DataMember(Name = "monitoredObjects", EmitDefaultValue = true)]
        public List<MonitoredObjectDto> MonitoredObjects { get; set; }

        /// <summary>
        /// Gets or Sets All
        /// </summary>
        [DataMember(Name = "all", EmitDefaultValue = true)]
        public bool All { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthPrincipalDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BaseMonitor: ").Append(BaseMonitor).Append("\n");
            sb.Append("  PrincipalRole: ").Append(PrincipalRole).Append("\n");
            sb.Append("  PrincipalType: ").Append(PrincipalType).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  MonitoredObjects: ").Append(MonitoredObjects).Append("\n");
            sb.Append("  All: ").Append(All).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
