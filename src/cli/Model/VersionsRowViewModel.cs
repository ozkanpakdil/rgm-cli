/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// VersionsRowViewModel
    /// </summary>
    [DataContract(Name = "VersionsRowViewModel")]
    public partial class VersionsRowViewModel : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name = "entityType", EmitDefaultValue = false)]
        public EntityType? EntityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionsRowViewModel" /> class.
        /// </summary>
        /// <param name="entityName">entityName.</param>
        /// <param name="group">group.</param>
        /// <param name="clusterName">clusterName.</param>
        /// <param name="entityType">entityType.</param>
        /// <param name="edition">edition.</param>
        /// <param name="rawProductLevel">rawProductLevel.</param>
        /// <param name="versionNumber">versionNumber.</param>
        /// <param name="friendlyVersion">friendlyVersion.</param>
        /// <param name="isUpToDate">isUpToDate.</param>
        /// <param name="isOnLatestServicePack">isOnLatestServicePack.</param>
        /// <param name="hasAdditionalPatches">hasAdditionalPatches.</param>
        /// <param name="releaseDate">releaseDate.</param>
        /// <param name="endOfSupportDate">endOfSupportDate.</param>
        /// <param name="endOfExtendedSupportDate">endOfExtendedSupportDate.</param>
        /// <param name="latestUpdate">latestUpdate.</param>
        /// <param name="tags">tags.</param>
        public VersionsRowViewModel(string entityName = default(string), string group = default(string), string clusterName = default(string), EntityTypeEnum? entityType = default(EntityTypeEnum?), string edition = default(string), string rawProductLevel = default(string), string versionNumber = default(string), string friendlyVersion = default(string), bool isUpToDate = default(bool), bool isOnLatestServicePack = default(bool), bool hasAdditionalPatches = default(bool), DateTime? releaseDate = default(DateTime?), DateTime? endOfSupportDate = default(DateTime?), DateTime? endOfExtendedSupportDate = default(DateTime?), LatestUpdateViewModel latestUpdate = default(LatestUpdateViewModel), List<TagDto> tags = default(List<TagDto>))
        {
            this.EntityName = entityName;
            this.Group = group;
            this.ClusterName = clusterName;
            this.EntityType = entityType;
            this.Edition = edition;
            this.RawProductLevel = rawProductLevel;
            this.VersionNumber = versionNumber;
            this.FriendlyVersion = friendlyVersion;
            this.IsUpToDate = isUpToDate;
            this.IsOnLatestServicePack = isOnLatestServicePack;
            this.HasAdditionalPatches = hasAdditionalPatches;
            this.ReleaseDate = releaseDate;
            this.EndOfSupportDate = endOfSupportDate;
            this.EndOfExtendedSupportDate = endOfExtendedSupportDate;
            this.LatestUpdate = latestUpdate;
            this.Tags = tags;
        }

        /// <summary>
        /// Gets or Sets EntityName
        /// </summary>
        [DataMember(Name = "entityName", EmitDefaultValue = true)]
        public string EntityName { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = true)]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets ClusterName
        /// </summary>
        [DataMember(Name = "clusterName", EmitDefaultValue = true)]
        public string ClusterName { get; set; }

        /// <summary>
        /// Gets or Sets Edition
        /// </summary>
        [DataMember(Name = "edition", EmitDefaultValue = true)]
        public string Edition { get; set; }

        /// <summary>
        /// Gets or Sets RawProductLevel
        /// </summary>
        [DataMember(Name = "rawProductLevel", EmitDefaultValue = true)]
        public string RawProductLevel { get; set; }

        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name = "versionNumber", EmitDefaultValue = true)]
        public string VersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets FriendlyVersion
        /// </summary>
        [DataMember(Name = "friendlyVersion", EmitDefaultValue = true)]
        public string FriendlyVersion { get; set; }

        /// <summary>
        /// Gets or Sets IsUpToDate
        /// </summary>
        [DataMember(Name = "isUpToDate", EmitDefaultValue = true)]
        public bool IsUpToDate { get; set; }

        /// <summary>
        /// Gets or Sets IsOnLatestServicePack
        /// </summary>
        [DataMember(Name = "isOnLatestServicePack", EmitDefaultValue = true)]
        public bool IsOnLatestServicePack { get; set; }

        /// <summary>
        /// Gets or Sets HasAdditionalPatches
        /// </summary>
        [DataMember(Name = "hasAdditionalPatches", EmitDefaultValue = true)]
        public bool HasAdditionalPatches { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseDate
        /// </summary>
        [DataMember(Name = "releaseDate", EmitDefaultValue = true)]
        public DateTime? ReleaseDate { get; set; }

        /// <summary>
        /// Gets or Sets EndOfSupportDate
        /// </summary>
        [DataMember(Name = "endOfSupportDate", EmitDefaultValue = true)]
        public DateTime? EndOfSupportDate { get; set; }

        /// <summary>
        /// Gets or Sets EndOfExtendedSupportDate
        /// </summary>
        [DataMember(Name = "endOfExtendedSupportDate", EmitDefaultValue = true)]
        public DateTime? EndOfExtendedSupportDate { get; set; }

        /// <summary>
        /// Gets or Sets LatestUpdate
        /// </summary>
        [DataMember(Name = "latestUpdate", EmitDefaultValue = false)]
        public LatestUpdateViewModel LatestUpdate { get; set; }

        /// <summary>
        /// Gets or Sets ProductLevel
        /// </summary>
        [DataMember(Name = "productLevel", EmitDefaultValue = true)]
        public string ProductLevel { get; private set; }

        /// <summary>
        /// Returns false as ProductLevel should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProductLevel()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<TagDto> Tags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VersionsRowViewModel {\n");
            sb.Append("  EntityName: ").Append(EntityName).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  ClusterName: ").Append(ClusterName).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  Edition: ").Append(Edition).Append("\n");
            sb.Append("  RawProductLevel: ").Append(RawProductLevel).Append("\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  FriendlyVersion: ").Append(FriendlyVersion).Append("\n");
            sb.Append("  IsUpToDate: ").Append(IsUpToDate).Append("\n");
            sb.Append("  IsOnLatestServicePack: ").Append(IsOnLatestServicePack).Append("\n");
            sb.Append("  HasAdditionalPatches: ").Append(HasAdditionalPatches).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  EndOfSupportDate: ").Append(EndOfSupportDate).Append("\n");
            sb.Append("  EndOfExtendedSupportDate: ").Append(EndOfExtendedSupportDate).Append("\n");
            sb.Append("  LatestUpdate: ").Append(LatestUpdate).Append("\n");
            sb.Append("  ProductLevel: ").Append(ProductLevel).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
