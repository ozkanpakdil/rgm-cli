/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace cli.Model;

/// <summary>
///     TcpEndpointDto
/// </summary>
[DataContract(Name = "TcpEndpointDto")]
public class TcpEndpointDto : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="TcpEndpointDto" /> class.
    /// </summary>
    /// <param name="endpointId">endpointId.</param>
    /// <param name="enabled">enabled.</param>
    /// <param name="port">port.</param>
    /// <param name="dynamicPorts">dynamicPorts.</param>
    /// <param name="ipAddress">ipAddress.</param>
    /// <param name="active">active.</param>
    public TcpEndpointDto(string endpointId = default, bool? enabled = default, long? port = default,
        long? dynamicPorts = default, string ipAddress = default, bool? active = default)
    {
        EndpointId = endpointId;
        Enabled = enabled;
        Port = port;
        DynamicPorts = dynamicPorts;
        IpAddress = ipAddress;
        Active = active;
    }

    /// <summary>
    ///     Gets or Sets EndpointId
    /// </summary>
    [DataMember(Name = "endpointId", EmitDefaultValue = true)]
    public string EndpointId { get; set; }

    /// <summary>
    ///     Gets or Sets Enabled
    /// </summary>
    [DataMember(Name = "enabled", EmitDefaultValue = true)]
    public bool? Enabled { get; set; }

    /// <summary>
    ///     Gets or Sets Port
    /// </summary>
    [DataMember(Name = "port", EmitDefaultValue = true)]
    public long? Port { get; set; }

    /// <summary>
    ///     Gets or Sets DynamicPorts
    /// </summary>
    [DataMember(Name = "dynamicPorts", EmitDefaultValue = true)]
    public long? DynamicPorts { get; set; }

    /// <summary>
    ///     Gets or Sets IpAddress
    /// </summary>
    [DataMember(Name = "ipAddress", EmitDefaultValue = true)]
    public string IpAddress { get; set; }

    /// <summary>
    ///     Gets or Sets Active
    /// </summary>
    [DataMember(Name = "active", EmitDefaultValue = true)]
    public bool? Active { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class TcpEndpointDto {\n");
        sb.Append("  EndpointId: ").Append(EndpointId).Append("\n");
        sb.Append("  Enabled: ").Append(Enabled).Append("\n");
        sb.Append("  Port: ").Append(Port).Append("\n");
        sb.Append("  DynamicPorts: ").Append(DynamicPorts).Append("\n");
        sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
        sb.Append("  Active: ").Append(Active).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}