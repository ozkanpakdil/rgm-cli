/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// TcpEndpointDto
    /// </summary>
    [DataContract(Name = "TcpEndpointDto")]
    public partial class TcpEndpointDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TcpEndpointDto" /> class.
        /// </summary>
        /// <param name="endpointId">endpointId.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="port">port.</param>
        /// <param name="dynamicPorts">dynamicPorts.</param>
        /// <param name="ipAddress">ipAddress.</param>
        /// <param name="active">active.</param>
        public TcpEndpointDto(string endpointId = default(string), bool? enabled = default(bool?), long? port = default(long?), long? dynamicPorts = default(long?), string ipAddress = default(string), bool? active = default(bool?))
        {
            this.EndpointId = endpointId;
            this.Enabled = enabled;
            this.Port = port;
            this.DynamicPorts = dynamicPorts;
            this.IpAddress = ipAddress;
            this.Active = active;
        }

        /// <summary>
        /// Gets or Sets EndpointId
        /// </summary>
        [DataMember(Name = "endpointId", EmitDefaultValue = true)]
        public string EndpointId { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", EmitDefaultValue = true)]
        public long? Port { get; set; }

        /// <summary>
        /// Gets or Sets DynamicPorts
        /// </summary>
        [DataMember(Name = "dynamicPorts", EmitDefaultValue = true)]
        public long? DynamicPorts { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name = "ipAddress", EmitDefaultValue = true)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool? Active { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TcpEndpointDto {\n");
            sb.Append("  EndpointId: ").Append(EndpointId).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  DynamicPorts: ").Append(DynamicPorts).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
