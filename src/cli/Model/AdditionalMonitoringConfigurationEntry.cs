/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using RedGate.SqlMonitor.Channels.Data;

namespace cli.Model;

/// <summary>
///     AdditionalMonitoringConfigurationEntry
/// </summary>
[DataContract(Name = "AdditionalMonitoringConfigurationEntry")]
public class AdditionalMonitoringConfigurationEntry : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="AdditionalMonitoringConfigurationEntry" /> class.
    /// </summary>
    /// <param name="channelInstanceRef">channelInstanceRef.</param>
    /// <param name="indexUsageSamplingEnabled">indexUsageSamplingEnabled.</param>
    /// <param name="queryInstanceSamplingEnabled">queryInstanceSamplingEnabled.</param>
    public AdditionalMonitoringConfigurationEntry(ChannelInstanceRef channelInstanceRef = default,
        bool? indexUsageSamplingEnabled = default, bool? queryInstanceSamplingEnabled = default)
    {
        ChannelInstanceRef = channelInstanceRef;
        IndexUsageSamplingEnabled = indexUsageSamplingEnabled;
        QueryInstanceSamplingEnabled = queryInstanceSamplingEnabled;
    }

    /// <summary>
    ///     Gets or Sets ChannelInstanceRef
    /// </summary>
    [DataMember(Name = "channelInstanceRef", EmitDefaultValue = true)]
    public ChannelInstanceRef ChannelInstanceRef { get; set; }

    /// <summary>
    ///     Gets or Sets IndexUsageSamplingEnabled
    /// </summary>
    [DataMember(Name = "indexUsageSamplingEnabled", EmitDefaultValue = true)]
    public bool? IndexUsageSamplingEnabled { get; set; }

    /// <summary>
    ///     Gets or Sets QueryInstanceSamplingEnabled
    /// </summary>
    [DataMember(Name = "queryInstanceSamplingEnabled", EmitDefaultValue = true)]
    public bool? QueryInstanceSamplingEnabled { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class AdditionalMonitoringConfigurationEntry {\n");
        sb.Append("  ChannelInstanceRef: ").Append(ChannelInstanceRef).Append("\n");
        sb.Append("  IndexUsageSamplingEnabled: ").Append(IndexUsageSamplingEnabled).Append("\n");
        sb.Append("  QueryInstanceSamplingEnabled: ").Append(QueryInstanceSamplingEnabled).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}