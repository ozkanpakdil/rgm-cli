/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using RedGate.SqlMonitor.Channels.Data;

namespace cli.Model;

/// <summary>
///     ActualPlanRuntimeMetricsPostDto
/// </summary>
[DataContract(Name = "ActualPlanRuntimeMetricsPostDto")]
public class ActualPlanRuntimeMetricsPostDto : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="ActualPlanRuntimeMetricsPostDto" /> class.
    /// </summary>
    /// <param name="channelInstanceRef">channelInstanceRef.</param>
    /// <param name="startTime">startTime.</param>
    /// <param name="endTime">endTime.</param>
    /// <param name="snippet">snippet.</param>
    /// <param name="queryHash">queryHash.</param>
    /// <param name="databaseName">databaseName.</param>
    public ActualPlanRuntimeMetricsPostDto(ChannelInstanceRef channelInstanceRef = default,
        DateTime? startTime = default, DateTime? endTime = default, string snippet = default,
        string queryHash = default, string databaseName = default)
    {
        ChannelInstanceRef = channelInstanceRef;
        StartTime = startTime;
        EndTime = endTime;
        Snippet = snippet;
        QueryHash = queryHash;
        DatabaseName = databaseName;
    }

    /// <summary>
    ///     Gets or Sets ChannelInstanceRef
    /// </summary>
    [DataMember(Name = "channelInstanceRef", EmitDefaultValue = true)]
    public ChannelInstanceRef ChannelInstanceRef { get; set; }

    /// <summary>
    ///     Gets or Sets StartTime
    /// </summary>
    [DataMember(Name = "startTime", EmitDefaultValue = true)]
    public DateTime? StartTime { get; set; }

    /// <summary>
    ///     Gets or Sets EndTime
    /// </summary>
    [DataMember(Name = "endTime", EmitDefaultValue = true)]
    public DateTime? EndTime { get; set; }

    /// <summary>
    ///     Gets or Sets Snippet
    /// </summary>
    [DataMember(Name = "snippet", EmitDefaultValue = true)]
    public string Snippet { get; set; }

    /// <summary>
    ///     Gets or Sets QueryHash
    /// </summary>
    [DataMember(Name = "queryHash", EmitDefaultValue = true)]
    public string QueryHash { get; set; }

    /// <summary>
    ///     Gets or Sets DatabaseName
    /// </summary>
    [DataMember(Name = "databaseName", EmitDefaultValue = true)]
    public string DatabaseName { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ActualPlanRuntimeMetricsPostDto {\n");
        sb.Append("  ChannelInstanceRef: ").Append(ChannelInstanceRef).Append("\n");
        sb.Append("  StartTime: ").Append(StartTime).Append("\n");
        sb.Append("  EndTime: ").Append(EndTime).Append("\n");
        sb.Append("  Snippet: ").Append(Snippet).Append("\n");
        sb.Append("  QueryHash: ").Append(QueryHash).Append("\n");
        sb.Append("  DatabaseName: ").Append(DatabaseName).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}