/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// AddMySqlInstanceRequest
    /// </summary>
    [DataContract(Name = "AddMySqlInstanceRequest")]
    public partial class AddMySqlInstanceRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddMySqlInstanceRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddMySqlInstanceRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddMySqlInstanceRequest" /> class.
        /// </summary>
        /// <param name="address">address (required).</param>
        /// <param name="alias">alias.</param>
        /// <param name="port">port (required).</param>
        /// <param name="groupId">groupId.</param>
        /// <param name="agentName">agentName.</param>
        /// <param name="machineConfiguration">machineConfiguration.</param>
        /// <param name="instanceCredentials">instanceCredentials (required).</param>
        /// <param name="failIfExists">failIfExists.</param>
        /// <param name="addToExistingLinuxMachine">addToExistingLinuxMachine.</param>
        public AddMySqlInstanceRequest(string address = default(string), string alias = default(string), int port = default(int), Guid? groupId = default(Guid?), string agentName = default(string), LinuxMachineConfiguration machineConfiguration = default(LinuxMachineConfiguration), MySqlInstanceCredentialsDto instanceCredentials = default(MySqlInstanceCredentialsDto), bool failIfExists = default(bool), bool addToExistingLinuxMachine = default(bool))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for AddMySqlInstanceRequest and cannot be null");
            }
            this.Address = address;
            this.Port = port;
            // to ensure "instanceCredentials" is required (not null)
            if (instanceCredentials == null)
            {
                throw new ArgumentNullException("instanceCredentials is a required property for AddMySqlInstanceRequest and cannot be null");
            }
            this.InstanceCredentials = instanceCredentials;
            this.Alias = alias;
            this.GroupId = groupId;
            this.AgentName = agentName;
            this.MachineConfiguration = machineConfiguration;
            this.FailIfExists = failIfExists;
            this.AddToExistingLinuxMachine = addToExistingLinuxMachine;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        [DataMember(Name = "alias", EmitDefaultValue = true)]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", IsRequired = true, EmitDefaultValue = true)]
        public int Port { get; set; }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name = "groupId", EmitDefaultValue = true)]
        public Guid? GroupId { get; set; }

        /// <summary>
        /// Gets or Sets AgentName
        /// </summary>
        [DataMember(Name = "agentName", EmitDefaultValue = true)]
        public string AgentName { get; set; }

        /// <summary>
        /// Gets or Sets MachineConfiguration
        /// </summary>
        [DataMember(Name = "machineConfiguration", EmitDefaultValue = false)]
        public LinuxMachineConfiguration MachineConfiguration { get; set; }

        /// <summary>
        /// Gets or Sets InstanceCredentials
        /// </summary>
        [DataMember(Name = "instanceCredentials", IsRequired = true, EmitDefaultValue = true)]
        public MySqlInstanceCredentialsDto InstanceCredentials { get; set; }

        /// <summary>
        /// Gets or Sets FailIfExists
        /// </summary>
        [DataMember(Name = "failIfExists", EmitDefaultValue = true)]
        public bool FailIfExists { get; set; }

        /// <summary>
        /// Gets or Sets AddToExistingLinuxMachine
        /// </summary>
        [DataMember(Name = "addToExistingLinuxMachine", EmitDefaultValue = true)]
        public bool AddToExistingLinuxMachine { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddMySqlInstanceRequest {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  AgentName: ").Append(AgentName).Append("\n");
            sb.Append("  MachineConfiguration: ").Append(MachineConfiguration).Append("\n");
            sb.Append("  InstanceCredentials: ").Append(InstanceCredentials).Append("\n");
            sb.Append("  FailIfExists: ").Append(FailIfExists).Append("\n");
            sb.Append("  AddToExistingLinuxMachine: ").Append(AddToExistingLinuxMachine).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Address (string) minLength
            if (this.Address != null && this.Address.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Address, length must be greater than 1.", new [] { "Address" });
            }

            // Port (int) maximum
            if (this.Port > (int)65535)
            {
                yield return new ValidationResult("Invalid value for Port, must be a value less than or equal to 65535.", new [] { "Port" });
            }

            // Port (int) minimum
            if (this.Port < (int)1)
            {
                yield return new ValidationResult("Invalid value for Port, must be a value greater than or equal to 1.", new [] { "Port" });
            }

            yield break;
        }
    }

}
