/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// DatabaseBackupDto
    /// </summary>
    [DataContract(Name = "DatabaseBackupDto")]
    public partial class DatabaseBackupDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseBackupDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DatabaseBackupDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DatabaseBackupDto" /> class.
        /// </summary>
        /// <param name="monitoredEntity">monitoredEntity (required).</param>
        /// <param name="groupName">groupName (required).</param>
        /// <param name="clusterName">clusterName (required).</param>
        /// <param name="databaseName">databaseName (required).</param>
        /// <param name="recoveryModel">recoveryModel (required).</param>
        /// <param name="latestFullBackup">latestFullBackup (required).</param>
        /// <param name="latestLogBackup">latestLogBackup (required).</param>
        /// <param name="latestDifferentialBackup">latestDifferentialBackup (required).</param>
        /// <param name="maxRpoMinutes">maxRpoMinutes (required).</param>
        public DatabaseBackupDto(EntityDto monitoredEntity = default(EntityDto), string groupName = default(string), string clusterName = default(string), string databaseName = default(string), string recoveryModel = default(string), LatestBackupDto latestFullBackup = default(LatestBackupDto), LatestBackupDto latestLogBackup = default(LatestBackupDto), LatestBackupDto latestDifferentialBackup = default(LatestBackupDto), double maxRpoMinutes = default(double))
        {
            // to ensure "monitoredEntity" is required (not null)
            if (monitoredEntity == null)
            {
                throw new ArgumentNullException("monitoredEntity is a required property for DatabaseBackupDto and cannot be null");
            }
            this.MonitoredEntity = monitoredEntity;
            // to ensure "groupName" is required (not null)
            if (groupName == null)
            {
                throw new ArgumentNullException("groupName is a required property for DatabaseBackupDto and cannot be null");
            }
            this.GroupName = groupName;
            // to ensure "clusterName" is required (not null)
            if (clusterName == null)
            {
                throw new ArgumentNullException("clusterName is a required property for DatabaseBackupDto and cannot be null");
            }
            this.ClusterName = clusterName;
            // to ensure "databaseName" is required (not null)
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName is a required property for DatabaseBackupDto and cannot be null");
            }
            this.DatabaseName = databaseName;
            // to ensure "recoveryModel" is required (not null)
            if (recoveryModel == null)
            {
                throw new ArgumentNullException("recoveryModel is a required property for DatabaseBackupDto and cannot be null");
            }
            this.RecoveryModel = recoveryModel;
            // to ensure "latestFullBackup" is required (not null)
            if (latestFullBackup == null)
            {
                throw new ArgumentNullException("latestFullBackup is a required property for DatabaseBackupDto and cannot be null");
            }
            this.LatestFullBackup = latestFullBackup;
            // to ensure "latestLogBackup" is required (not null)
            if (latestLogBackup == null)
            {
                throw new ArgumentNullException("latestLogBackup is a required property for DatabaseBackupDto and cannot be null");
            }
            this.LatestLogBackup = latestLogBackup;
            // to ensure "latestDifferentialBackup" is required (not null)
            if (latestDifferentialBackup == null)
            {
                throw new ArgumentNullException("latestDifferentialBackup is a required property for DatabaseBackupDto and cannot be null");
            }
            this.LatestDifferentialBackup = latestDifferentialBackup;
            this.MaxRpoMinutes = maxRpoMinutes;
        }

        /// <summary>
        /// Gets or Sets MonitoredEntity
        /// </summary>
        [DataMember(Name = "monitoredEntity", IsRequired = true, EmitDefaultValue = true)]
        public EntityDto MonitoredEntity { get; set; }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name = "groupName", IsRequired = true, EmitDefaultValue = true)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets ClusterName
        /// </summary>
        [DataMember(Name = "clusterName", IsRequired = true, EmitDefaultValue = true)]
        public string ClusterName { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseName
        /// </summary>
        [DataMember(Name = "databaseName", IsRequired = true, EmitDefaultValue = true)]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or Sets RecoveryModel
        /// </summary>
        [DataMember(Name = "recoveryModel", IsRequired = true, EmitDefaultValue = true)]
        public string RecoveryModel { get; set; }

        /// <summary>
        /// Gets or Sets LatestFullBackup
        /// </summary>
        [DataMember(Name = "latestFullBackup", IsRequired = true, EmitDefaultValue = true)]
        public LatestBackupDto LatestFullBackup { get; set; }

        /// <summary>
        /// Gets or Sets LatestLogBackup
        /// </summary>
        [DataMember(Name = "latestLogBackup", IsRequired = true, EmitDefaultValue = true)]
        public LatestBackupDto LatestLogBackup { get; set; }

        /// <summary>
        /// Gets or Sets LatestDifferentialBackup
        /// </summary>
        [DataMember(Name = "latestDifferentialBackup", IsRequired = true, EmitDefaultValue = true)]
        public LatestBackupDto LatestDifferentialBackup { get; set; }

        /// <summary>
        /// Gets or Sets MaxRpoMinutes
        /// </summary>
        [DataMember(Name = "maxRpoMinutes", IsRequired = true, EmitDefaultValue = true)]
        public double MaxRpoMinutes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DatabaseBackupDto {\n");
            sb.Append("  MonitoredEntity: ").Append(MonitoredEntity).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  ClusterName: ").Append(ClusterName).Append("\n");
            sb.Append("  DatabaseName: ").Append(DatabaseName).Append("\n");
            sb.Append("  RecoveryModel: ").Append(RecoveryModel).Append("\n");
            sb.Append("  LatestFullBackup: ").Append(LatestFullBackup).Append("\n");
            sb.Append("  LatestLogBackup: ").Append(LatestLogBackup).Append("\n");
            sb.Append("  LatestDifferentialBackup: ").Append(LatestDifferentialBackup).Append("\n");
            sb.Append("  MaxRpoMinutes: ").Append(MaxRpoMinutes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
