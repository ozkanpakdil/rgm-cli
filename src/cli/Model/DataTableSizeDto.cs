/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// DataTableSizeDto
    /// </summary>
    [DataContract(Name = "DataTableSizeDto")]
    public partial class DataTableSizeDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataTableSizeDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DataTableSizeDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataTableSizeDto" /> class.
        /// </summary>
        /// <param name="channelName">channelName (required).</param>
        /// <param name="sizeBytes">sizeBytes (required).</param>
        /// <param name="rowCount">rowCount (required).</param>
        /// <param name="uncompressedSizeBytes">uncompressedSizeBytes (required).</param>
        /// <param name="compressedSizeBytes">compressedSizeBytes (required).</param>
        /// <param name="sizeBeforeCompressionBytes">sizeBeforeCompressionBytes (required).</param>
        public DataTableSizeDto(string channelName = default(string), long sizeBytes = default(long), long rowCount = default(long), long uncompressedSizeBytes = default(long), long compressedSizeBytes = default(long), long sizeBeforeCompressionBytes = default(long))
        {
            // to ensure "channelName" is required (not null)
            if (channelName == null)
            {
                throw new ArgumentNullException("channelName is a required property for DataTableSizeDto and cannot be null");
            }
            this.ChannelName = channelName;
            this.SizeBytes = sizeBytes;
            this.RowCount = rowCount;
            this.UncompressedSizeBytes = uncompressedSizeBytes;
            this.CompressedSizeBytes = compressedSizeBytes;
            this.SizeBeforeCompressionBytes = sizeBeforeCompressionBytes;
        }

        /// <summary>
        /// Gets or Sets ChannelName
        /// </summary>
        [DataMember(Name = "channelName", IsRequired = true, EmitDefaultValue = true)]
        public string ChannelName { get; set; }

        /// <summary>
        /// Gets or Sets SizeBytes
        /// </summary>
        [DataMember(Name = "sizeBytes", IsRequired = true, EmitDefaultValue = true)]
        public long SizeBytes { get; set; }

        /// <summary>
        /// Gets or Sets RowCount
        /// </summary>
        [DataMember(Name = "rowCount", IsRequired = true, EmitDefaultValue = true)]
        public long RowCount { get; set; }

        /// <summary>
        /// Gets or Sets UncompressedSizeBytes
        /// </summary>
        [DataMember(Name = "uncompressedSizeBytes", IsRequired = true, EmitDefaultValue = true)]
        public long UncompressedSizeBytes { get; set; }

        /// <summary>
        /// Gets or Sets CompressedSizeBytes
        /// </summary>
        [DataMember(Name = "compressedSizeBytes", IsRequired = true, EmitDefaultValue = true)]
        public long CompressedSizeBytes { get; set; }

        /// <summary>
        /// Gets or Sets SizeBeforeCompressionBytes
        /// </summary>
        [DataMember(Name = "sizeBeforeCompressionBytes", IsRequired = true, EmitDefaultValue = true)]
        public long SizeBeforeCompressionBytes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataTableSizeDto {\n");
            sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
            sb.Append("  SizeBytes: ").Append(SizeBytes).Append("\n");
            sb.Append("  RowCount: ").Append(RowCount).Append("\n");
            sb.Append("  UncompressedSizeBytes: ").Append(UncompressedSizeBytes).Append("\n");
            sb.Append("  CompressedSizeBytes: ").Append(CompressedSizeBytes).Append("\n");
            sb.Append("  SizeBeforeCompressionBytes: ").Append(SizeBeforeCompressionBytes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
