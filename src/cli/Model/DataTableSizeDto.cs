/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace cli.Model;

/// <summary>
///     DataTableSizeDto
/// </summary>
[DataContract(Name = "DataTableSizeDto")]
public class DataTableSizeDto : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="DataTableSizeDto" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected DataTableSizeDto()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="DataTableSizeDto" /> class.
    /// </summary>
    /// <param name="channelName">channelName (required).</param>
    /// <param name="sizeBytes">sizeBytes (required).</param>
    /// <param name="rowCount">rowCount (required).</param>
    /// <param name="uncompressedSizeBytes">uncompressedSizeBytes (required).</param>
    /// <param name="compressedSizeBytes">compressedSizeBytes (required).</param>
    /// <param name="sizeBeforeCompressionBytes">sizeBeforeCompressionBytes (required).</param>
    public DataTableSizeDto(string channelName = default, long sizeBytes = default, long rowCount = default,
        long uncompressedSizeBytes = default, long compressedSizeBytes = default,
        long sizeBeforeCompressionBytes = default)
    {
        // to ensure "channelName" is required (not null)
        if (channelName == null)
            throw new ArgumentNullException(
                "channelName is a required property for DataTableSizeDto and cannot be null");
        ChannelName = channelName;
        SizeBytes = sizeBytes;
        RowCount = rowCount;
        UncompressedSizeBytes = uncompressedSizeBytes;
        CompressedSizeBytes = compressedSizeBytes;
        SizeBeforeCompressionBytes = sizeBeforeCompressionBytes;
    }

    /// <summary>
    ///     Gets or Sets ChannelName
    /// </summary>
    [DataMember(Name = "channelName", IsRequired = true, EmitDefaultValue = true)]
    public string ChannelName { get; set; }

    /// <summary>
    ///     Gets or Sets SizeBytes
    /// </summary>
    [DataMember(Name = "sizeBytes", IsRequired = true, EmitDefaultValue = true)]
    public long SizeBytes { get; set; }

    /// <summary>
    ///     Gets or Sets RowCount
    /// </summary>
    [DataMember(Name = "rowCount", IsRequired = true, EmitDefaultValue = true)]
    public long RowCount { get; set; }

    /// <summary>
    ///     Gets or Sets UncompressedSizeBytes
    /// </summary>
    [DataMember(Name = "uncompressedSizeBytes", IsRequired = true, EmitDefaultValue = true)]
    public long UncompressedSizeBytes { get; set; }

    /// <summary>
    ///     Gets or Sets CompressedSizeBytes
    /// </summary>
    [DataMember(Name = "compressedSizeBytes", IsRequired = true, EmitDefaultValue = true)]
    public long CompressedSizeBytes { get; set; }

    /// <summary>
    ///     Gets or Sets SizeBeforeCompressionBytes
    /// </summary>
    [DataMember(Name = "sizeBeforeCompressionBytes", IsRequired = true, EmitDefaultValue = true)]
    public long SizeBeforeCompressionBytes { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class DataTableSizeDto {\n");
        sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
        sb.Append("  SizeBytes: ").Append(SizeBytes).Append("\n");
        sb.Append("  RowCount: ").Append(RowCount).Append("\n");
        sb.Append("  UncompressedSizeBytes: ").Append(UncompressedSizeBytes).Append("\n");
        sb.Append("  CompressedSizeBytes: ").Append(CompressedSizeBytes).Append("\n");
        sb.Append("  SizeBeforeCompressionBytes: ").Append(SizeBeforeCompressionBytes).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}