/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// MachineConfigurationDto
    /// </summary>
    [DataContract(Name = "MachineConfigurationDto")]
    public partial class MachineConfigurationDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MachineConfigurationDto" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="baseMonitor">baseMonitor.</param>
        /// <param name="clusterName">clusterName.</param>
        /// <param name="fipsEnabled">fipsEnabled.</param>
        /// <param name="totalMemoryInBytes">totalMemoryInBytes.</param>
        /// <param name="communicationProtocols">communicationProtocols.</param>
        /// <param name="services">services.</param>
        public MachineConfigurationDto(string name = default(string), string baseMonitor = default(string), string clusterName = default(string), bool? fipsEnabled = default(bool?), long? totalMemoryInBytes = default(long?), List<CommunicationProtocolDto> communicationProtocols = default(List<CommunicationProtocolDto>), List<ServiceDto> services = default(List<ServiceDto>))
        {
            this.Name = name;
            this.BaseMonitor = baseMonitor;
            this.ClusterName = clusterName;
            this.FipsEnabled = fipsEnabled;
            this.TotalMemoryInBytes = totalMemoryInBytes;
            this.CommunicationProtocols = communicationProtocols;
            this.Services = services;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets BaseMonitor
        /// </summary>
        [DataMember(Name = "baseMonitor", EmitDefaultValue = false)]
        public string BaseMonitor { get; set; }

        /// <summary>
        /// Gets or Sets ClusterName
        /// </summary>
        [DataMember(Name = "clusterName", EmitDefaultValue = false)]
        public string ClusterName { get; set; }

        /// <summary>
        /// Gets or Sets FipsEnabled
        /// </summary>
        [DataMember(Name = "fipsEnabled", EmitDefaultValue = true)]
        public bool? FipsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets TotalMemoryInBytes
        /// </summary>
        [DataMember(Name = "totalMemoryInBytes", EmitDefaultValue = true)]
        public long? TotalMemoryInBytes { get; set; }

        /// <summary>
        /// Gets or Sets CommunicationProtocols
        /// </summary>
        [DataMember(Name = "communicationProtocols", EmitDefaultValue = false)]
        public List<CommunicationProtocolDto> CommunicationProtocols { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name = "services", EmitDefaultValue = false)]
        public List<ServiceDto> Services { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MachineConfigurationDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BaseMonitor: ").Append(BaseMonitor).Append("\n");
            sb.Append("  ClusterName: ").Append(ClusterName).Append("\n");
            sb.Append("  FipsEnabled: ").Append(FipsEnabled).Append("\n");
            sb.Append("  TotalMemoryInBytes: ").Append(TotalMemoryInBytes).Append("\n");
            sb.Append("  CommunicationProtocols: ").Append(CommunicationProtocols).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
