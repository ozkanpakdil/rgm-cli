/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace cli.Model;

/// <summary>
///     ActiveDirectoryDomainViewModel
/// </summary>
[DataContract(Name = "ActiveDirectoryDomainViewModel")]
public class ActiveDirectoryDomainViewModel : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="ActiveDirectoryDomainViewModel" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected ActiveDirectoryDomainViewModel()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="ActiveDirectoryDomainViewModel" /> class.
    /// </summary>
    /// <param name="domainName">domainName (required).</param>
    /// <param name="baseDN">baseDN (required).</param>
    /// <param name="useBaseMonitorServiceAccount">useBaseMonitorServiceAccount.</param>
    /// <param name="username">username (required).</param>
    /// <param name="password">password (required).</param>
    public ActiveDirectoryDomainViewModel(string domainName = default, string baseDN = default,
        bool useBaseMonitorServiceAccount = default, string username = default, string password = default)
    {
        // to ensure "domainName" is required (not null)
        if (domainName == null)
            throw new ArgumentNullException(
                "domainName is a required property for ActiveDirectoryDomainViewModel and cannot be null");
        DomainName = domainName;
        // to ensure "baseDN" is required (not null)
        if (baseDN == null)
            throw new ArgumentNullException(
                "baseDN is a required property for ActiveDirectoryDomainViewModel and cannot be null");
        BaseDN = baseDN;
        // to ensure "username" is required (not null)
        if (username == null)
            throw new ArgumentNullException(
                "username is a required property for ActiveDirectoryDomainViewModel and cannot be null");
        Username = username;
        // to ensure "password" is required (not null)
        if (password == null)
            throw new ArgumentNullException(
                "password is a required property for ActiveDirectoryDomainViewModel and cannot be null");
        Password = password;
        UseBaseMonitorServiceAccount = useBaseMonitorServiceAccount;
    }

    /// <summary>
    ///     Gets or Sets DomainName
    /// </summary>
    [DataMember(Name = "domainName", IsRequired = true, EmitDefaultValue = true)]
    public string DomainName { get; set; }

    /// <summary>
    ///     Gets or Sets BaseDN
    /// </summary>
    [DataMember(Name = "baseDN", IsRequired = true, EmitDefaultValue = true)]
    public string BaseDN { get; set; }

    /// <summary>
    ///     Gets or Sets UseBaseMonitorServiceAccount
    /// </summary>
    [DataMember(Name = "useBaseMonitorServiceAccount", EmitDefaultValue = true)]
    public bool UseBaseMonitorServiceAccount { get; set; }

    /// <summary>
    ///     Gets or Sets Username
    /// </summary>
    [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
    public string Username { get; set; }

    /// <summary>
    ///     Gets or Sets Password
    /// </summary>
    [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
    public string Password { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class ActiveDirectoryDomainViewModel {\n");
        sb.Append("  DomainName: ").Append(DomainName).Append("\n");
        sb.Append("  BaseDN: ").Append(BaseDN).Append("\n");
        sb.Append("  UseBaseMonitorServiceAccount: ").Append(UseBaseMonitorServiceAccount).Append("\n");
        sb.Append("  Username: ").Append(Username).Append("\n");
        sb.Append("  Password: ").Append(Password).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}