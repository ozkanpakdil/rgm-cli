/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// ActiveDirectoryDomainViewModel
    /// </summary>
    [DataContract(Name = "ActiveDirectoryDomainViewModel")]
    public partial class ActiveDirectoryDomainViewModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveDirectoryDomainViewModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActiveDirectoryDomainViewModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveDirectoryDomainViewModel" /> class.
        /// </summary>
        /// <param name="domainName">domainName (required).</param>
        /// <param name="baseDN">baseDN (required).</param>
        /// <param name="useBaseMonitorServiceAccount">useBaseMonitorServiceAccount.</param>
        /// <param name="username">username (required).</param>
        /// <param name="password">password (required).</param>
        public ActiveDirectoryDomainViewModel(string domainName = default(string), string baseDN = default(string), bool useBaseMonitorServiceAccount = default(bool), string username = default(string), string password = default(string))
        {
            // to ensure "domainName" is required (not null)
            if (domainName == null)
            {
                throw new ArgumentNullException("domainName is a required property for ActiveDirectoryDomainViewModel and cannot be null");
            }
            this.DomainName = domainName;
            // to ensure "baseDN" is required (not null)
            if (baseDN == null)
            {
                throw new ArgumentNullException("baseDN is a required property for ActiveDirectoryDomainViewModel and cannot be null");
            }
            this.BaseDN = baseDN;
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new ArgumentNullException("username is a required property for ActiveDirectoryDomainViewModel and cannot be null");
            }
            this.Username = username;
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for ActiveDirectoryDomainViewModel and cannot be null");
            }
            this.Password = password;
            this.UseBaseMonitorServiceAccount = useBaseMonitorServiceAccount;
        }

        /// <summary>
        /// Gets or Sets DomainName
        /// </summary>
        [DataMember(Name = "domainName", IsRequired = true, EmitDefaultValue = true)]
        public string DomainName { get; set; }

        /// <summary>
        /// Gets or Sets BaseDN
        /// </summary>
        [DataMember(Name = "baseDN", IsRequired = true, EmitDefaultValue = true)]
        public string BaseDN { get; set; }

        /// <summary>
        /// Gets or Sets UseBaseMonitorServiceAccount
        /// </summary>
        [DataMember(Name = "useBaseMonitorServiceAccount", EmitDefaultValue = true)]
        public bool UseBaseMonitorServiceAccount { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", IsRequired = true, EmitDefaultValue = true)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActiveDirectoryDomainViewModel {\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  BaseDN: ").Append(BaseDN).Append("\n");
            sb.Append("  UseBaseMonitorServiceAccount: ").Append(UseBaseMonitorServiceAccount).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
