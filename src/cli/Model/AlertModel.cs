/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using RedGate.SqlMonitor.Common.Domain;

namespace cli.Model;

/// <summary>
///     AlertModel
/// </summary>
[DataContract(Name = "AlertModel")]
public class AlertModel : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="AlertModel" /> class.
    /// </summary>
    /// <param name="lastUpdated">lastUpdated.</param>
    /// <param name="status">status.</param>
    /// <param name="objectName">objectName.</param>
    /// <param name="alertId">alertId.</param>
    /// <param name="read">read.</param>
    /// <param name="lastComment">lastComment.</param>
    /// <param name="severity">severity.</param>
    /// <param name="entityType">entityType.</param>
    public AlertModel(DateTime lastUpdated = default, string status = default, string objectName = default,
        IntegerIdentifier alertId = default, bool read = default, string lastComment = default,
        Severity? severity = default, EntityType? entityType = default)
    {
        LastUpdated = lastUpdated;
        Status = status;
        ObjectName = objectName;
        AlertId = alertId;
        Read = read;
        LastComment = lastComment;
        Severity = severity;
        EntityType = entityType;
    }

    /// <summary>
    ///     Gets or Sets Severity
    /// </summary>
    [DataMember(Name = "severity", EmitDefaultValue = false)]
    public Severity? Severity { get; set; }

    /// <summary>
    ///     Gets or Sets EntityType
    /// </summary>
    [DataMember(Name = "entityType", EmitDefaultValue = false)]
    public EntityType? EntityType { get; set; }

    /// <summary>
    ///     Gets or Sets LastUpdated
    /// </summary>
    [DataMember(Name = "lastUpdated", EmitDefaultValue = false)]
    public DateTime LastUpdated { get; set; }

    /// <summary>
    ///     Gets or Sets Status
    /// </summary>
    [DataMember(Name = "status", EmitDefaultValue = true)]
    public string Status { get; set; }

    /// <summary>
    ///     Gets or Sets ObjectName
    /// </summary>
    [DataMember(Name = "objectName", EmitDefaultValue = true)]
    public string ObjectName { get; set; }

    /// <summary>
    ///     Gets or Sets AlertId
    /// </summary>
    [DataMember(Name = "alertId", EmitDefaultValue = false)]
    public IntegerIdentifier AlertId { get; set; }

    /// <summary>
    ///     Gets or Sets Read
    /// </summary>
    [DataMember(Name = "read", EmitDefaultValue = true)]
    public bool Read { get; set; }

    /// <summary>
    ///     Gets or Sets LastComment
    /// </summary>
    [DataMember(Name = "lastComment", EmitDefaultValue = true)]
    public string LastComment { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class AlertModel {\n");
        sb.Append("  LastUpdated: ").Append(LastUpdated).Append("\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("  ObjectName: ").Append(ObjectName).Append("\n");
        sb.Append("  AlertId: ").Append(AlertId).Append("\n");
        sb.Append("  Read: ").Append(Read).Append("\n");
        sb.Append("  LastComment: ").Append(LastComment).Append("\n");
        sb.Append("  Severity: ").Append(Severity).Append("\n");
        sb.Append("  EntityType: ").Append(EntityType).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}