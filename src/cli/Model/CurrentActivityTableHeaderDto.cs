/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace cli.Model;

/// <summary>
///     CurrentActivityTableHeaderDto
/// </summary>
[DataContract(Name = "CurrentActivityTableHeaderDto")]
public class CurrentActivityTableHeaderDto : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="CurrentActivityTableHeaderDto" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected CurrentActivityTableHeaderDto()
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="CurrentActivityTableHeaderDto" /> class.
    /// </summary>
    /// <param name="title">title (required).</param>
    /// <param name="identifier">identifier (required).</param>
    /// <param name="fallbackValue">fallbackValue.</param>
    /// <param name="helpUrl">helpUrl.</param>
    /// <param name="extraWide">extraWide.</param>
    public CurrentActivityTableHeaderDto(string title = default, string identifier = default,
        string fallbackValue = default, string helpUrl = default, bool? extraWide = default)
    {
        // to ensure "title" is required (not null)
        if (title == null)
            throw new ArgumentNullException(
                "title is a required property for CurrentActivityTableHeaderDto and cannot be null");
        Title = title;
        // to ensure "identifier" is required (not null)
        if (identifier == null)
            throw new ArgumentNullException(
                "identifier is a required property for CurrentActivityTableHeaderDto and cannot be null");
        Identifier = identifier;
        FallbackValue = fallbackValue;
        HelpUrl = helpUrl;
        ExtraWide = extraWide;
    }

    /// <summary>
    ///     Gets or Sets Title
    /// </summary>
    [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
    public string Title { get; set; }

    /// <summary>
    ///     Gets or Sets Identifier
    /// </summary>
    [DataMember(Name = "identifier", IsRequired = true, EmitDefaultValue = true)]
    public string Identifier { get; set; }

    /// <summary>
    ///     Gets or Sets FallbackValue
    /// </summary>
    [DataMember(Name = "fallbackValue", EmitDefaultValue = true)]
    public string FallbackValue { get; set; }

    /// <summary>
    ///     Gets or Sets HelpUrl
    /// </summary>
    [DataMember(Name = "helpUrl", EmitDefaultValue = true)]
    public string HelpUrl { get; set; }

    /// <summary>
    ///     Gets or Sets ExtraWide
    /// </summary>
    [DataMember(Name = "extraWide", EmitDefaultValue = true)]
    public bool? ExtraWide { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class CurrentActivityTableHeaderDto {\n");
        sb.Append("  Title: ").Append(Title).Append("\n");
        sb.Append("  Identifier: ").Append(Identifier).Append("\n");
        sb.Append("  FallbackValue: ").Append(FallbackValue).Append("\n");
        sb.Append("  HelpUrl: ").Append(HelpUrl).Append("\n");
        sb.Append("  ExtraWide: ").Append(ExtraWide).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}