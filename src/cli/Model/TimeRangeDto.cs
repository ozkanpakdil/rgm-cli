/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// TimeRangeDto
    /// </summary>
    [DataContract(Name = "TimeRangeDto")]
    public partial class TimeRangeDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public AlertsFilterTimeRangeTypeDto? Type { get; set; }

        /// <summary>
        /// Gets or Sets TimeWindowMode
        /// </summary>
        [DataMember(Name = "timeWindowMode", EmitDefaultValue = false)]
        public AlertsFilterTimeWindowModesDto? TimeWindowMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeRangeDto" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="relativeMinutes">relativeMinutes.</param>
        /// <param name="fromDateTime">fromDateTime.</param>
        /// <param name="toDateTime">toDateTime.</param>
        /// <param name="timeWindowMode">timeWindowMode.</param>
        public TimeRangeDto(AlertsFilterTimeRangeTypeDto? type = default(AlertsFilterTimeRangeTypeDto?), int relativeMinutes = default(int), long? fromDateTime = default(long?), long? toDateTime = default(long?), AlertsFilterTimeWindowModesDto? timeWindowMode = default(AlertsFilterTimeWindowModesDto?))
        {
            this.Type = type;
            this.RelativeMinutes = relativeMinutes;
            this.FromDateTime = fromDateTime;
            this.ToDateTime = toDateTime;
            this.TimeWindowMode = timeWindowMode;
        }

        /// <summary>
        /// Gets or Sets RelativeMinutes
        /// </summary>
        [DataMember(Name = "relativeMinutes", EmitDefaultValue = false)]
        public int RelativeMinutes { get; set; }

        /// <summary>
        /// Gets or Sets FromDateTime
        /// </summary>
        [DataMember(Name = "fromDateTime", EmitDefaultValue = true)]
        public long? FromDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ToDateTime
        /// </summary>
        [DataMember(Name = "toDateTime", EmitDefaultValue = true)]
        public long? ToDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TimeRangeDto {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RelativeMinutes: ").Append(RelativeMinutes).Append("\n");
            sb.Append("  FromDateTime: ").Append(FromDateTime).Append("\n");
            sb.Append("  ToDateTime: ").Append(ToDateTime).Append("\n");
            sb.Append("  TimeWindowMode: ").Append(TimeWindowMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
