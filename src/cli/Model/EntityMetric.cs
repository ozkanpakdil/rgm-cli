/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// EntityMetric
    /// </summary>
    [DataContract(Name = "EntityMetric")]
    public partial class EntityMetric : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityMetric" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="type">type.</param>
        /// <param name="percent1">percent1.</param>
        /// <param name="percent2">percent2.</param>
        /// <param name="percent1Title">percent1Title.</param>
        /// <param name="percent2Title">percent2Title.</param>
        /// <param name="percent1Value">percent1Value.</param>
        /// <param name="percent2Value">percent2Value.</param>
        /// <param name="stacked">stacked.</param>
        /// <param name="singleValue">singleValue.</param>
        /// <param name="collectionPaused">collectionPaused.</param>
        public EntityMetric(string value = default(string), string type = default(string), int percent1 = default(int), int percent2 = default(int), string percent1Title = default(string), string percent2Title = default(string), string percent1Value = default(string), string percent2Value = default(string), bool stacked = default(bool), bool singleValue = default(bool), bool collectionPaused = default(bool))
        {
            this.Value = value;
            this.Type = type;
            this.Percent1 = percent1;
            this.Percent2 = percent2;
            this.Percent1Title = percent1Title;
            this.Percent2Title = percent2Title;
            this.Percent1Value = percent1Value;
            this.Percent2Value = percent2Value;
            this.Stacked = stacked;
            this.SingleValue = singleValue;
            this.CollectionPaused = collectionPaused;
        }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Percent1
        /// </summary>
        [DataMember(Name = "percent1", EmitDefaultValue = false)]
        public int Percent1 { get; set; }

        /// <summary>
        /// Gets or Sets Percent2
        /// </summary>
        [DataMember(Name = "percent2", EmitDefaultValue = false)]
        public int Percent2 { get; set; }

        /// <summary>
        /// Gets or Sets PercentTotal
        /// </summary>
        [DataMember(Name = "percentTotal", EmitDefaultValue = false)]
        public int PercentTotal { get; private set; }

        /// <summary>
        /// Returns false as PercentTotal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePercentTotal()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Percent1Title
        /// </summary>
        [DataMember(Name = "percent1Title", EmitDefaultValue = true)]
        public string Percent1Title { get; set; }

        /// <summary>
        /// Gets or Sets Percent2Title
        /// </summary>
        [DataMember(Name = "percent2Title", EmitDefaultValue = true)]
        public string Percent2Title { get; set; }

        /// <summary>
        /// Gets or Sets Percent1Value
        /// </summary>
        [DataMember(Name = "percent1Value", EmitDefaultValue = true)]
        public string Percent1Value { get; set; }

        /// <summary>
        /// Gets or Sets Percent2Value
        /// </summary>
        [DataMember(Name = "percent2Value", EmitDefaultValue = true)]
        public string Percent2Value { get; set; }

        /// <summary>
        /// Gets or Sets Stacked
        /// </summary>
        [DataMember(Name = "stacked", EmitDefaultValue = true)]
        public bool Stacked { get; set; }

        /// <summary>
        /// Gets or Sets SingleValue
        /// </summary>
        [DataMember(Name = "singleValue", EmitDefaultValue = true)]
        public bool SingleValue { get; set; }

        /// <summary>
        /// Gets or Sets CollectionPaused
        /// </summary>
        [DataMember(Name = "collectionPaused", EmitDefaultValue = true)]
        public bool CollectionPaused { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EntityMetric {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Percent1: ").Append(Percent1).Append("\n");
            sb.Append("  Percent2: ").Append(Percent2).Append("\n");
            sb.Append("  PercentTotal: ").Append(PercentTotal).Append("\n");
            sb.Append("  Percent1Title: ").Append(Percent1Title).Append("\n");
            sb.Append("  Percent2Title: ").Append(Percent2Title).Append("\n");
            sb.Append("  Percent1Value: ").Append(Percent1Value).Append("\n");
            sb.Append("  Percent2Value: ").Append(Percent2Value).Append("\n");
            sb.Append("  Stacked: ").Append(Stacked).Append("\n");
            sb.Append("  SingleValue: ").Append(SingleValue).Append("\n");
            sb.Append("  CollectionPaused: ").Append(CollectionPaused).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
