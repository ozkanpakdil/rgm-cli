/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using RedGate.SqlMonitor.Channels.Data;
using RedGate.SqlMonitor.Common.Domain;

namespace cli.Model;

/// <summary>
///     GroupedAlertDto
/// </summary>
[DataContract(Name = "GroupedAlertDto")]
public class GroupedAlertDto : IValidatableObject
{
    /// <summary>
    ///     Initializes a new instance of the <see cref="GroupedAlertDto" /> class.
    /// </summary>
    /// <param name="groupId">groupId.</param>
    /// <param name="objectName">objectName.</param>
    /// <param name="objectType">objectType.</param>
    /// <param name="entityType">entityType.</param>
    /// <param name="groupCir">groupCir.</param>
    /// <param name="alertType">alertType.</param>
    /// <param name="alertSubType">alertSubType.</param>
    /// <param name="maxAlertId">maxAlertId.</param>
    /// <param name="alertTypeDefinition">alertTypeDefinition.</param>
    /// <param name="status">status.</param>
    /// <param name="firstUpdate">firstUpdate.</param>
    /// <param name="lastUpdate">lastUpdate.</param>
    /// <param name="lowSeverityCount">lowSeverityCount.</param>
    /// <param name="mediumSeverityCount">mediumSeverityCount.</param>
    /// <param name="highSeverityCount">highSeverityCount.</param>
    /// <param name="unread">unread.</param>
    /// <param name="severity">severity.</param>
    /// <param name="groupCount">groupCount.</param>
    /// <param name="baseMonitorName">baseMonitorName.</param>
    /// <param name="duration">duration.</param>
    /// <param name="raised">raised.</param>
    /// <param name="lastComment">lastComment.</param>
    /// <param name="tags">tags.</param>
    /// <param name="dynamicAlert">dynamicAlert.</param>
    public GroupedAlertDto(GroupIdDto groupId = default, string objectName = default, string objectType = default,
        EntityType? entityType = default, ChannelInstanceRef groupCir = default, int alertType = default,
        int alertSubType = default, IntegerIdentifier maxAlertId = default, string alertTypeDefinition = default,
        string status = default, long firstUpdate = default, long lastUpdate = default, int lowSeverityCount = default,
        int mediumSeverityCount = default, int highSeverityCount = default, int unread = default,
        AlertSeverityDto? severity = default, int groupCount = default, string baseMonitorName = default,
        long duration = default, long raised = default, string lastComment = default, List<TagDto> tags = default,
        bool dynamicAlert = default)
    {
        GroupId = groupId;
        ObjectName = objectName;
        ObjectType = objectType;
        EntityType = entityType;
        GroupCir = groupCir;
        AlertType = alertType;
        AlertSubType = alertSubType;
        MaxAlertId = maxAlertId;
        AlertTypeDefinition = alertTypeDefinition;
        Status = status;
        FirstUpdate = firstUpdate;
        LastUpdate = lastUpdate;
        LowSeverityCount = lowSeverityCount;
        MediumSeverityCount = mediumSeverityCount;
        HighSeverityCount = highSeverityCount;
        Unread = unread;
        Severity = severity;
        GroupCount = groupCount;
        BaseMonitorName = baseMonitorName;
        Duration = duration;
        Raised = raised;
        LastComment = lastComment;
        Tags = tags;
        DynamicAlert = dynamicAlert;
    }

    /// <summary>
    ///     Gets or Sets EntityType
    /// </summary>
    [DataMember(Name = "entityType", EmitDefaultValue = false)]
    public EntityType? EntityType { get; set; }

    /// <summary>
    ///     Gets or Sets Severity
    /// </summary>
    [DataMember(Name = "severity", EmitDefaultValue = false)]
    public AlertSeverityDto? Severity { get; set; }

    /// <summary>
    ///     Gets or Sets GroupId
    /// </summary>
    [DataMember(Name = "groupId", EmitDefaultValue = false)]
    public GroupIdDto GroupId { get; set; }

    /// <summary>
    ///     Gets or Sets ObjectName
    /// </summary>
    [DataMember(Name = "objectName", EmitDefaultValue = true)]
    public string ObjectName { get; set; }

    /// <summary>
    ///     Gets or Sets ObjectType
    /// </summary>
    [DataMember(Name = "objectType", EmitDefaultValue = true)]
    public string ObjectType { get; set; }

    /// <summary>
    ///     Gets or Sets GroupCir
    /// </summary>
    [DataMember(Name = "groupCir", EmitDefaultValue = true)]
    public ChannelInstanceRef GroupCir { get; set; }

    /// <summary>
    ///     Gets or Sets AlertType
    /// </summary>
    [DataMember(Name = "alertType", EmitDefaultValue = false)]
    public int AlertType { get; set; }

    /// <summary>
    ///     Gets or Sets AlertSubType
    /// </summary>
    [DataMember(Name = "alertSubType", EmitDefaultValue = false)]
    public int AlertSubType { get; set; }

    /// <summary>
    ///     Gets or Sets MaxAlertId
    /// </summary>
    [DataMember(Name = "maxAlertId", EmitDefaultValue = false)]
    public IntegerIdentifier MaxAlertId { get; set; }

    /// <summary>
    ///     Gets or Sets AlertTypeDefinition
    /// </summary>
    [DataMember(Name = "alertTypeDefinition", EmitDefaultValue = true)]
    public string AlertTypeDefinition { get; set; }

    /// <summary>
    ///     Gets or Sets Status
    /// </summary>
    [DataMember(Name = "status", EmitDefaultValue = true)]
    public string Status { get; set; }

    /// <summary>
    ///     Gets or Sets FirstUpdate
    /// </summary>
    [DataMember(Name = "firstUpdate", EmitDefaultValue = false)]
    public long FirstUpdate { get; set; }

    /// <summary>
    ///     Gets or Sets LastUpdate
    /// </summary>
    [DataMember(Name = "lastUpdate", EmitDefaultValue = false)]
    public long LastUpdate { get; set; }

    /// <summary>
    ///     Gets or Sets LowSeverityCount
    /// </summary>
    [DataMember(Name = "lowSeverityCount", EmitDefaultValue = false)]
    public int LowSeverityCount { get; set; }

    /// <summary>
    ///     Gets or Sets MediumSeverityCount
    /// </summary>
    [DataMember(Name = "mediumSeverityCount", EmitDefaultValue = false)]
    public int MediumSeverityCount { get; set; }

    /// <summary>
    ///     Gets or Sets HighSeverityCount
    /// </summary>
    [DataMember(Name = "highSeverityCount", EmitDefaultValue = false)]
    public int HighSeverityCount { get; set; }

    /// <summary>
    ///     Gets or Sets Unread
    /// </summary>
    [DataMember(Name = "unread", EmitDefaultValue = false)]
    public int Unread { get; set; }

    /// <summary>
    ///     Gets or Sets GroupCount
    /// </summary>
    [DataMember(Name = "groupCount", EmitDefaultValue = false)]
    public int GroupCount { get; set; }

    /// <summary>
    ///     Gets or Sets BaseMonitorName
    /// </summary>
    [DataMember(Name = "baseMonitorName", EmitDefaultValue = true)]
    public string BaseMonitorName { get; set; }

    /// <summary>
    ///     Gets or Sets Duration
    /// </summary>
    [DataMember(Name = "duration", EmitDefaultValue = false)]
    public long Duration { get; set; }

    /// <summary>
    ///     Gets or Sets Raised
    /// </summary>
    [DataMember(Name = "raised", EmitDefaultValue = false)]
    public long Raised { get; set; }

    /// <summary>
    ///     Gets or Sets LastComment
    /// </summary>
    [DataMember(Name = "lastComment", EmitDefaultValue = true)]
    public string LastComment { get; set; }

    /// <summary>
    ///     Gets or Sets Tags
    /// </summary>
    [DataMember(Name = "tags", EmitDefaultValue = true)]
    public List<TagDto> Tags { get; set; }

    /// <summary>
    ///     Gets or Sets DynamicAlert
    /// </summary>
    [DataMember(Name = "dynamicAlert", EmitDefaultValue = true)]
    public bool DynamicAlert { get; set; }

    /// <summary>
    ///     To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
        yield break;
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class GroupedAlertDto {\n");
        sb.Append("  GroupId: ").Append(GroupId).Append("\n");
        sb.Append("  ObjectName: ").Append(ObjectName).Append("\n");
        sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
        sb.Append("  EntityType: ").Append(EntityType).Append("\n");
        sb.Append("  GroupCir: ").Append(GroupCir).Append("\n");
        sb.Append("  AlertType: ").Append(AlertType).Append("\n");
        sb.Append("  AlertSubType: ").Append(AlertSubType).Append("\n");
        sb.Append("  MaxAlertId: ").Append(MaxAlertId).Append("\n");
        sb.Append("  AlertTypeDefinition: ").Append(AlertTypeDefinition).Append("\n");
        sb.Append("  Status: ").Append(Status).Append("\n");
        sb.Append("  FirstUpdate: ").Append(FirstUpdate).Append("\n");
        sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
        sb.Append("  LowSeverityCount: ").Append(LowSeverityCount).Append("\n");
        sb.Append("  MediumSeverityCount: ").Append(MediumSeverityCount).Append("\n");
        sb.Append("  HighSeverityCount: ").Append(HighSeverityCount).Append("\n");
        sb.Append("  Unread: ").Append(Unread).Append("\n");
        sb.Append("  Severity: ").Append(Severity).Append("\n");
        sb.Append("  GroupCount: ").Append(GroupCount).Append("\n");
        sb.Append("  BaseMonitorName: ").Append(BaseMonitorName).Append("\n");
        sb.Append("  Duration: ").Append(Duration).Append("\n");
        sb.Append("  Raised: ").Append(Raised).Append("\n");
        sb.Append("  LastComment: ").Append(LastComment).Append("\n");
        sb.Append("  Tags: ").Append(Tags).Append("\n");
        sb.Append("  DynamicAlert: ").Append(DynamicAlert).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}