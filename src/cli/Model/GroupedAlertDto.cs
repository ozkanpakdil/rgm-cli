/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// GroupedAlertDto
    /// </summary>
    [DataContract(Name = "GroupedAlertDto")]
    public partial class GroupedAlertDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name = "entityType", EmitDefaultValue = false)]
        public EntityType? EntityType { get; set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [DataMember(Name = "severity", EmitDefaultValue = false)]
        public AlertSeverityDto? Severity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupedAlertDto" /> class.
        /// </summary>
        /// <param name="groupId">groupId.</param>
        /// <param name="objectName">objectName.</param>
        /// <param name="objectType">objectType.</param>
        /// <param name="entityType">entityType.</param>
        /// <param name="groupCir">groupCir.</param>
        /// <param name="alertType">alertType.</param>
        /// <param name="alertSubType">alertSubType.</param>
        /// <param name="maxAlertId">maxAlertId.</param>
        /// <param name="alertTypeDefinition">alertTypeDefinition.</param>
        /// <param name="status">status.</param>
        /// <param name="firstUpdate">firstUpdate.</param>
        /// <param name="lastUpdate">lastUpdate.</param>
        /// <param name="lowSeverityCount">lowSeverityCount.</param>
        /// <param name="mediumSeverityCount">mediumSeverityCount.</param>
        /// <param name="highSeverityCount">highSeverityCount.</param>
        /// <param name="unread">unread.</param>
        /// <param name="severity">severity.</param>
        /// <param name="groupCount">groupCount.</param>
        /// <param name="baseMonitorName">baseMonitorName.</param>
        /// <param name="duration">duration.</param>
        /// <param name="raised">raised.</param>
        /// <param name="lastComment">lastComment.</param>
        /// <param name="tags">tags.</param>
        /// <param name="dynamicAlert">dynamicAlert.</param>
        public GroupedAlertDto(GroupIdDto groupId = default(GroupIdDto), string objectName = default(string), string objectType = default(string), EntityTypeEnum? entityType = default(EntityTypeEnum?), ChannelInstanceRef groupCir = default(ChannelInstanceRef), int alertType = default(int), int alertSubType = default(int), IntegerIdentifier maxAlertId = default(IntegerIdentifier), string alertTypeDefinition = default(string), string status = default(string), long firstUpdate = default(long), long lastUpdate = default(long), int lowSeverityCount = default(int), int mediumSeverityCount = default(int), int highSeverityCount = default(int), int unread = default(int), AlertSeverityDto? severity = default(AlertSeverityDto?), int groupCount = default(int), string baseMonitorName = default(string), long duration = default(long), long raised = default(long), string lastComment = default(string), List<TagDto> tags = default(List<TagDto>), bool dynamicAlert = default(bool))
        {
            this.GroupId = groupId;
            this.ObjectName = objectName;
            this.ObjectType = objectType;
            this.EntityType = entityType;
            this.GroupCir = groupCir;
            this.AlertType = alertType;
            this.AlertSubType = alertSubType;
            this.MaxAlertId = maxAlertId;
            this.AlertTypeDefinition = alertTypeDefinition;
            this.Status = status;
            this.FirstUpdate = firstUpdate;
            this.LastUpdate = lastUpdate;
            this.LowSeverityCount = lowSeverityCount;
            this.MediumSeverityCount = mediumSeverityCount;
            this.HighSeverityCount = highSeverityCount;
            this.Unread = unread;
            this.Severity = severity;
            this.GroupCount = groupCount;
            this.BaseMonitorName = baseMonitorName;
            this.Duration = duration;
            this.Raised = raised;
            this.LastComment = lastComment;
            this.Tags = tags;
            this.DynamicAlert = dynamicAlert;
        }

        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name = "groupId", EmitDefaultValue = false)]
        public GroupIdDto GroupId { get; set; }

        /// <summary>
        /// Gets or Sets ObjectName
        /// </summary>
        [DataMember(Name = "objectName", EmitDefaultValue = true)]
        public string ObjectName { get; set; }

        /// <summary>
        /// Gets or Sets ObjectType
        /// </summary>
        [DataMember(Name = "objectType", EmitDefaultValue = true)]
        public string ObjectType { get; set; }

        /// <summary>
        /// Gets or Sets GroupCir
        /// </summary>
        [DataMember(Name = "groupCir", EmitDefaultValue = true)]
        public ChannelInstanceRef GroupCir { get; set; }

        /// <summary>
        /// Gets or Sets AlertType
        /// </summary>
        [DataMember(Name = "alertType", EmitDefaultValue = false)]
        public int AlertType { get; set; }

        /// <summary>
        /// Gets or Sets AlertSubType
        /// </summary>
        [DataMember(Name = "alertSubType", EmitDefaultValue = false)]
        public int AlertSubType { get; set; }

        /// <summary>
        /// Gets or Sets MaxAlertId
        /// </summary>
        [DataMember(Name = "maxAlertId", EmitDefaultValue = false)]
        public IntegerIdentifier MaxAlertId { get; set; }

        /// <summary>
        /// Gets or Sets AlertTypeDefinition
        /// </summary>
        [DataMember(Name = "alertTypeDefinition", EmitDefaultValue = true)]
        public string AlertTypeDefinition { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets FirstUpdate
        /// </summary>
        [DataMember(Name = "firstUpdate", EmitDefaultValue = false)]
        public long FirstUpdate { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [DataMember(Name = "lastUpdate", EmitDefaultValue = false)]
        public long LastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets LowSeverityCount
        /// </summary>
        [DataMember(Name = "lowSeverityCount", EmitDefaultValue = false)]
        public int LowSeverityCount { get; set; }

        /// <summary>
        /// Gets or Sets MediumSeverityCount
        /// </summary>
        [DataMember(Name = "mediumSeverityCount", EmitDefaultValue = false)]
        public int MediumSeverityCount { get; set; }

        /// <summary>
        /// Gets or Sets HighSeverityCount
        /// </summary>
        [DataMember(Name = "highSeverityCount", EmitDefaultValue = false)]
        public int HighSeverityCount { get; set; }

        /// <summary>
        /// Gets or Sets Unread
        /// </summary>
        [DataMember(Name = "unread", EmitDefaultValue = false)]
        public int Unread { get; set; }

        /// <summary>
        /// Gets or Sets GroupCount
        /// </summary>
        [DataMember(Name = "groupCount", EmitDefaultValue = false)]
        public int GroupCount { get; set; }

        /// <summary>
        /// Gets or Sets BaseMonitorName
        /// </summary>
        [DataMember(Name = "baseMonitorName", EmitDefaultValue = true)]
        public string BaseMonitorName { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public long Duration { get; set; }

        /// <summary>
        /// Gets or Sets Raised
        /// </summary>
        [DataMember(Name = "raised", EmitDefaultValue = false)]
        public long Raised { get; set; }

        /// <summary>
        /// Gets or Sets LastComment
        /// </summary>
        [DataMember(Name = "lastComment", EmitDefaultValue = true)]
        public string LastComment { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = true)]
        public List<TagDto> Tags { get; set; }

        /// <summary>
        /// Gets or Sets DynamicAlert
        /// </summary>
        [DataMember(Name = "dynamicAlert", EmitDefaultValue = true)]
        public bool DynamicAlert { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupedAlertDto {\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  ObjectName: ").Append(ObjectName).Append("\n");
            sb.Append("  ObjectType: ").Append(ObjectType).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  GroupCir: ").Append(GroupCir).Append("\n");
            sb.Append("  AlertType: ").Append(AlertType).Append("\n");
            sb.Append("  AlertSubType: ").Append(AlertSubType).Append("\n");
            sb.Append("  MaxAlertId: ").Append(MaxAlertId).Append("\n");
            sb.Append("  AlertTypeDefinition: ").Append(AlertTypeDefinition).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FirstUpdate: ").Append(FirstUpdate).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  LowSeverityCount: ").Append(LowSeverityCount).Append("\n");
            sb.Append("  MediumSeverityCount: ").Append(MediumSeverityCount).Append("\n");
            sb.Append("  HighSeverityCount: ").Append(HighSeverityCount).Append("\n");
            sb.Append("  Unread: ").Append(Unread).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  GroupCount: ").Append(GroupCount).Append("\n");
            sb.Append("  BaseMonitorName: ").Append(BaseMonitorName).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Raised: ").Append(Raised).Append("\n");
            sb.Append("  LastComment: ").Append(LastComment).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  DynamicAlert: ").Append(DynamicAlert).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
