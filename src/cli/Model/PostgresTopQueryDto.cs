/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// PostgresTopQueryDto
    /// </summary>
    [DataContract(Name = "PostgresTopQueryDto")]
    public partial class PostgresTopQueryDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostgresTopQueryDto" /> class.
        /// </summary>
        /// <param name="queryId">queryId.</param>
        /// <param name="queryCir">queryCir.</param>
        /// <param name="databaseName">databaseName.</param>
        /// <param name="databaseId">databaseId.</param>
        /// <param name="userId">userId.</param>
        /// <param name="topLevel">topLevel.</param>
        /// <param name="queryText">queryText.</param>
        /// <param name="queryHash">queryHash.</param>
        /// <param name="duration">duration.</param>
        /// <param name="executionCount">executionCount.</param>
        /// <param name="cacheBlocksHit">cacheBlocksHit.</param>
        /// <param name="blocksRead">blocksRead.</param>
        /// <param name="blocksWritten">blocksWritten.</param>
        /// <param name="ioTime">ioTime.</param>
        /// <param name="queryPlanExists">queryPlanExists.</param>
        /// <param name="planHash">planHash.</param>
        public PostgresTopQueryDto(IntegerIdentifier queryId = default(IntegerIdentifier), ChannelInstanceRef queryCir = default(ChannelInstanceRef), string databaseName = default(string), IntegerIdentifier databaseId = default(IntegerIdentifier), IntegerIdentifier userId = default(IntegerIdentifier), bool topLevel = default(bool), string queryText = default(string), string queryHash = default(string), double duration = default(double), long executionCount = default(long), long cacheBlocksHit = default(long), long blocksRead = default(long), long blocksWritten = default(long), double ioTime = default(double), bool queryPlanExists = default(bool), string planHash = default(string))
        {
            this.QueryId = queryId;
            this.QueryCir = queryCir;
            this.DatabaseName = databaseName;
            this.DatabaseId = databaseId;
            this.UserId = userId;
            this.TopLevel = topLevel;
            this.QueryText = queryText;
            this.QueryHash = queryHash;
            this.Duration = duration;
            this.ExecutionCount = executionCount;
            this.CacheBlocksHit = cacheBlocksHit;
            this.BlocksRead = blocksRead;
            this.BlocksWritten = blocksWritten;
            this.IoTime = ioTime;
            this.QueryPlanExists = queryPlanExists;
            this.PlanHash = planHash;
        }

        /// <summary>
        /// Gets or Sets QueryId
        /// </summary>
        [DataMember(Name = "queryId", EmitDefaultValue = false)]
        public IntegerIdentifier QueryId { get; set; }

        /// <summary>
        /// Gets or Sets QueryCir
        /// </summary>
        [DataMember(Name = "queryCir", EmitDefaultValue = true)]
        public ChannelInstanceRef QueryCir { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseName
        /// </summary>
        [DataMember(Name = "databaseName", EmitDefaultValue = true)]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseId
        /// </summary>
        [DataMember(Name = "databaseId", EmitDefaultValue = false)]
        public IntegerIdentifier DatabaseId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public IntegerIdentifier UserId { get; set; }

        /// <summary>
        /// Gets or Sets TopLevel
        /// </summary>
        [DataMember(Name = "topLevel", EmitDefaultValue = true)]
        public bool TopLevel { get; set; }

        /// <summary>
        /// Gets or Sets QueryText
        /// </summary>
        [DataMember(Name = "queryText", EmitDefaultValue = true)]
        public string QueryText { get; set; }

        /// <summary>
        /// Gets or Sets QueryHash
        /// </summary>
        [DataMember(Name = "queryHash", EmitDefaultValue = true)]
        public string QueryHash { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public double Duration { get; set; }

        /// <summary>
        /// Gets or Sets ExecutionCount
        /// </summary>
        [DataMember(Name = "executionCount", EmitDefaultValue = false)]
        public long ExecutionCount { get; set; }

        /// <summary>
        /// Gets or Sets CacheBlocksHit
        /// </summary>
        [DataMember(Name = "cacheBlocksHit", EmitDefaultValue = false)]
        public long CacheBlocksHit { get; set; }

        /// <summary>
        /// Gets or Sets BlocksRead
        /// </summary>
        [DataMember(Name = "blocksRead", EmitDefaultValue = false)]
        public long BlocksRead { get; set; }

        /// <summary>
        /// Gets or Sets BlocksWritten
        /// </summary>
        [DataMember(Name = "blocksWritten", EmitDefaultValue = false)]
        public long BlocksWritten { get; set; }

        /// <summary>
        /// Gets or Sets IoTime
        /// </summary>
        [DataMember(Name = "ioTime", EmitDefaultValue = false)]
        public double IoTime { get; set; }

        /// <summary>
        /// Gets or Sets QueryPlanExists
        /// </summary>
        [DataMember(Name = "queryPlanExists", EmitDefaultValue = true)]
        public bool QueryPlanExists { get; set; }

        /// <summary>
        /// Gets or Sets PlanHash
        /// </summary>
        [DataMember(Name = "planHash", EmitDefaultValue = true)]
        public string PlanHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostgresTopQueryDto {\n");
            sb.Append("  QueryId: ").Append(QueryId).Append("\n");
            sb.Append("  QueryCir: ").Append(QueryCir).Append("\n");
            sb.Append("  DatabaseName: ").Append(DatabaseName).Append("\n");
            sb.Append("  DatabaseId: ").Append(DatabaseId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  TopLevel: ").Append(TopLevel).Append("\n");
            sb.Append("  QueryText: ").Append(QueryText).Append("\n");
            sb.Append("  QueryHash: ").Append(QueryHash).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  ExecutionCount: ").Append(ExecutionCount).Append("\n");
            sb.Append("  CacheBlocksHit: ").Append(CacheBlocksHit).Append("\n");
            sb.Append("  BlocksRead: ").Append(BlocksRead).Append("\n");
            sb.Append("  BlocksWritten: ").Append(BlocksWritten).Append("\n");
            sb.Append("  IoTime: ").Append(IoTime).Append("\n");
            sb.Append("  QueryPlanExists: ").Append(QueryPlanExists).Append("\n");
            sb.Append("  PlanHash: ").Append(PlanHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
