/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// AccessReport
    /// </summary>
    [DataContract(Name = "AccessReport")]
    public partial class AccessReport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccessReport" /> class.
        /// </summary>
        /// <param name="accessGranted">accessGranted.</param>
        /// <param name="accessReason">accessReason.</param>
        /// <param name="baseMonitor">baseMonitor.</param>
        public AccessReport(bool accessGranted = default(bool), string accessReason = default(string), BaseMonitorDto baseMonitor = default(BaseMonitorDto))
        {
            this.AccessGranted = accessGranted;
            this.AccessReason = accessReason;
            this.BaseMonitor = baseMonitor;
        }

        /// <summary>
        /// Gets or Sets AccessGranted
        /// </summary>
        [DataMember(Name = "accessGranted", EmitDefaultValue = true)]
        public bool AccessGranted { get; set; }

        /// <summary>
        /// Gets or Sets AccessReason
        /// </summary>
        [DataMember(Name = "accessReason", EmitDefaultValue = true)]
        public string AccessReason { get; set; }

        /// <summary>
        /// Gets or Sets BaseMonitor
        /// </summary>
        [DataMember(Name = "baseMonitor", EmitDefaultValue = false)]
        public BaseMonitorDto BaseMonitor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccessReport {\n");
            sb.Append("  AccessGranted: ").Append(AccessGranted).Append("\n");
            sb.Append("  AccessReason: ").Append(AccessReason).Append("\n");
            sb.Append("  BaseMonitor: ").Append(BaseMonitor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
