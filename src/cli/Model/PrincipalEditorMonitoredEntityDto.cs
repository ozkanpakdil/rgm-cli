/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// PrincipalEditorMonitoredEntityDto
    /// </summary>
    [DataContract(Name = "PrincipalEditorMonitoredEntityDto")]
    public partial class PrincipalEditorMonitoredEntityDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name = "entityType", EmitDefaultValue = false)]
        public PrincipalEditorEntityTypeDto? EntityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PrincipalEditorMonitoredEntityDto" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="cir">cir.</param>
        /// <param name="selected">selected.</param>
        /// <param name="entityType">entityType.</param>
        /// <param name="baseMonitorName">baseMonitorName.</param>
        /// <param name="childEntities">childEntities.</param>
        public PrincipalEditorMonitoredEntityDto(string name = default(string), ChannelInstanceRef cir = default(ChannelInstanceRef), bool? selected = default(bool?), PrincipalEditorEntityTypeDto? entityType = default(PrincipalEditorEntityTypeDto?), string baseMonitorName = default(string), List<PrincipalEditorMonitoredEntityDto> childEntities = default(List<PrincipalEditorMonitoredEntityDto>))
        {
            this.Name = name;
            this.Cir = cir;
            this.Selected = selected;
            this.EntityType = entityType;
            this.BaseMonitorName = baseMonitorName;
            this.ChildEntities = childEntities;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Cir
        /// </summary>
        [DataMember(Name = "cir", EmitDefaultValue = true)]
        public ChannelInstanceRef Cir { get; set; }

        /// <summary>
        /// Gets or Sets Selected
        /// </summary>
        [DataMember(Name = "selected", EmitDefaultValue = true)]
        public bool? Selected { get; set; }

        /// <summary>
        /// Gets or Sets BaseMonitorName
        /// </summary>
        [DataMember(Name = "baseMonitorName", EmitDefaultValue = true)]
        public string BaseMonitorName { get; set; }

        /// <summary>
        /// Gets or Sets ChildEntities
        /// </summary>
        [DataMember(Name = "childEntities", EmitDefaultValue = true)]
        public List<PrincipalEditorMonitoredEntityDto> ChildEntities { get; set; }

        /// <summary>
        /// Gets or Sets IsMachine
        /// </summary>
        [DataMember(Name = "isMachine", EmitDefaultValue = true)]
        public bool IsMachine { get; private set; }

        /// <summary>
        /// Returns false as IsMachine should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsMachine()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsCluster
        /// </summary>
        [DataMember(Name = "isCluster", EmitDefaultValue = true)]
        public bool IsCluster { get; private set; }

        /// <summary>
        /// Returns false as IsCluster should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsCluster()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsAzureSqlServer
        /// </summary>
        [DataMember(Name = "isAzureSqlServer", EmitDefaultValue = true)]
        public bool IsAzureSqlServer { get; private set; }

        /// <summary>
        /// Returns false as IsAzureSqlServer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsAzureSqlServer()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsAzureManagedInstance
        /// </summary>
        [DataMember(Name = "isAzureManagedInstance", EmitDefaultValue = true)]
        public bool IsAzureManagedInstance { get; private set; }

        /// <summary>
        /// Returns false as IsAzureManagedInstance should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsAzureManagedInstance()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsAmazonRdsSqlServer
        /// </summary>
        [DataMember(Name = "isAmazonRdsSqlServer", EmitDefaultValue = true)]
        public bool IsAmazonRdsSqlServer { get; private set; }

        /// <summary>
        /// Returns false as IsAmazonRdsSqlServer should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsAmazonRdsSqlServer()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsLinuxMachine
        /// </summary>
        [DataMember(Name = "isLinuxMachine", EmitDefaultValue = true)]
        public bool IsLinuxMachine { get; private set; }

        /// <summary>
        /// Returns false as IsLinuxMachine should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsLinuxMachine()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsSqlServerInstance
        /// </summary>
        [DataMember(Name = "isSqlServerInstance", EmitDefaultValue = true)]
        public bool IsSqlServerInstance { get; private set; }

        /// <summary>
        /// Returns false as IsSqlServerInstance should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsSqlServerInstance()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets IsPostgresInstance
        /// </summary>
        [DataMember(Name = "isPostgresInstance", EmitDefaultValue = true)]
        public bool IsPostgresInstance { get; private set; }

        /// <summary>
        /// Returns false as IsPostgresInstance should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsPostgresInstance()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PrincipalEditorMonitoredEntityDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Cir: ").Append(Cir).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  BaseMonitorName: ").Append(BaseMonitorName).Append("\n");
            sb.Append("  ChildEntities: ").Append(ChildEntities).Append("\n");
            sb.Append("  IsMachine: ").Append(IsMachine).Append("\n");
            sb.Append("  IsCluster: ").Append(IsCluster).Append("\n");
            sb.Append("  IsAzureSqlServer: ").Append(IsAzureSqlServer).Append("\n");
            sb.Append("  IsAzureManagedInstance: ").Append(IsAzureManagedInstance).Append("\n");
            sb.Append("  IsAmazonRdsSqlServer: ").Append(IsAmazonRdsSqlServer).Append("\n");
            sb.Append("  IsLinuxMachine: ").Append(IsLinuxMachine).Append("\n");
            sb.Append("  IsSqlServerInstance: ").Append(IsSqlServerInstance).Append("\n");
            sb.Append("  IsPostgresInstance: ").Append(IsPostgresInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
