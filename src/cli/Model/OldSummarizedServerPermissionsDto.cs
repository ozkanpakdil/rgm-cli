/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// OldSummarizedServerPermissionsDto
    /// </summary>
    [DataContract(Name = "OldSummarizedServerPermissionsDto")]
    public partial class OldSummarizedServerPermissionsDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OldSummarizedServerPermissionsDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="serverInfo">serverInfo.</param>
        /// <param name="sysAdminUsersCount">sysAdminUsersCount.</param>
        /// <param name="sysAdminGroupsCount">sysAdminGroupsCount.</param>
        /// <param name="serverAdminUsersCount">serverAdminUsersCount.</param>
        /// <param name="serverAdminGroupsCount">serverAdminGroupsCount.</param>
        /// <param name="securityAdminUsersCount">securityAdminUsersCount.</param>
        /// <param name="securityAdminGroupsCount">securityAdminGroupsCount.</param>
        /// <param name="totalUsersCount">totalUsersCount.</param>
        /// <param name="totalGroupsCount">totalGroupsCount.</param>
        public OldSummarizedServerPermissionsDto(string id = default(string), MonitoredEntityInfoDto serverInfo = default(MonitoredEntityInfoDto), long sysAdminUsersCount = default(long), long sysAdminGroupsCount = default(long), long serverAdminUsersCount = default(long), long serverAdminGroupsCount = default(long), long securityAdminUsersCount = default(long), long securityAdminGroupsCount = default(long), long totalUsersCount = default(long), long totalGroupsCount = default(long))
        {
            this.Id = id;
            this.ServerInfo = serverInfo;
            this.SysAdminUsersCount = sysAdminUsersCount;
            this.SysAdminGroupsCount = sysAdminGroupsCount;
            this.ServerAdminUsersCount = serverAdminUsersCount;
            this.ServerAdminGroupsCount = serverAdminGroupsCount;
            this.SecurityAdminUsersCount = securityAdminUsersCount;
            this.SecurityAdminGroupsCount = securityAdminGroupsCount;
            this.TotalUsersCount = totalUsersCount;
            this.TotalGroupsCount = totalGroupsCount;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ServerInfo
        /// </summary>
        [DataMember(Name = "serverInfo", EmitDefaultValue = false)]
        public MonitoredEntityInfoDto ServerInfo { get; set; }

        /// <summary>
        /// Gets or Sets SysAdminUsersCount
        /// </summary>
        [DataMember(Name = "sysAdminUsersCount", EmitDefaultValue = false)]
        public long SysAdminUsersCount { get; set; }

        /// <summary>
        /// Gets or Sets SysAdminGroupsCount
        /// </summary>
        [DataMember(Name = "sysAdminGroupsCount", EmitDefaultValue = false)]
        public long SysAdminGroupsCount { get; set; }

        /// <summary>
        /// Gets or Sets ServerAdminUsersCount
        /// </summary>
        [DataMember(Name = "serverAdminUsersCount", EmitDefaultValue = false)]
        public long ServerAdminUsersCount { get; set; }

        /// <summary>
        /// Gets or Sets ServerAdminGroupsCount
        /// </summary>
        [DataMember(Name = "serverAdminGroupsCount", EmitDefaultValue = false)]
        public long ServerAdminGroupsCount { get; set; }

        /// <summary>
        /// Gets or Sets SecurityAdminUsersCount
        /// </summary>
        [DataMember(Name = "securityAdminUsersCount", EmitDefaultValue = false)]
        public long SecurityAdminUsersCount { get; set; }

        /// <summary>
        /// Gets or Sets SecurityAdminGroupsCount
        /// </summary>
        [DataMember(Name = "securityAdminGroupsCount", EmitDefaultValue = false)]
        public long SecurityAdminGroupsCount { get; set; }

        /// <summary>
        /// Gets or Sets TotalUsersCount
        /// </summary>
        [DataMember(Name = "totalUsersCount", EmitDefaultValue = false)]
        public long TotalUsersCount { get; set; }

        /// <summary>
        /// Gets or Sets TotalGroupsCount
        /// </summary>
        [DataMember(Name = "totalGroupsCount", EmitDefaultValue = false)]
        public long TotalGroupsCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OldSummarizedServerPermissionsDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ServerInfo: ").Append(ServerInfo).Append("\n");
            sb.Append("  SysAdminUsersCount: ").Append(SysAdminUsersCount).Append("\n");
            sb.Append("  SysAdminGroupsCount: ").Append(SysAdminGroupsCount).Append("\n");
            sb.Append("  ServerAdminUsersCount: ").Append(ServerAdminUsersCount).Append("\n");
            sb.Append("  ServerAdminGroupsCount: ").Append(ServerAdminGroupsCount).Append("\n");
            sb.Append("  SecurityAdminUsersCount: ").Append(SecurityAdminUsersCount).Append("\n");
            sb.Append("  SecurityAdminGroupsCount: ").Append(SecurityAdminGroupsCount).Append("\n");
            sb.Append("  TotalUsersCount: ").Append(TotalUsersCount).Append("\n");
            sb.Append("  TotalGroupsCount: ").Append(TotalGroupsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
