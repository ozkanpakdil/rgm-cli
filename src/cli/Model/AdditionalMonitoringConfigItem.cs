/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cli.Client.OpenAPIDateConverter;

namespace cli.Model
{
    /// <summary>
    /// AdditionalMonitoringConfigItem
    /// </summary>
    [DataContract(Name = "AdditionalMonitoringConfigItem")]
    public partial class AdditionalMonitoringConfigItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalMonitoringConfigItem" /> class.
        /// </summary>
        /// <param name="cir">cir.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="name">name.</param>
        /// <param name="group">group.</param>
        /// <param name="tags">tags.</param>
        /// <param name="isIndexSamplingEnabled">isIndexSamplingEnabled.</param>
        /// <param name="isQueryInstanceSamplingEnabled">isQueryInstanceSamplingEnabled.</param>
        public AdditionalMonitoringConfigItem(ChannelInstanceRef cir = default(ChannelInstanceRef), string displayName = default(string), string name = default(string), string group = default(string), List<Tag> tags = default(List<Tag>), bool? isIndexSamplingEnabled = default(bool?), bool? isQueryInstanceSamplingEnabled = default(bool?))
        {
            this.Cir = cir;
            this.DisplayName = displayName;
            this.Name = name;
            this.Group = group;
            this.Tags = tags;
            this.IsIndexSamplingEnabled = isIndexSamplingEnabled;
            this.IsQueryInstanceSamplingEnabled = isQueryInstanceSamplingEnabled;
        }

        /// <summary>
        /// Gets or Sets Cir
        /// </summary>
        [DataMember(Name = "cir", EmitDefaultValue = false)]
        public ChannelInstanceRef Cir { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<Tag> Tags { get; set; }

        /// <summary>
        /// Gets or Sets IsIndexSamplingEnabled
        /// </summary>
        [DataMember(Name = "isIndexSamplingEnabled", EmitDefaultValue = true)]
        public bool? IsIndexSamplingEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsQueryInstanceSamplingEnabled
        /// </summary>
        [DataMember(Name = "isQueryInstanceSamplingEnabled", EmitDefaultValue = true)]
        public bool? IsQueryInstanceSamplingEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalMonitoringConfigItem {\n");
            sb.Append("  Cir: ").Append(Cir).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  IsIndexSamplingEnabled: ").Append(IsIndexSamplingEnabled).Append("\n");
            sb.Append("  IsQueryInstanceSamplingEnabled: ").Append(IsQueryInstanceSamplingEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
