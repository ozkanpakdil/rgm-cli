/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using cli.Client;
using cli.Model;

namespace cli.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAlertInboxPagingApiApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize"> (optional)</param>
    /// <param name="isGrouped"> (optional)</param>
    /// <param name="timeRange"> (optional)</param>
    /// <param name="endDate"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="timeRangeType2"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>GroupOfAlertsDto</returns>
    GroupOfAlertsDto AlertReport(int? pageSize = default, bool? isGrouped = default, long? timeRange = default,
        long? endDate = default, AlertReportTimeRangeType? timeRangeType = default,
        List<string>? channelInstanceRefs = default, AlertsFilterTimeRangeTypeDto? timeRangeType2 = default,
        int? timeRangeRelativeMinutes = default, long? timeRangeFromDateTime = default,
        long? timeRangeToDateTime = default, AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default,
        bool? includeStatusSeverityHigh = default, bool? includeStatusSeverityMedium = default,
        bool? includeStatusSeverityLow = default, bool? includeStatusReadYes = default,
        bool? includeStatusReadNo = default, bool? includeStatusClearedYes = default,
        bool? includeStatusClearedNo = default, bool? includeStatusStatusEvent = default,
        bool? includeStatusStatusActive = default, bool? includeStatusStatusEnded = default,
        bool? includeStatusCommentYes = default, bool? includeStatusCommentNo = default,
        List<string>? includeAlertTypeIds = default, List<TagDto>? selectedTags = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize"> (optional)</param>
    /// <param name="isGrouped"> (optional)</param>
    /// <param name="timeRange"> (optional)</param>
    /// <param name="endDate"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="timeRangeType2"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of GroupOfAlertsDto</returns>
    ApiResponse<GroupOfAlertsDto> AlertReportWithHttpInfo(int? pageSize = default, bool? isGrouped = default,
        long? timeRange = default, long? endDate = default, AlertReportTimeRangeType? timeRangeType = default,
        List<string>? channelInstanceRefs = default, AlertsFilterTimeRangeTypeDto? timeRangeType2 = default,
        int? timeRangeRelativeMinutes = default, long? timeRangeFromDateTime = default,
        long? timeRangeToDateTime = default, AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default,
        bool? includeStatusSeverityHigh = default, bool? includeStatusSeverityMedium = default,
        bool? includeStatusSeverityLow = default, bool? includeStatusReadYes = default,
        bool? includeStatusReadNo = default, bool? includeStatusClearedYes = default,
        bool? includeStatusClearedNo = default, bool? includeStatusStatusEvent = default,
        bool? includeStatusStatusActive = default, bool? includeStatusStatusEnded = default,
        bool? includeStatusCommentYes = default, bool? includeStatusCommentNo = default,
        List<string>? includeAlertTypeIds = default, List<TagDto>? selectedTags = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxLoad(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxLoadWithHttpInfo(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxMoveNewer(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxMoveNewerWithHttpInfo(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxMoveNewest(List<string>? channelInstanceRefs = default, int? pageSize = default,
        bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxMoveNewestWithHttpInfo(List<string>? channelInstanceRefs = default,
        int? pageSize = default, bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxMoveOlder(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxMoveOlderWithHttpInfo(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxMoveOldest(List<string>? channelInstanceRefs = default, int? pageSize = default,
        bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxMoveOldestWithHttpInfo(List<string>? channelInstanceRefs = default,
        int? pageSize = default, bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default,
        int operationIndex = 0);

    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAlertInboxPagingApiApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize"> (optional)</param>
    /// <param name="isGrouped"> (optional)</param>
    /// <param name="timeRange"> (optional)</param>
    /// <param name="endDate"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="timeRangeType2"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GroupOfAlertsDto</returns>
    Task<GroupOfAlertsDto> AlertReportAsync(int? pageSize = default, bool? isGrouped = default,
        long? timeRange = default, long? endDate = default, AlertReportTimeRangeType? timeRangeType = default,
        List<string>? channelInstanceRefs = default, AlertsFilterTimeRangeTypeDto? timeRangeType2 = default,
        int? timeRangeRelativeMinutes = default, long? timeRangeFromDateTime = default,
        long? timeRangeToDateTime = default, AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default,
        bool? includeStatusSeverityHigh = default, bool? includeStatusSeverityMedium = default,
        bool? includeStatusSeverityLow = default, bool? includeStatusReadYes = default,
        bool? includeStatusReadNo = default, bool? includeStatusClearedYes = default,
        bool? includeStatusClearedNo = default, bool? includeStatusStatusEvent = default,
        bool? includeStatusStatusActive = default, bool? includeStatusStatusEnded = default,
        bool? includeStatusCommentYes = default, bool? includeStatusCommentNo = default,
        List<string>? includeAlertTypeIds = default, List<TagDto>? selectedTags = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize"> (optional)</param>
    /// <param name="isGrouped"> (optional)</param>
    /// <param name="timeRange"> (optional)</param>
    /// <param name="endDate"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="timeRangeType2"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GroupOfAlertsDto)</returns>
    Task<ApiResponse<GroupOfAlertsDto>> AlertReportWithHttpInfoAsync(int? pageSize = default, bool? isGrouped = default,
        long? timeRange = default, long? endDate = default, AlertReportTimeRangeType? timeRangeType = default,
        List<string>? channelInstanceRefs = default, AlertsFilterTimeRangeTypeDto? timeRangeType2 = default,
        int? timeRangeRelativeMinutes = default, long? timeRangeFromDateTime = default,
        long? timeRangeToDateTime = default, AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default,
        bool? includeStatusSeverityHigh = default, bool? includeStatusSeverityMedium = default,
        bool? includeStatusSeverityLow = default, bool? includeStatusReadYes = default,
        bool? includeStatusReadNo = default, bool? includeStatusClearedYes = default,
        bool? includeStatusClearedNo = default, bool? includeStatusStatusEvent = default,
        bool? includeStatusStatusActive = default, bool? includeStatusStatusEnded = default,
        bool? includeStatusCommentYes = default, bool? includeStatusCommentNo = default,
        List<string>? includeAlertTypeIds = default, List<TagDto>? selectedTags = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxLoadAsync(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxLoadWithHttpInfoAsync(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxMoveNewerAsync(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxMoveNewerWithHttpInfoAsync(string? startTicks = default,
        long? alertId = default, List<string>? channelInstanceRefs = default, int? pageSize = default,
        bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxMoveNewestAsync(List<string>? channelInstanceRefs = default, int? pageSize = default,
        bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxMoveNewestWithHttpInfoAsync(List<string>? channelInstanceRefs = default,
        int? pageSize = default, bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxMoveOlderAsync(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxMoveOlderWithHttpInfoAsync(string? startTicks = default,
        long? alertId = default, List<string>? channelInstanceRefs = default, int? pageSize = default,
        bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxMoveOldestAsync(List<string>? channelInstanceRefs = default, int? pageSize = default,
        bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxMoveOldestWithHttpInfoAsync(List<string>? channelInstanceRefs = default,
        int? pageSize = default, bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAlertInboxPagingApiApi : IAlertInboxPagingApiApiSync, IAlertInboxPagingApiApiAsync
{
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class AlertInboxPagingApiApi : IAlertInboxPagingApiApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="AlertInboxPagingApiApi" /> class.
    /// </summary>
    /// <returns></returns>
    public AlertInboxPagingApiApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AlertInboxPagingApiApi" /> class.
    /// </summary>
    /// <returns></returns>
    public AlertInboxPagingApiApi(string basePath)
    {
        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AlertInboxPagingApiApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public AlertInboxPagingApiApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AlertInboxPagingApiApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public AlertInboxPagingApiApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize"> (optional)</param>
    /// <param name="isGrouped"> (optional)</param>
    /// <param name="timeRange"> (optional)</param>
    /// <param name="endDate"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="timeRangeType2"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>GroupOfAlertsDto</returns>
    public GroupOfAlertsDto AlertReport(int? pageSize = default, bool? isGrouped = default, long? timeRange = default,
        long? endDate = default, AlertReportTimeRangeType? timeRangeType = default,
        List<string>? channelInstanceRefs = default, AlertsFilterTimeRangeTypeDto? timeRangeType2 = default,
        int? timeRangeRelativeMinutes = default, long? timeRangeFromDateTime = default,
        long? timeRangeToDateTime = default, AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default,
        bool? includeStatusSeverityHigh = default, bool? includeStatusSeverityMedium = default,
        bool? includeStatusSeverityLow = default, bool? includeStatusReadYes = default,
        bool? includeStatusReadNo = default, bool? includeStatusClearedYes = default,
        bool? includeStatusClearedNo = default, bool? includeStatusStatusEvent = default,
        bool? includeStatusStatusActive = default, bool? includeStatusStatusEnded = default,
        bool? includeStatusCommentYes = default, bool? includeStatusCommentNo = default,
        List<string>? includeAlertTypeIds = default, List<TagDto>? selectedTags = default, int operationIndex = 0)
    {
        var localVarResponse = AlertReportWithHttpInfo(pageSize, isGrouped, timeRange, endDate, timeRangeType,
            channelInstanceRefs, timeRangeType2, timeRangeRelativeMinutes, timeRangeFromDateTime, timeRangeToDateTime,
            timeRangeTimeWindowMode, includeStatusSeverityHigh, includeStatusSeverityMedium, includeStatusSeverityLow,
            includeStatusReadYes, includeStatusReadNo, includeStatusClearedYes, includeStatusClearedNo,
            includeStatusStatusEvent, includeStatusStatusActive, includeStatusStatusEnded, includeStatusCommentYes,
            includeStatusCommentNo, includeAlertTypeIds, selectedTags);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize"> (optional)</param>
    /// <param name="isGrouped"> (optional)</param>
    /// <param name="timeRange"> (optional)</param>
    /// <param name="endDate"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="timeRangeType2"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of GroupOfAlertsDto</returns>
    public ApiResponse<GroupOfAlertsDto> AlertReportWithHttpInfo(int? pageSize = default, bool? isGrouped = default,
        long? timeRange = default, long? endDate = default, AlertReportTimeRangeType? timeRangeType = default,
        List<string>? channelInstanceRefs = default, AlertsFilterTimeRangeTypeDto? timeRangeType2 = default,
        int? timeRangeRelativeMinutes = default, long? timeRangeFromDateTime = default,
        long? timeRangeToDateTime = default, AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default,
        bool? includeStatusSeverityHigh = default, bool? includeStatusSeverityMedium = default,
        bool? includeStatusSeverityLow = default, bool? includeStatusReadYes = default,
        bool? includeStatusReadNo = default, bool? includeStatusClearedYes = default,
        bool? includeStatusClearedNo = default, bool? includeStatusStatusEvent = default,
        bool? includeStatusStatusActive = default, bool? includeStatusStatusEnded = default,
        bool? includeStatusCommentYes = default, bool? includeStatusCommentNo = default,
        List<string>? includeAlertTypeIds = default, List<TagDto>? selectedTags = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (pageSize != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
        if (isGrouped != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "isGrouped", isGrouped));
        if (timeRange != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "timeRange", timeRange));
        if (endDate != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "endDate", endDate));
        if (timeRangeType != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("", "timeRangeType", timeRangeType));
        if (channelInstanceRefs != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("multi", "channelInstanceRefs", channelInstanceRefs));
        if (timeRangeType2 != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.Type",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(timeRangeType2)
                    : ClientUtils.Serialize(timeRangeType2)); // form parameter
        if (timeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(timeRangeRelativeMinutes)); // form parameter
        if (timeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.FromDateTime",
                ClientUtils.ParameterToString(timeRangeFromDateTime)); // form parameter
        if (timeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.ToDateTime",
                ClientUtils.ParameterToString(timeRangeToDateTime)); // form parameter
        if (timeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.TimeWindowMode",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(timeRangeTimeWindowMode)
                    : ClientUtils.Serialize(timeRangeTimeWindowMode)); // form parameter
        if (includeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(includeStatusSeverityHigh)); // form parameter
        if (includeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(includeStatusSeverityMedium)); // form parameter
        if (includeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(includeStatusSeverityLow)); // form parameter
        if (includeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(includeStatusReadYes)); // form parameter
        if (includeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(includeStatusReadNo)); // form parameter
        if (includeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(includeStatusClearedYes)); // form parameter
        if (includeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(includeStatusClearedNo)); // form parameter
        if (includeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(includeStatusStatusEvent)); // form parameter
        if (includeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(includeStatusStatusActive)); // form parameter
        if (includeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(includeStatusStatusEnded)); // form parameter
        if (includeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(includeStatusCommentYes)); // form parameter
        if (includeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(includeStatusCommentNo)); // form parameter
        if (includeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("IncludeAlertTypeIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(includeAlertTypeIds)
                    : ClientUtils.Serialize(includeAlertTypeIds)); // form parameter
        if (selectedTags != null)
            localVarRequestOptions.FormParameters.Add("SelectedTags",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedTags)
                    : ClientUtils.Serialize(selectedTags)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxPagingApiApi.AlertReport";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<GroupOfAlertsDto>("/api/Alerts/alertsgroupinbox/alertreport",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertReport", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize"> (optional)</param>
    /// <param name="isGrouped"> (optional)</param>
    /// <param name="timeRange"> (optional)</param>
    /// <param name="endDate"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="timeRangeType2"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GroupOfAlertsDto</returns>
    public async Task<GroupOfAlertsDto> AlertReportAsync(int? pageSize = default, bool? isGrouped = default,
        long? timeRange = default, long? endDate = default, AlertReportTimeRangeType? timeRangeType = default,
        List<string>? channelInstanceRefs = default, AlertsFilterTimeRangeTypeDto? timeRangeType2 = default,
        int? timeRangeRelativeMinutes = default, long? timeRangeFromDateTime = default,
        long? timeRangeToDateTime = default, AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default,
        bool? includeStatusSeverityHigh = default, bool? includeStatusSeverityMedium = default,
        bool? includeStatusSeverityLow = default, bool? includeStatusReadYes = default,
        bool? includeStatusReadNo = default, bool? includeStatusClearedYes = default,
        bool? includeStatusClearedNo = default, bool? includeStatusStatusEvent = default,
        bool? includeStatusStatusActive = default, bool? includeStatusStatusEnded = default,
        bool? includeStatusCommentYes = default, bool? includeStatusCommentNo = default,
        List<string>? includeAlertTypeIds = default, List<TagDto>? selectedTags = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse = await AlertReportWithHttpInfoAsync(pageSize, isGrouped, timeRange, endDate,
            timeRangeType, channelInstanceRefs, timeRangeType2, timeRangeRelativeMinutes, timeRangeFromDateTime,
            timeRangeToDateTime, timeRangeTimeWindowMode, includeStatusSeverityHigh, includeStatusSeverityMedium,
            includeStatusSeverityLow, includeStatusReadYes, includeStatusReadNo, includeStatusClearedYes,
            includeStatusClearedNo, includeStatusStatusEvent, includeStatusStatusActive, includeStatusStatusEnded,
            includeStatusCommentYes, includeStatusCommentNo, includeAlertTypeIds, selectedTags, operationIndex,
            cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="pageSize"> (optional)</param>
    /// <param name="isGrouped"> (optional)</param>
    /// <param name="timeRange"> (optional)</param>
    /// <param name="endDate"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="timeRangeType2"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GroupOfAlertsDto)</returns>
    public async Task<ApiResponse<GroupOfAlertsDto>> AlertReportWithHttpInfoAsync(int? pageSize = default,
        bool? isGrouped = default, long? timeRange = default, long? endDate = default,
        AlertReportTimeRangeType? timeRangeType = default, List<string>? channelInstanceRefs = default,
        AlertsFilterTimeRangeTypeDto? timeRangeType2 = default, int? timeRangeRelativeMinutes = default,
        long? timeRangeFromDateTime = default, long? timeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default, bool? includeStatusSeverityHigh = default,
        bool? includeStatusSeverityMedium = default, bool? includeStatusSeverityLow = default,
        bool? includeStatusReadYes = default, bool? includeStatusReadNo = default,
        bool? includeStatusClearedYes = default, bool? includeStatusClearedNo = default,
        bool? includeStatusStatusEvent = default, bool? includeStatusStatusActive = default,
        bool? includeStatusStatusEnded = default, bool? includeStatusCommentYes = default,
        bool? includeStatusCommentNo = default, List<string>? includeAlertTypeIds = default,
        List<TagDto>? selectedTags = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (pageSize != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
        if (isGrouped != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "isGrouped", isGrouped));
        if (timeRange != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "timeRange", timeRange));
        if (endDate != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "endDate", endDate));
        if (timeRangeType != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("", "timeRangeType", timeRangeType));
        if (channelInstanceRefs != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("multi", "channelInstanceRefs", channelInstanceRefs));
        if (timeRangeType2 != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.Type",
                ClientUtils.Serialize(timeRangeType2)); // form parameter
        if (timeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(timeRangeRelativeMinutes)); // form parameter
        if (timeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.FromDateTime",
                ClientUtils.ParameterToString(timeRangeFromDateTime)); // form parameter
        if (timeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.ToDateTime",
                ClientUtils.ParameterToString(timeRangeToDateTime)); // form parameter
        if (timeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.TimeWindowMode",
                ClientUtils.Serialize(timeRangeTimeWindowMode)); // form parameter
        if (includeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(includeStatusSeverityHigh)); // form parameter
        if (includeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(includeStatusSeverityMedium)); // form parameter
        if (includeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(includeStatusSeverityLow)); // form parameter
        if (includeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(includeStatusReadYes)); // form parameter
        if (includeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(includeStatusReadNo)); // form parameter
        if (includeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(includeStatusClearedYes)); // form parameter
        if (includeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(includeStatusClearedNo)); // form parameter
        if (includeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(includeStatusStatusEvent)); // form parameter
        if (includeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(includeStatusStatusActive)); // form parameter
        if (includeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(includeStatusStatusEnded)); // form parameter
        if (includeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(includeStatusCommentYes)); // form parameter
        if (includeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(includeStatusCommentNo)); // form parameter
        if (includeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("IncludeAlertTypeIds",
                ClientUtils.Serialize(includeAlertTypeIds)); // form parameter
        if (selectedTags != null)
            localVarRequestOptions.FormParameters.Add("SelectedTags",
                ClientUtils.Serialize(selectedTags)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxPagingApiApi.AlertReport";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<GroupOfAlertsDto>("/api/Alerts/alertsgroupinbox/alertreport", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertReport", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxLoad(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0)
    {
        AlertsInboxLoadWithHttpInfo(startTicks, alertId, channelInstanceRefs, pageSize, isGrouped, filterSettingsDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxLoadWithHttpInfo(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (startTicks != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startTicks", startTicks));
        if (alertId != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "alertId", alertId));
        if (channelInstanceRefs != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("multi", "channelInstanceRefs", channelInstanceRefs));
        if (pageSize != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
        if (isGrouped != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "isGrouped", isGrouped));
        localVarRequestOptions.Data = filterSettingsDto;

        localVarRequestOptions.Operation = "AlertInboxPagingApiApi.AlertsInboxLoad";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Post<object>("/api/Alerts/alertsgroupinbox/load", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxLoad", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxLoadAsync(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxLoadWithHttpInfoAsync(startTicks, alertId, channelInstanceRefs, pageSize, isGrouped,
            filterSettingsDto, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxLoadWithHttpInfoAsync(string? startTicks = default,
        long? alertId = default, List<string>? channelInstanceRefs = default, int? pageSize = default,
        bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (startTicks != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startTicks", startTicks));
        if (alertId != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "alertId", alertId));
        if (channelInstanceRefs != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("multi", "channelInstanceRefs", channelInstanceRefs));
        if (pageSize != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
        if (isGrouped != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "isGrouped", isGrouped));
        localVarRequestOptions.Data = filterSettingsDto;

        localVarRequestOptions.Operation = "AlertInboxPagingApiApi.AlertsInboxLoad";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/load",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxLoad", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxMoveNewer(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0)
    {
        AlertsInboxMoveNewerWithHttpInfo(startTicks, alertId, channelInstanceRefs, pageSize, isGrouped,
            filterSettingsDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxMoveNewerWithHttpInfo(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (startTicks != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startTicks", startTicks));
        if (alertId != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "alertId", alertId));
        if (channelInstanceRefs != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("multi", "channelInstanceRefs", channelInstanceRefs));
        if (pageSize != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
        if (isGrouped != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "isGrouped", isGrouped));
        localVarRequestOptions.Data = filterSettingsDto;

        localVarRequestOptions.Operation = "AlertInboxPagingApiApi.AlertsInboxMoveNewer";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/moveNewer", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxMoveNewer", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxMoveNewerAsync(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxMoveNewerWithHttpInfoAsync(startTicks, alertId, channelInstanceRefs, pageSize, isGrouped,
            filterSettingsDto, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxMoveNewerWithHttpInfoAsync(string? startTicks = default,
        long? alertId = default, List<string>? channelInstanceRefs = default, int? pageSize = default,
        bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (startTicks != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startTicks", startTicks));
        if (alertId != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "alertId", alertId));
        if (channelInstanceRefs != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("multi", "channelInstanceRefs", channelInstanceRefs));
        if (pageSize != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
        if (isGrouped != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "isGrouped", isGrouped));
        localVarRequestOptions.Data = filterSettingsDto;

        localVarRequestOptions.Operation = "AlertInboxPagingApiApi.AlertsInboxMoveNewer";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/moveNewer",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxMoveNewer", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxMoveNewest(List<string>? channelInstanceRefs = default, int? pageSize = default,
        bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0)
    {
        AlertsInboxMoveNewestWithHttpInfo(channelInstanceRefs, pageSize, isGrouped, filterSettingsDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxMoveNewestWithHttpInfo(List<string>? channelInstanceRefs = default,
        int? pageSize = default, bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default,
        int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (channelInstanceRefs != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("multi", "channelInstanceRefs", channelInstanceRefs));
        if (pageSize != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
        if (isGrouped != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "isGrouped", isGrouped));
        localVarRequestOptions.Data = filterSettingsDto;

        localVarRequestOptions.Operation = "AlertInboxPagingApiApi.AlertsInboxMoveNewest";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/moveNewest", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxMoveNewest", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxMoveNewestAsync(List<string>? channelInstanceRefs = default, int? pageSize = default,
        bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxMoveNewestWithHttpInfoAsync(channelInstanceRefs, pageSize, isGrouped, filterSettingsDto,
            operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxMoveNewestWithHttpInfoAsync(
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (channelInstanceRefs != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("multi", "channelInstanceRefs", channelInstanceRefs));
        if (pageSize != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
        if (isGrouped != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "isGrouped", isGrouped));
        localVarRequestOptions.Data = filterSettingsDto;

        localVarRequestOptions.Operation = "AlertInboxPagingApiApi.AlertsInboxMoveNewest";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/moveNewest",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxMoveNewest", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxMoveOlder(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0)
    {
        AlertsInboxMoveOlderWithHttpInfo(startTicks, alertId, channelInstanceRefs, pageSize, isGrouped,
            filterSettingsDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxMoveOlderWithHttpInfo(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (startTicks != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startTicks", startTicks));
        if (alertId != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "alertId", alertId));
        if (channelInstanceRefs != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("multi", "channelInstanceRefs", channelInstanceRefs));
        if (pageSize != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
        if (isGrouped != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "isGrouped", isGrouped));
        localVarRequestOptions.Data = filterSettingsDto;

        localVarRequestOptions.Operation = "AlertInboxPagingApiApi.AlertsInboxMoveOlder";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/moveOlder", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxMoveOlder", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxMoveOlderAsync(string? startTicks = default, long? alertId = default,
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxMoveOlderWithHttpInfoAsync(startTicks, alertId, channelInstanceRefs, pageSize, isGrouped,
            filterSettingsDto, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="startTicks"> (optional)</param>
    /// <param name="alertId"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxMoveOlderWithHttpInfoAsync(string? startTicks = default,
        long? alertId = default, List<string>? channelInstanceRefs = default, int? pageSize = default,
        bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (startTicks != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startTicks", startTicks));
        if (alertId != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "alertId", alertId));
        if (channelInstanceRefs != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("multi", "channelInstanceRefs", channelInstanceRefs));
        if (pageSize != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
        if (isGrouped != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "isGrouped", isGrouped));
        localVarRequestOptions.Data = filterSettingsDto;

        localVarRequestOptions.Operation = "AlertInboxPagingApiApi.AlertsInboxMoveOlder";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/moveOlder",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxMoveOlder", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxMoveOldest(List<string>? channelInstanceRefs = default, int? pageSize = default,
        bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0)
    {
        AlertsInboxMoveOldestWithHttpInfo(channelInstanceRefs, pageSize, isGrouped, filterSettingsDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxMoveOldestWithHttpInfo(List<string>? channelInstanceRefs = default,
        int? pageSize = default, bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default,
        int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (channelInstanceRefs != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("multi", "channelInstanceRefs", channelInstanceRefs));
        if (pageSize != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
        if (isGrouped != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "isGrouped", isGrouped));
        localVarRequestOptions.Data = filterSettingsDto;

        localVarRequestOptions.Operation = "AlertInboxPagingApiApi.AlertsInboxMoveOldest";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/moveOldest", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxMoveOldest", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxMoveOldestAsync(List<string>? channelInstanceRefs = default, int? pageSize = default,
        bool? isGrouped = default, FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxMoveOldestWithHttpInfoAsync(channelInstanceRefs, pageSize, isGrouped, filterSettingsDto,
            operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="pageSize"> (optional, default to 10)</param>
    /// <param name="isGrouped"> (optional, default to true)</param>
    /// <param name="filterSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxMoveOldestWithHttpInfoAsync(
        List<string>? channelInstanceRefs = default, int? pageSize = default, bool? isGrouped = default,
        FilterSettingsDto? filterSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (channelInstanceRefs != null)
            localVarRequestOptions.QueryParameters.Add(
                ClientUtils.ParameterToMultiMap("multi", "channelInstanceRefs", channelInstanceRefs));
        if (pageSize != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
        if (isGrouped != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "isGrouped", isGrouped));
        localVarRequestOptions.Data = filterSettingsDto;

        localVarRequestOptions.Operation = "AlertInboxPagingApiApi.AlertsInboxMoveOldest";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/moveOldest",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxMoveOldest", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}