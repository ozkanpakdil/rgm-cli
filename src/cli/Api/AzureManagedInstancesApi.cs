/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Threading;
using System.Threading.Tasks;
using cli.Client;
using cli.Model;

namespace cli.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAzureManagedInstancesApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDelete(
        string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDeleteWithHttpInfo(
        string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGet(string azureManagedInstanceName,
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGetWithHttpInfo(
        string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGet(string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGetWithHttpInfo(string baseMonitorName,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="azureManagedInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePut(string instanceName, string baseMonitorName,
        AzureManagedInstanceDto? azureManagedInstanceDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="azureManagedInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePutWithHttpInfo(
        string instanceName, string baseMonitorName, AzureManagedInstanceDto? azureManagedInstanceDto = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AzureManagedInstanceDtoJSendSuccess</returns>
    AzureManagedInstanceDtoJSendSuccess ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPost(string baseMonitorName,
        AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AzureManagedInstanceDtoJSendSuccess</returns>
    ApiResponse<AzureManagedInstanceDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPostWithHttpInfo(string baseMonitorName,
            AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePost(string baseMonitorName,
        AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePostWithHttpInfo(
        string baseMonitorName, AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default,
        int operationIndex = 0);

    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAzureManagedInstancesApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDeleteAsync(
        string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDeleteWithHttpInfoAsync(
            string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGetAsync(
        string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGetWithHttpInfoAsync(
            string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGetAsync(string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGetWithHttpInfoAsync(
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="azureManagedInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePutAsync(string instanceName,
        string baseMonitorName, AzureManagedInstanceDto? azureManagedInstanceDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="azureManagedInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePutWithHttpInfoAsync(
        string instanceName, string baseMonitorName, AzureManagedInstanceDto? azureManagedInstanceDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AzureManagedInstanceDtoJSendSuccess</returns>
    Task<AzureManagedInstanceDtoJSendSuccess> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPostAsync(
        string baseMonitorName, AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AzureManagedInstanceDtoJSendSuccess)</returns>
    Task<ApiResponse<AzureManagedInstanceDtoJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPostWithHttpInfoAsync(string baseMonitorName,
            AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePostAsync(string baseMonitorName,
        AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePostWithHttpInfoAsync(
        string baseMonitorName, AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAzureManagedInstancesApi : IAzureManagedInstancesApiSync, IAzureManagedInstancesApiAsync
{
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class AzureManagedInstancesApi : IAzureManagedInstancesApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="AzureManagedInstancesApi" /> class.
    /// </summary>
    /// <returns></returns>
    public AzureManagedInstancesApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AzureManagedInstancesApi" /> class.
    /// </summary>
    /// <returns></returns>
    public AzureManagedInstancesApi(string basePath)
    {
        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AzureManagedInstancesApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public AzureManagedInstancesApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AzureManagedInstancesApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public AzureManagedInstancesApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDelete(
        string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDeleteWithHttpInfo(
            azureManagedInstanceName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDeleteWithHttpInfo(
            string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'azureManagedInstanceName' is set
        if (azureManagedInstanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'azureManagedInstanceName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDelete");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDelete");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("azureManagedInstanceName",
            ClientUtils.ParameterToString(azureManagedInstanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AzureManagedInstancesApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Delete<object>(
                "/api/basemonitors/{baseMonitorName}/azuremanagedinstances/{azureManagedInstanceName}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDelete",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDeleteAsync(
        string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDeleteWithHttpInfoAsync(
            azureManagedInstanceName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDeleteWithHttpInfoAsync(
            string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'azureManagedInstanceName' is set
        if (azureManagedInstanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'azureManagedInstanceName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDelete");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDelete");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("azureManagedInstanceName",
            ClientUtils.ParameterToString(azureManagedInstanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AzureManagedInstancesApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .DeleteAsync<object>("/api/basemonitors/{baseMonitorName}/azuremanagedinstances/{azureManagedInstanceName}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameDelete",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGet(
        string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGetWithHttpInfo(
            azureManagedInstanceName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGetWithHttpInfo(
            string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'azureManagedInstanceName' is set
        if (azureManagedInstanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'azureManagedInstanceName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("azureManagedInstanceName",
            ClientUtils.ParameterToString(azureManagedInstanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AzureManagedInstancesApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>("/api/basemonitors/{baseMonitorName}/azuremanagedinstances/{azureManagedInstanceName}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGetAsync(
        string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGetWithHttpInfoAsync(
            azureManagedInstanceName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureManagedInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGetWithHttpInfoAsync(
            string azureManagedInstanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'azureManagedInstanceName' is set
        if (azureManagedInstanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'azureManagedInstanceName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("azureManagedInstanceName",
            ClientUtils.ParameterToString(azureManagedInstanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AzureManagedInstancesApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>("/api/basemonitors/{baseMonitorName}/azuremanagedinstances/{azureManagedInstanceName}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesAzureManagedInstanceNameGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGet(string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGetWithHttpInfo(baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGetWithHttpInfo(
        string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AzureManagedInstancesApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<object>("/api/basemonitors/{baseMonitorName}/azuremanagedinstances",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGet", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGetAsync(string baseMonitorName,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGetWithHttpInfoAsync(baseMonitorName, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGetWithHttpInfoAsync(
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AzureManagedInstancesApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>("/api/basemonitors/{baseMonitorName}/azuremanagedinstances", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesGet", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="azureManagedInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePut(string instanceName,
        string baseMonitorName, AzureManagedInstanceDto? azureManagedInstanceDto = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePutWithHttpInfo(instanceName, baseMonitorName,
            azureManagedInstanceDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="azureManagedInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePutWithHttpInfo(
        string instanceName, string baseMonitorName, AzureManagedInstanceDto? azureManagedInstanceDto = default,
        int operationIndex = 0)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = azureManagedInstanceDto;

        localVarRequestOptions.Operation =
            "AzureManagedInstancesApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>("/api/basemonitors/{baseMonitorName}/azuremanagedinstances/{instanceName}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="azureManagedInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePutAsync(string instanceName,
        string baseMonitorName, AzureManagedInstanceDto? azureManagedInstanceDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePutWithHttpInfoAsync(instanceName,
            baseMonitorName, azureManagedInstanceDto, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="azureManagedInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePutWithHttpInfoAsync(string instanceName,
            string baseMonitorName, AzureManagedInstanceDto? azureManagedInstanceDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = azureManagedInstanceDto;

        localVarRequestOptions.Operation =
            "AzureManagedInstancesApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>("/api/basemonitors/{baseMonitorName}/azuremanagedinstances/{instanceName}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNamePut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AzureManagedInstanceDtoJSendSuccess</returns>
    public AzureManagedInstanceDtoJSendSuccess ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPost(
        string baseMonitorName, AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default,
        int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPostWithHttpInfo(baseMonitorName,
                addAzureManagedInstanceCommandDto);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AzureManagedInstanceDtoJSendSuccess</returns>
    public ApiResponse<AzureManagedInstanceDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPostWithHttpInfo(string baseMonitorName,
            AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default, int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = addAzureManagedInstanceCommandDto;

        localVarRequestOptions.Operation =
            "AzureManagedInstancesApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<AzureManagedInstanceDtoJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/azuremanagedinstances", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPost",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AzureManagedInstanceDtoJSendSuccess</returns>
    public async Task<AzureManagedInstanceDtoJSendSuccess> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPostAsync(
        string baseMonitorName, AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPostWithHttpInfoAsync(baseMonitorName,
                addAzureManagedInstanceCommandDto, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AzureManagedInstanceDtoJSendSuccess)</returns>
    public async Task<ApiResponse<AzureManagedInstanceDtoJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPostWithHttpInfoAsync(string baseMonitorName,
            AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = addAzureManagedInstanceCommandDto;

        localVarRequestOptions.Operation =
            "AzureManagedInstancesApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<AzureManagedInstanceDtoJSendSuccess>("/api/basemonitors/{baseMonitorName}/azuremanagedinstances",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesPost",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePost(string baseMonitorName,
        AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePostWithHttpInfo(baseMonitorName,
            addAzureManagedInstanceCommandDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePostWithHttpInfo(
        string baseMonitorName, AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default,
        int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = addAzureManagedInstanceCommandDto;

        localVarRequestOptions.Operation =
            "AzureManagedInstancesApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/basemonitors/{baseMonitorName}/azuremanagedinstances/validate",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePost",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePostAsync(string baseMonitorName,
        AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePostWithHttpInfoAsync(baseMonitorName,
            addAzureManagedInstanceCommandDto, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAzureManagedInstanceCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePostWithHttpInfoAsync(string baseMonitorName,
            AddAzureManagedInstanceCommandDto? addAzureManagedInstanceCommandDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AzureManagedInstancesApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = addAzureManagedInstanceCommandDto;

        localVarRequestOptions.Operation =
            "AzureManagedInstancesApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<object>("/api/basemonitors/{baseMonitorName}/azuremanagedinstances/validate",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesValidatePost",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}