/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Threading;
using System.Threading.Tasks;
using cli.Client;
using cli.Model;

namespace cli.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAmazonRdsSqlServersApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDelete(string amazonRdsSqlServerName,
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDeleteWithHttpInfo(
        string amazonRdsSqlServerName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGet(string amazonRdsSqlServerName,
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGetWithHttpInfo(
        string amazonRdsSqlServerName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteAmazonApiCredentialsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDelete(string baseMonitorName,
        DeleteAmazonApiCredentialsRequest? deleteAmazonApiCredentialsRequest = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteAmazonApiCredentialsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDeleteWithHttpInfo(
        string baseMonitorName, DeleteAmazonApiCredentialsRequest? deleteAmazonApiCredentialsRequest = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="updateAmazonRdsSqlServerRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>JSendSuccess</returns>
    JSendSuccess ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatch(string baseMonitorName,
        UpdateAmazonRdsSqlServerRequest? updateAmazonRdsSqlServerRequest = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="updateAmazonRdsSqlServerRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of JSendSuccess</returns>
    ApiResponse<JSendSuccess> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatchWithHttpInfo(
        string baseMonitorName, UpdateAmazonRdsSqlServerRequest? updateAmazonRdsSqlServerRequest = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGet(string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGetWithHttpInfo(string baseMonitorName,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="amazonRdsSqlServerDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePut(string instanceName, string baseMonitorName,
        AmazonRdsSqlServerDto? amazonRdsSqlServerDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="amazonRdsSqlServerDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePutWithHttpInfo(
        string instanceName, string baseMonitorName, AmazonRdsSqlServerDto? amazonRdsSqlServerDto = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AmazonRdsSqlServerDtoJSendSuccess</returns>
    AmazonRdsSqlServerDtoJSendSuccess ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPost(string baseMonitorName,
        AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AmazonRdsSqlServerDtoJSendSuccess</returns>
    ApiResponse<AmazonRdsSqlServerDtoJSendSuccess> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPostWithHttpInfo(
        string baseMonitorName, AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPost(string baseMonitorName,
        AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPostWithHttpInfo(string baseMonitorName,
        AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePost(string baseMonitorName,
        AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePostWithHttpInfo(
        string baseMonitorName, AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default,
        int operationIndex = 0);

    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAmazonRdsSqlServersApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDeleteAsync(
        string amazonRdsSqlServerName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDeleteWithHttpInfoAsync(
            string amazonRdsSqlServerName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGetAsync(string amazonRdsSqlServerName,
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGetWithHttpInfoAsync(
            string amazonRdsSqlServerName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteAmazonApiCredentialsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDeleteAsync(string baseMonitorName,
        DeleteAmazonApiCredentialsRequest? deleteAmazonApiCredentialsRequest = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteAmazonApiCredentialsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDeleteWithHttpInfoAsync(
            string baseMonitorName,
            DeleteAmazonApiCredentialsRequest? deleteAmazonApiCredentialsRequest = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="updateAmazonRdsSqlServerRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of JSendSuccess</returns>
    Task<JSendSuccess> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatchAsync(string baseMonitorName,
        UpdateAmazonRdsSqlServerRequest? updateAmazonRdsSqlServerRequest = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="updateAmazonRdsSqlServerRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (JSendSuccess)</returns>
    Task<ApiResponse<JSendSuccess>> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatchWithHttpInfoAsync(
        string baseMonitorName, UpdateAmazonRdsSqlServerRequest? updateAmazonRdsSqlServerRequest = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGetAsync(string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGetWithHttpInfoAsync(
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="amazonRdsSqlServerDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePutAsync(string instanceName,
        string baseMonitorName, AmazonRdsSqlServerDto? amazonRdsSqlServerDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="amazonRdsSqlServerDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePutWithHttpInfoAsync(
        string instanceName, string baseMonitorName, AmazonRdsSqlServerDto? amazonRdsSqlServerDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AmazonRdsSqlServerDtoJSendSuccess</returns>
    Task<AmazonRdsSqlServerDtoJSendSuccess> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPostAsync(
        string baseMonitorName, AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AmazonRdsSqlServerDtoJSendSuccess)</returns>
    Task<ApiResponse<AmazonRdsSqlServerDtoJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPostWithHttpInfoAsync(string baseMonitorName,
            AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPostAsync(string baseMonitorName,
        AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPostWithHttpInfoAsync(
        string baseMonitorName, AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePostAsync(string baseMonitorName,
        AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePostWithHttpInfoAsync(
        string baseMonitorName, AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAmazonRdsSqlServersApi : IAmazonRdsSqlServersApiSync, IAmazonRdsSqlServersApiAsync
{
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class AmazonRdsSqlServersApi : IAmazonRdsSqlServersApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="AmazonRdsSqlServersApi" /> class.
    /// </summary>
    /// <returns></returns>
    public AmazonRdsSqlServersApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AmazonRdsSqlServersApi" /> class.
    /// </summary>
    /// <returns></returns>
    public AmazonRdsSqlServersApi(string basePath)
    {
        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AmazonRdsSqlServersApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public AmazonRdsSqlServersApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AmazonRdsSqlServersApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public AmazonRdsSqlServersApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDelete(
        string amazonRdsSqlServerName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDeleteWithHttpInfo(
            amazonRdsSqlServerName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDeleteWithHttpInfo(
            string amazonRdsSqlServerName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'amazonRdsSqlServerName' is set
        if (amazonRdsSqlServerName == null)
            throw new ApiException(400,
                "Missing required parameter 'amazonRdsSqlServerName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDelete");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDelete");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("amazonRdsSqlServerName",
            ClientUtils.ParameterToString(amazonRdsSqlServerName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Delete<object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/{amazonRdsSqlServerName}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDelete",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDeleteAsync(
        string amazonRdsSqlServerName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDeleteWithHttpInfoAsync(
            amazonRdsSqlServerName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDeleteWithHttpInfoAsync(
            string amazonRdsSqlServerName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'amazonRdsSqlServerName' is set
        if (amazonRdsSqlServerName == null)
            throw new ApiException(400,
                "Missing required parameter 'amazonRdsSqlServerName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDelete");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDelete");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("amazonRdsSqlServerName",
            ClientUtils.ParameterToString(amazonRdsSqlServerName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .DeleteAsync<object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/{amazonRdsSqlServerName}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameDelete",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGet(
        string amazonRdsSqlServerName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGetWithHttpInfo(amazonRdsSqlServerName,
            baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGetWithHttpInfo(
        string amazonRdsSqlServerName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'amazonRdsSqlServerName' is set
        if (amazonRdsSqlServerName == null)
            throw new ApiException(400,
                "Missing required parameter 'amazonRdsSqlServerName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("amazonRdsSqlServerName",
            ClientUtils.ParameterToString(amazonRdsSqlServerName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/{amazonRdsSqlServerName}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGetAsync(
        string amazonRdsSqlServerName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGetWithHttpInfoAsync(
            amazonRdsSqlServerName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsSqlServerName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGetWithHttpInfoAsync(
            string amazonRdsSqlServerName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'amazonRdsSqlServerName' is set
        if (amazonRdsSqlServerName == null)
            throw new ApiException(400,
                "Missing required parameter 'amazonRdsSqlServerName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("amazonRdsSqlServerName",
            ClientUtils.ParameterToString(amazonRdsSqlServerName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/{amazonRdsSqlServerName}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversAmazonRdsSqlServerNameGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteAmazonApiCredentialsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDelete(string baseMonitorName,
        DeleteAmazonApiCredentialsRequest? deleteAmazonApiCredentialsRequest = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDeleteWithHttpInfo(baseMonitorName,
            deleteAmazonApiCredentialsRequest);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteAmazonApiCredentialsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDeleteWithHttpInfo(
        string baseMonitorName, DeleteAmazonApiCredentialsRequest? deleteAmazonApiCredentialsRequest = default,
        int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDelete");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = deleteAmazonApiCredentialsRequest;

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Delete<object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/credentials/amazonapi",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDelete",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteAmazonApiCredentialsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDeleteAsync(
        string baseMonitorName, DeleteAmazonApiCredentialsRequest? deleteAmazonApiCredentialsRequest = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDeleteWithHttpInfoAsync(
                baseMonitorName, deleteAmazonApiCredentialsRequest, operationIndex, cancellationToken)
            .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteAmazonApiCredentialsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDeleteWithHttpInfoAsync(
            string baseMonitorName,
            DeleteAmazonApiCredentialsRequest? deleteAmazonApiCredentialsRequest = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDelete");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = deleteAmazonApiCredentialsRequest;

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .DeleteAsync<object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/credentials/amazonapi",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsAmazonapiDelete",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="updateAmazonRdsSqlServerRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>JSendSuccess</returns>
    public JSendSuccess ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatch(string baseMonitorName,
        UpdateAmazonRdsSqlServerRequest? updateAmazonRdsSqlServerRequest = default, int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatchWithHttpInfo(baseMonitorName,
                updateAmazonRdsSqlServerRequest);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="updateAmazonRdsSqlServerRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of JSendSuccess</returns>
    public ApiResponse<JSendSuccess> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatchWithHttpInfo(
        string baseMonitorName, UpdateAmazonRdsSqlServerRequest? updateAmazonRdsSqlServerRequest = default,
        int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = updateAmazonRdsSqlServerRequest;

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Patch<JSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/credentials", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatch",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="updateAmazonRdsSqlServerRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of JSendSuccess</returns>
    public async Task<JSendSuccess> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatchAsync(
        string baseMonitorName, UpdateAmazonRdsSqlServerRequest? updateAmazonRdsSqlServerRequest = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatchWithHttpInfoAsync(baseMonitorName,
                updateAmazonRdsSqlServerRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="updateAmazonRdsSqlServerRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (JSendSuccess)</returns>
    public async Task<ApiResponse<JSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatchWithHttpInfoAsync(string baseMonitorName,
            UpdateAmazonRdsSqlServerRequest? updateAmazonRdsSqlServerRequest = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = updateAmazonRdsSqlServerRequest;

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<JSendSuccess>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/credentials",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversCredentialsPatch",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGet(string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGetWithHttpInfo(baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGetWithHttpInfo(string baseMonitorName,
        int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGet", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGetAsync(string baseMonitorName,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGetWithHttpInfoAsync(baseMonitorName, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGetWithHttpInfoAsync(
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversGet", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="amazonRdsSqlServerDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePut(string instanceName,
        string baseMonitorName, AmazonRdsSqlServerDto? amazonRdsSqlServerDto = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePutWithHttpInfo(instanceName, baseMonitorName,
            amazonRdsSqlServerDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="amazonRdsSqlServerDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePutWithHttpInfo(
        string instanceName, string baseMonitorName, AmazonRdsSqlServerDto? amazonRdsSqlServerDto = default,
        int operationIndex = 0)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = amazonRdsSqlServerDto;

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/{instanceName}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="amazonRdsSqlServerDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePutAsync(string instanceName,
        string baseMonitorName, AmazonRdsSqlServerDto? amazonRdsSqlServerDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePutWithHttpInfoAsync(instanceName,
            baseMonitorName, amazonRdsSqlServerDto, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="amazonRdsSqlServerDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePutWithHttpInfoAsync(string instanceName,
            string baseMonitorName, AmazonRdsSqlServerDto? amazonRdsSqlServerDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = amazonRdsSqlServerDto;

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/{instanceName}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversInstanceNamePut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AmazonRdsSqlServerDtoJSendSuccess</returns>
    public AmazonRdsSqlServerDtoJSendSuccess ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPost(
        string baseMonitorName, AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default,
        int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPostWithHttpInfo(baseMonitorName,
                addAmazonRdsSqlServerCommandDto);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AmazonRdsSqlServerDtoJSendSuccess</returns>
    public ApiResponse<AmazonRdsSqlServerDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPostWithHttpInfo(string baseMonitorName,
            AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default, int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = addAmazonRdsSqlServerCommandDto;

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<AmazonRdsSqlServerDtoJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/amazonrdssqlservers", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AmazonRdsSqlServerDtoJSendSuccess</returns>
    public async Task<AmazonRdsSqlServerDtoJSendSuccess> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPostAsync(
        string baseMonitorName, AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPostWithHttpInfoAsync(baseMonitorName,
                addAmazonRdsSqlServerCommandDto, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AmazonRdsSqlServerDtoJSendSuccess)</returns>
    public async Task<ApiResponse<AmazonRdsSqlServerDtoJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPostWithHttpInfoAsync(string baseMonitorName,
            AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = addAmazonRdsSqlServerCommandDto;

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<AmazonRdsSqlServerDtoJSendSuccess>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPost(string baseMonitorName,
        AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPostWithHttpInfo(baseMonitorName,
            addAmazonRdsSqlServerCommandDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPostWithHttpInfo(
        string baseMonitorName, AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default,
        int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = addAmazonRdsSqlServerCommandDto;

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/test",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPost",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPostAsync(string baseMonitorName,
        AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPostWithHttpInfoAsync(baseMonitorName,
            addAmazonRdsSqlServerCommandDto, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPostWithHttpInfoAsync(
        string baseMonitorName, AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = addAmazonRdsSqlServerCommandDto;

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/test", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversTestPost",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePost(string baseMonitorName,
        AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePostWithHttpInfo(baseMonitorName,
            addAmazonRdsSqlServerCommandDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePostWithHttpInfo(
        string baseMonitorName, AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default,
        int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = addAmazonRdsSqlServerCommandDto;

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/validate",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePost",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePostAsync(string baseMonitorName,
        AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePostWithHttpInfoAsync(baseMonitorName,
            addAmazonRdsSqlServerCommandDto, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addAmazonRdsSqlServerCommandDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePostWithHttpInfoAsync(string baseMonitorName,
            AddAmazonRdsSqlServerCommandDto? addAmazonRdsSqlServerCommandDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AmazonRdsSqlServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = addAmazonRdsSqlServerCommandDto;

        localVarRequestOptions.Operation =
            "AmazonRdsSqlServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/validate",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversValidatePost",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}