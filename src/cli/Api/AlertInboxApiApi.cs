/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using cli.Client;
using cli.Model;

namespace cli.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlertInboxApiApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AlertsInboxAddAlertComment(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsInboxAddAlertCommentWithHttpInfo(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AlertsInboxAddGroupComment(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsInboxAddGroupCommentWithHttpInfo(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AlertsInboxClear(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsInboxClearWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AlertsInboxClearAlert(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsInboxClearAlertWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool AlertsInboxDeleteCustomFilter(string? name = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> AlertsInboxDeleteCustomFilterWithHttpInfo(string? name = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AlertsInboxRead(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsInboxReadWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AlertsInboxReadAlert(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsInboxReadAlertWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="timeRangeType"> (optional)</param>
        /// <param name="timeRangeRelativeMinutes"> (optional)</param>
        /// <param name="timeRangeFromDateTime"> (optional)</param>
        /// <param name="timeRangeToDateTime"> (optional)</param>
        /// <param name="timeRangeTimeWindowMode"> (optional)</param>
        /// <param name="includeStatusSeverityHigh"> (optional)</param>
        /// <param name="includeStatusSeverityMedium"> (optional)</param>
        /// <param name="includeStatusSeverityLow"> (optional)</param>
        /// <param name="includeStatusReadYes"> (optional)</param>
        /// <param name="includeStatusReadNo"> (optional)</param>
        /// <param name="includeStatusClearedYes"> (optional)</param>
        /// <param name="includeStatusClearedNo"> (optional)</param>
        /// <param name="includeStatusStatusEvent"> (optional)</param>
        /// <param name="includeStatusStatusActive"> (optional)</param>
        /// <param name="includeStatusStatusEnded"> (optional)</param>
        /// <param name="includeStatusCommentYes"> (optional)</param>
        /// <param name="includeStatusCommentNo"> (optional)</param>
        /// <param name="includeAlertTypeIds"> (optional)</param>
        /// <param name="selectedTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AlertsInboxSaveCustomFilter(string? name = default(string?), AlertsFilterTimeRangeTypeDto? timeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? timeRangeRelativeMinutes = default(int?), long? timeRangeFromDateTime = default(long?), long? timeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? includeStatusSeverityHigh = default(bool?), bool? includeStatusSeverityMedium = default(bool?), bool? includeStatusSeverityLow = default(bool?), bool? includeStatusReadYes = default(bool?), bool? includeStatusReadNo = default(bool?), bool? includeStatusClearedYes = default(bool?), bool? includeStatusClearedNo = default(bool?), bool? includeStatusStatusEvent = default(bool?), bool? includeStatusStatusActive = default(bool?), bool? includeStatusStatusEnded = default(bool?), bool? includeStatusCommentYes = default(bool?), bool? includeStatusCommentNo = default(bool?), List<string>? includeAlertTypeIds = default(List<string>?), List<TagDto>? selectedTags = default(List<TagDto>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="timeRangeType"> (optional)</param>
        /// <param name="timeRangeRelativeMinutes"> (optional)</param>
        /// <param name="timeRangeFromDateTime"> (optional)</param>
        /// <param name="timeRangeToDateTime"> (optional)</param>
        /// <param name="timeRangeTimeWindowMode"> (optional)</param>
        /// <param name="includeStatusSeverityHigh"> (optional)</param>
        /// <param name="includeStatusSeverityMedium"> (optional)</param>
        /// <param name="includeStatusSeverityLow"> (optional)</param>
        /// <param name="includeStatusReadYes"> (optional)</param>
        /// <param name="includeStatusReadNo"> (optional)</param>
        /// <param name="includeStatusClearedYes"> (optional)</param>
        /// <param name="includeStatusClearedNo"> (optional)</param>
        /// <param name="includeStatusStatusEvent"> (optional)</param>
        /// <param name="includeStatusStatusActive"> (optional)</param>
        /// <param name="includeStatusStatusEnded"> (optional)</param>
        /// <param name="includeStatusCommentYes"> (optional)</param>
        /// <param name="includeStatusCommentNo"> (optional)</param>
        /// <param name="includeAlertTypeIds"> (optional)</param>
        /// <param name="selectedTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsInboxSaveCustomFilterWithHttpInfo(string? name = default(string?), AlertsFilterTimeRangeTypeDto? timeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? timeRangeRelativeMinutes = default(int?), long? timeRangeFromDateTime = default(long?), long? timeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? includeStatusSeverityHigh = default(bool?), bool? includeStatusSeverityMedium = default(bool?), bool? includeStatusSeverityLow = default(bool?), bool? includeStatusReadYes = default(bool?), bool? includeStatusReadNo = default(bool?), bool? includeStatusClearedYes = default(bool?), bool? includeStatusClearedNo = default(bool?), bool? includeStatusStatusEvent = default(bool?), bool? includeStatusStatusActive = default(bool?), bool? includeStatusStatusEnded = default(bool?), bool? includeStatusCommentYes = default(bool?), bool? includeStatusCommentNo = default(bool?), List<string>? includeAlertTypeIds = default(List<string>?), List<TagDto>? selectedTags = default(List<TagDto>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AlertsInboxUnclear(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsInboxUnclearWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AlertsInboxUnclearAlert(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsInboxUnclearAlertWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AlertsInboxUnread(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsInboxUnreadWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AlertsInboxUnreadAlert(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AlertsInboxUnreadAlertWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiAlertsAlertsgroupinboxClearalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAlertsAlertsgroupinboxClearalertjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiAlertsAlertsgroupinboxClearjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAlertsAlertsgroupinboxClearjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPost(string? name = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostWithHttpInfo(string? name = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiAlertsAlertsgroupinboxReadalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAlertsAlertsgroupinboxReadalertjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiAlertsAlertsgroupinboxReadjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAlertsAlertsgroupinboxReadjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSettingsDto"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost(FilterSettingsDto filterSettingsDto, string? name = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSettingsDto"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostWithHttpInfo(FilterSettingsDto filterSettingsDto, string? name = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiAlertsAlertsgroupinboxUnclearalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAlertsAlertsgroupinboxUnclearalertjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiAlertsAlertsgroupinboxUnclearjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAlertsAlertsgroupinboxUnclearjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiAlertsAlertsgroupinboxUnreadalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAlertsAlertsgroupinboxUnreadalertjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiAlertsAlertsgroupinboxUnreadjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiAlertsAlertsgroupinboxUnreadjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlertInboxApiApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsInboxAddAlertCommentAsync(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsInboxAddAlertCommentWithHttpInfoAsync(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsInboxAddGroupCommentAsync(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsInboxAddGroupCommentWithHttpInfoAsync(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsInboxClearAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsInboxClearWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsInboxClearAlertAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsInboxClearAlertWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> AlertsInboxDeleteCustomFilterAsync(string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> AlertsInboxDeleteCustomFilterWithHttpInfoAsync(string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsInboxReadAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsInboxReadWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsInboxReadAlertAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsInboxReadAlertWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="timeRangeType"> (optional)</param>
        /// <param name="timeRangeRelativeMinutes"> (optional)</param>
        /// <param name="timeRangeFromDateTime"> (optional)</param>
        /// <param name="timeRangeToDateTime"> (optional)</param>
        /// <param name="timeRangeTimeWindowMode"> (optional)</param>
        /// <param name="includeStatusSeverityHigh"> (optional)</param>
        /// <param name="includeStatusSeverityMedium"> (optional)</param>
        /// <param name="includeStatusSeverityLow"> (optional)</param>
        /// <param name="includeStatusReadYes"> (optional)</param>
        /// <param name="includeStatusReadNo"> (optional)</param>
        /// <param name="includeStatusClearedYes"> (optional)</param>
        /// <param name="includeStatusClearedNo"> (optional)</param>
        /// <param name="includeStatusStatusEvent"> (optional)</param>
        /// <param name="includeStatusStatusActive"> (optional)</param>
        /// <param name="includeStatusStatusEnded"> (optional)</param>
        /// <param name="includeStatusCommentYes"> (optional)</param>
        /// <param name="includeStatusCommentNo"> (optional)</param>
        /// <param name="includeAlertTypeIds"> (optional)</param>
        /// <param name="selectedTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsInboxSaveCustomFilterAsync(string? name = default(string?), AlertsFilterTimeRangeTypeDto? timeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? timeRangeRelativeMinutes = default(int?), long? timeRangeFromDateTime = default(long?), long? timeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? includeStatusSeverityHigh = default(bool?), bool? includeStatusSeverityMedium = default(bool?), bool? includeStatusSeverityLow = default(bool?), bool? includeStatusReadYes = default(bool?), bool? includeStatusReadNo = default(bool?), bool? includeStatusClearedYes = default(bool?), bool? includeStatusClearedNo = default(bool?), bool? includeStatusStatusEvent = default(bool?), bool? includeStatusStatusActive = default(bool?), bool? includeStatusStatusEnded = default(bool?), bool? includeStatusCommentYes = default(bool?), bool? includeStatusCommentNo = default(bool?), List<string>? includeAlertTypeIds = default(List<string>?), List<TagDto>? selectedTags = default(List<TagDto>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="timeRangeType"> (optional)</param>
        /// <param name="timeRangeRelativeMinutes"> (optional)</param>
        /// <param name="timeRangeFromDateTime"> (optional)</param>
        /// <param name="timeRangeToDateTime"> (optional)</param>
        /// <param name="timeRangeTimeWindowMode"> (optional)</param>
        /// <param name="includeStatusSeverityHigh"> (optional)</param>
        /// <param name="includeStatusSeverityMedium"> (optional)</param>
        /// <param name="includeStatusSeverityLow"> (optional)</param>
        /// <param name="includeStatusReadYes"> (optional)</param>
        /// <param name="includeStatusReadNo"> (optional)</param>
        /// <param name="includeStatusClearedYes"> (optional)</param>
        /// <param name="includeStatusClearedNo"> (optional)</param>
        /// <param name="includeStatusStatusEvent"> (optional)</param>
        /// <param name="includeStatusStatusActive"> (optional)</param>
        /// <param name="includeStatusStatusEnded"> (optional)</param>
        /// <param name="includeStatusCommentYes"> (optional)</param>
        /// <param name="includeStatusCommentNo"> (optional)</param>
        /// <param name="includeAlertTypeIds"> (optional)</param>
        /// <param name="selectedTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsInboxSaveCustomFilterWithHttpInfoAsync(string? name = default(string?), AlertsFilterTimeRangeTypeDto? timeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? timeRangeRelativeMinutes = default(int?), long? timeRangeFromDateTime = default(long?), long? timeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? includeStatusSeverityHigh = default(bool?), bool? includeStatusSeverityMedium = default(bool?), bool? includeStatusSeverityLow = default(bool?), bool? includeStatusReadYes = default(bool?), bool? includeStatusReadNo = default(bool?), bool? includeStatusClearedYes = default(bool?), bool? includeStatusClearedNo = default(bool?), bool? includeStatusStatusEvent = default(bool?), bool? includeStatusStatusActive = default(bool?), bool? includeStatusStatusEnded = default(bool?), bool? includeStatusCommentYes = default(bool?), bool? includeStatusCommentNo = default(bool?), List<string>? includeAlertTypeIds = default(List<string>?), List<TagDto>? selectedTags = default(List<TagDto>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsInboxUnclearAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsInboxUnclearWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsInboxUnclearAlertAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsInboxUnclearAlertWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsInboxUnreadAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsInboxUnreadWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AlertsInboxUnreadAlertAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AlertsInboxUnreadAlertWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxClearalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAlertsAlertsgroupinboxClearalertjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxClearjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAlertsAlertsgroupinboxClearjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostAsync(string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostWithHttpInfoAsync(string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxReadalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAlertsAlertsgroupinboxReadalertjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxReadjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAlertsAlertsgroupinboxReadjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSettingsDto"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostAsync(FilterSettingsDto filterSettingsDto, string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSettingsDto"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostWithHttpInfoAsync(FilterSettingsDto filterSettingsDto, string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxUnclearalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAlertsAlertsgroupinboxUnclearalertjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxUnclearjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAlertsAlertsgroupinboxUnclearjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxUnreadalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAlertsAlertsgroupinboxUnreadalertjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxUnreadjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiAlertsAlertsgroupinboxUnreadjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlertInboxApiApi : IAlertInboxApiApiSync, IAlertInboxApiApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AlertInboxApiApi : IAlertInboxApiApi
    {
        private cli.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertInboxApiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlertInboxApiApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertInboxApiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlertInboxApiApi(string basePath)
        {
            this.Configuration = cli.Client.Configuration.MergeConfigurations(
                cli.Client.GlobalConfiguration.Instance,
                new cli.Client.Configuration { BasePath = basePath }
            );
            this.Client = new cli.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cli.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertInboxApiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AlertInboxApiApi(cli.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = cli.Client.Configuration.MergeConfigurations(
                cli.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new cli.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cli.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertInboxApiApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AlertInboxApiApi(cli.Client.ISynchronousClient client, cli.Client.IAsynchronousClient asyncClient, cli.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public cli.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public cli.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public cli.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public cli.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AlertsInboxAddAlertComment(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            AlertsInboxAddAlertCommentWithHttpInfo(author, comment, lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> AlertsInboxAddAlertCommentWithHttpInfo(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedGroupIds) : cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedAlertIds) : cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeType) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds) : cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsSelectedTags) : cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(channelInstanceRefs) : cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxAddAlertComment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/add-alert-comment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxAddAlertComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsInboxAddAlertCommentAsync(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AlertsInboxAddAlertCommentWithHttpInfoAsync(author, comment, lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> AlertsInboxAddAlertCommentWithHttpInfoAsync(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxAddAlertComment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/add-alert-comment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxAddAlertComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AlertsInboxAddGroupComment(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            AlertsInboxAddGroupCommentWithHttpInfo(author, comment, lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> AlertsInboxAddGroupCommentWithHttpInfo(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedGroupIds) : cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedAlertIds) : cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeType) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds) : cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsSelectedTags) : cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(channelInstanceRefs) : cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxAddGroupComment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/add-group-comment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxAddGroupComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsInboxAddGroupCommentAsync(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AlertsInboxAddGroupCommentWithHttpInfoAsync(author, comment, lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> AlertsInboxAddGroupCommentWithHttpInfoAsync(string? author = default(string?), string? comment = default(string?), string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxAddGroupComment";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/add-group-comment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxAddGroupComment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AlertsInboxClear(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            AlertsInboxClearWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> AlertsInboxClearWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedGroupIds) : cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedAlertIds) : cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeType) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds) : cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsSelectedTags) : cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(channelInstanceRefs) : cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxClear";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/clear", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxClear", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsInboxClearAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AlertsInboxClearWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> AlertsInboxClearWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxClear";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/clear", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxClear", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AlertsInboxClearAlert(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            AlertsInboxClearAlertWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> AlertsInboxClearAlertWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedGroupIds) : cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedAlertIds) : cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeType) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds) : cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsSelectedTags) : cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(channelInstanceRefs) : cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxClearAlert";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/clearalert", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxClearAlert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsInboxClearAlertAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AlertsInboxClearAlertWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> AlertsInboxClearAlertWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxClearAlert";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/clearalert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxClearAlert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool AlertsInboxDeleteCustomFilter(string? name = default(string?), int operationIndex = 0)
        {
            cli.Client.ApiResponse<bool> localVarResponse = AlertsInboxDeleteCustomFilterWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public cli.Client.ApiResponse<bool> AlertsInboxDeleteCustomFilterWithHttpInfo(string? name = default(string?), int operationIndex = 0)
        {
            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxDeleteCustomFilter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<bool>("/api/Alerts/alertsgroupinbox/deletecustomfilter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxDeleteCustomFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> AlertsInboxDeleteCustomFilterAsync(string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            cli.Client.ApiResponse<bool> localVarResponse = await AlertsInboxDeleteCustomFilterWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<bool>> AlertsInboxDeleteCustomFilterWithHttpInfoAsync(string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxDeleteCustomFilter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<bool>("/api/Alerts/alertsgroupinbox/deletecustomfilter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxDeleteCustomFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AlertsInboxRead(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            AlertsInboxReadWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> AlertsInboxReadWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedGroupIds) : cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedAlertIds) : cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeType) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds) : cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsSelectedTags) : cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(channelInstanceRefs) : cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxRead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/read", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsInboxReadAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AlertsInboxReadWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> AlertsInboxReadWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxRead";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/read", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxRead", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AlertsInboxReadAlert(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            AlertsInboxReadAlertWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> AlertsInboxReadAlertWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedGroupIds) : cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedAlertIds) : cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeType) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds) : cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsSelectedTags) : cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(channelInstanceRefs) : cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxReadAlert";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/readalert", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxReadAlert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsInboxReadAlertAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AlertsInboxReadAlertWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> AlertsInboxReadAlertWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxReadAlert";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/readalert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxReadAlert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="timeRangeType"> (optional)</param>
        /// <param name="timeRangeRelativeMinutes"> (optional)</param>
        /// <param name="timeRangeFromDateTime"> (optional)</param>
        /// <param name="timeRangeToDateTime"> (optional)</param>
        /// <param name="timeRangeTimeWindowMode"> (optional)</param>
        /// <param name="includeStatusSeverityHigh"> (optional)</param>
        /// <param name="includeStatusSeverityMedium"> (optional)</param>
        /// <param name="includeStatusSeverityLow"> (optional)</param>
        /// <param name="includeStatusReadYes"> (optional)</param>
        /// <param name="includeStatusReadNo"> (optional)</param>
        /// <param name="includeStatusClearedYes"> (optional)</param>
        /// <param name="includeStatusClearedNo"> (optional)</param>
        /// <param name="includeStatusStatusEvent"> (optional)</param>
        /// <param name="includeStatusStatusActive"> (optional)</param>
        /// <param name="includeStatusStatusEnded"> (optional)</param>
        /// <param name="includeStatusCommentYes"> (optional)</param>
        /// <param name="includeStatusCommentNo"> (optional)</param>
        /// <param name="includeAlertTypeIds"> (optional)</param>
        /// <param name="selectedTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AlertsInboxSaveCustomFilter(string? name = default(string?), AlertsFilterTimeRangeTypeDto? timeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? timeRangeRelativeMinutes = default(int?), long? timeRangeFromDateTime = default(long?), long? timeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? includeStatusSeverityHigh = default(bool?), bool? includeStatusSeverityMedium = default(bool?), bool? includeStatusSeverityLow = default(bool?), bool? includeStatusReadYes = default(bool?), bool? includeStatusReadNo = default(bool?), bool? includeStatusClearedYes = default(bool?), bool? includeStatusClearedNo = default(bool?), bool? includeStatusStatusEvent = default(bool?), bool? includeStatusStatusActive = default(bool?), bool? includeStatusStatusEnded = default(bool?), bool? includeStatusCommentYes = default(bool?), bool? includeStatusCommentNo = default(bool?), List<string>? includeAlertTypeIds = default(List<string>?), List<TagDto>? selectedTags = default(List<TagDto>?), int operationIndex = 0)
        {
            AlertsInboxSaveCustomFilterWithHttpInfo(name, timeRangeType, timeRangeRelativeMinutes, timeRangeFromDateTime, timeRangeToDateTime, timeRangeTimeWindowMode, includeStatusSeverityHigh, includeStatusSeverityMedium, includeStatusSeverityLow, includeStatusReadYes, includeStatusReadNo, includeStatusClearedYes, includeStatusClearedNo, includeStatusStatusEvent, includeStatusStatusActive, includeStatusStatusEnded, includeStatusCommentYes, includeStatusCommentNo, includeAlertTypeIds, selectedTags);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="timeRangeType"> (optional)</param>
        /// <param name="timeRangeRelativeMinutes"> (optional)</param>
        /// <param name="timeRangeFromDateTime"> (optional)</param>
        /// <param name="timeRangeToDateTime"> (optional)</param>
        /// <param name="timeRangeTimeWindowMode"> (optional)</param>
        /// <param name="includeStatusSeverityHigh"> (optional)</param>
        /// <param name="includeStatusSeverityMedium"> (optional)</param>
        /// <param name="includeStatusSeverityLow"> (optional)</param>
        /// <param name="includeStatusReadYes"> (optional)</param>
        /// <param name="includeStatusReadNo"> (optional)</param>
        /// <param name="includeStatusClearedYes"> (optional)</param>
        /// <param name="includeStatusClearedNo"> (optional)</param>
        /// <param name="includeStatusStatusEvent"> (optional)</param>
        /// <param name="includeStatusStatusActive"> (optional)</param>
        /// <param name="includeStatusStatusEnded"> (optional)</param>
        /// <param name="includeStatusCommentYes"> (optional)</param>
        /// <param name="includeStatusCommentNo"> (optional)</param>
        /// <param name="includeAlertTypeIds"> (optional)</param>
        /// <param name="selectedTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> AlertsInboxSaveCustomFilterWithHttpInfo(string? name = default(string?), AlertsFilterTimeRangeTypeDto? timeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? timeRangeRelativeMinutes = default(int?), long? timeRangeFromDateTime = default(long?), long? timeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? includeStatusSeverityHigh = default(bool?), bool? includeStatusSeverityMedium = default(bool?), bool? includeStatusSeverityLow = default(bool?), bool? includeStatusReadYes = default(bool?), bool? includeStatusReadNo = default(bool?), bool? includeStatusClearedYes = default(bool?), bool? includeStatusClearedNo = default(bool?), bool? includeStatusStatusEvent = default(bool?), bool? includeStatusStatusActive = default(bool?), bool? includeStatusStatusEnded = default(bool?), bool? includeStatusCommentYes = default(bool?), bool? includeStatusCommentNo = default(bool?), List<string>? includeAlertTypeIds = default(List<string>?), List<TagDto>? selectedTags = default(List<TagDto>?), int operationIndex = 0)
        {
            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (timeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("TimeRange.Type", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(timeRangeType) : cli.Client.ClientUtils.Serialize(timeRangeType)); // form parameter
            }
            if (timeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(timeRangeRelativeMinutes)); // form parameter
            }
            if (timeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(timeRangeFromDateTime)); // form parameter
            }
            if (timeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(timeRangeToDateTime)); // form parameter
            }
            if (timeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("TimeRange.TimeWindowMode", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(timeRangeTimeWindowMode) : cli.Client.ClientUtils.Serialize(timeRangeTimeWindowMode)); // form parameter
            }
            if (includeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(includeStatusSeverityHigh)); // form parameter
            }
            if (includeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(includeStatusSeverityMedium)); // form parameter
            }
            if (includeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(includeStatusSeverityLow)); // form parameter
            }
            if (includeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(includeStatusReadYes)); // form parameter
            }
            if (includeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(includeStatusReadNo)); // form parameter
            }
            if (includeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(includeStatusClearedYes)); // form parameter
            }
            if (includeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(includeStatusClearedNo)); // form parameter
            }
            if (includeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(includeStatusStatusEvent)); // form parameter
            }
            if (includeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(includeStatusStatusActive)); // form parameter
            }
            if (includeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(includeStatusStatusEnded)); // form parameter
            }
            if (includeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(includeStatusCommentYes)); // form parameter
            }
            if (includeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(includeStatusCommentNo)); // form parameter
            }
            if (includeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeAlertTypeIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(includeAlertTypeIds) : cli.Client.ClientUtils.Serialize(includeAlertTypeIds)); // form parameter
            }
            if (selectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedTags", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedTags) : cli.Client.ClientUtils.Serialize(selectedTags)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxSaveCustomFilter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/savecustomfilter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxSaveCustomFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="timeRangeType"> (optional)</param>
        /// <param name="timeRangeRelativeMinutes"> (optional)</param>
        /// <param name="timeRangeFromDateTime"> (optional)</param>
        /// <param name="timeRangeToDateTime"> (optional)</param>
        /// <param name="timeRangeTimeWindowMode"> (optional)</param>
        /// <param name="includeStatusSeverityHigh"> (optional)</param>
        /// <param name="includeStatusSeverityMedium"> (optional)</param>
        /// <param name="includeStatusSeverityLow"> (optional)</param>
        /// <param name="includeStatusReadYes"> (optional)</param>
        /// <param name="includeStatusReadNo"> (optional)</param>
        /// <param name="includeStatusClearedYes"> (optional)</param>
        /// <param name="includeStatusClearedNo"> (optional)</param>
        /// <param name="includeStatusStatusEvent"> (optional)</param>
        /// <param name="includeStatusStatusActive"> (optional)</param>
        /// <param name="includeStatusStatusEnded"> (optional)</param>
        /// <param name="includeStatusCommentYes"> (optional)</param>
        /// <param name="includeStatusCommentNo"> (optional)</param>
        /// <param name="includeAlertTypeIds"> (optional)</param>
        /// <param name="selectedTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsInboxSaveCustomFilterAsync(string? name = default(string?), AlertsFilterTimeRangeTypeDto? timeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? timeRangeRelativeMinutes = default(int?), long? timeRangeFromDateTime = default(long?), long? timeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? includeStatusSeverityHigh = default(bool?), bool? includeStatusSeverityMedium = default(bool?), bool? includeStatusSeverityLow = default(bool?), bool? includeStatusReadYes = default(bool?), bool? includeStatusReadNo = default(bool?), bool? includeStatusClearedYes = default(bool?), bool? includeStatusClearedNo = default(bool?), bool? includeStatusStatusEvent = default(bool?), bool? includeStatusStatusActive = default(bool?), bool? includeStatusStatusEnded = default(bool?), bool? includeStatusCommentYes = default(bool?), bool? includeStatusCommentNo = default(bool?), List<string>? includeAlertTypeIds = default(List<string>?), List<TagDto>? selectedTags = default(List<TagDto>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AlertsInboxSaveCustomFilterWithHttpInfoAsync(name, timeRangeType, timeRangeRelativeMinutes, timeRangeFromDateTime, timeRangeToDateTime, timeRangeTimeWindowMode, includeStatusSeverityHigh, includeStatusSeverityMedium, includeStatusSeverityLow, includeStatusReadYes, includeStatusReadNo, includeStatusClearedYes, includeStatusClearedNo, includeStatusStatusEvent, includeStatusStatusActive, includeStatusStatusEnded, includeStatusCommentYes, includeStatusCommentNo, includeAlertTypeIds, selectedTags, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="timeRangeType"> (optional)</param>
        /// <param name="timeRangeRelativeMinutes"> (optional)</param>
        /// <param name="timeRangeFromDateTime"> (optional)</param>
        /// <param name="timeRangeToDateTime"> (optional)</param>
        /// <param name="timeRangeTimeWindowMode"> (optional)</param>
        /// <param name="includeStatusSeverityHigh"> (optional)</param>
        /// <param name="includeStatusSeverityMedium"> (optional)</param>
        /// <param name="includeStatusSeverityLow"> (optional)</param>
        /// <param name="includeStatusReadYes"> (optional)</param>
        /// <param name="includeStatusReadNo"> (optional)</param>
        /// <param name="includeStatusClearedYes"> (optional)</param>
        /// <param name="includeStatusClearedNo"> (optional)</param>
        /// <param name="includeStatusStatusEvent"> (optional)</param>
        /// <param name="includeStatusStatusActive"> (optional)</param>
        /// <param name="includeStatusStatusEnded"> (optional)</param>
        /// <param name="includeStatusCommentYes"> (optional)</param>
        /// <param name="includeStatusCommentNo"> (optional)</param>
        /// <param name="includeAlertTypeIds"> (optional)</param>
        /// <param name="selectedTags"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> AlertsInboxSaveCustomFilterWithHttpInfoAsync(string? name = default(string?), AlertsFilterTimeRangeTypeDto? timeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? timeRangeRelativeMinutes = default(int?), long? timeRangeFromDateTime = default(long?), long? timeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? includeStatusSeverityHigh = default(bool?), bool? includeStatusSeverityMedium = default(bool?), bool? includeStatusSeverityLow = default(bool?), bool? includeStatusReadYes = default(bool?), bool? includeStatusReadNo = default(bool?), bool? includeStatusClearedYes = default(bool?), bool? includeStatusClearedNo = default(bool?), bool? includeStatusStatusEvent = default(bool?), bool? includeStatusStatusActive = default(bool?), bool? includeStatusStatusEnded = default(bool?), bool? includeStatusCommentYes = default(bool?), bool? includeStatusCommentNo = default(bool?), List<string>? includeAlertTypeIds = default(List<string>?), List<TagDto>? selectedTags = default(List<TagDto>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (timeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("TimeRange.Type", cli.Client.ClientUtils.Serialize(timeRangeType)); // form parameter
            }
            if (timeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(timeRangeRelativeMinutes)); // form parameter
            }
            if (timeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(timeRangeFromDateTime)); // form parameter
            }
            if (timeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(timeRangeToDateTime)); // form parameter
            }
            if (timeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("TimeRange.TimeWindowMode", cli.Client.ClientUtils.Serialize(timeRangeTimeWindowMode)); // form parameter
            }
            if (includeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(includeStatusSeverityHigh)); // form parameter
            }
            if (includeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(includeStatusSeverityMedium)); // form parameter
            }
            if (includeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(includeStatusSeverityLow)); // form parameter
            }
            if (includeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(includeStatusReadYes)); // form parameter
            }
            if (includeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(includeStatusReadNo)); // form parameter
            }
            if (includeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(includeStatusClearedYes)); // form parameter
            }
            if (includeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(includeStatusClearedNo)); // form parameter
            }
            if (includeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(includeStatusStatusEvent)); // form parameter
            }
            if (includeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(includeStatusStatusActive)); // form parameter
            }
            if (includeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(includeStatusStatusEnded)); // form parameter
            }
            if (includeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(includeStatusCommentYes)); // form parameter
            }
            if (includeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(includeStatusCommentNo)); // form parameter
            }
            if (includeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("IncludeAlertTypeIds", cli.Client.ClientUtils.Serialize(includeAlertTypeIds)); // form parameter
            }
            if (selectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedTags", cli.Client.ClientUtils.Serialize(selectedTags)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxSaveCustomFilter";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/savecustomfilter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxSaveCustomFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AlertsInboxUnclear(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            AlertsInboxUnclearWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> AlertsInboxUnclearWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedGroupIds) : cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedAlertIds) : cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeType) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds) : cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsSelectedTags) : cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(channelInstanceRefs) : cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnclear";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/unclear", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxUnclear", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsInboxUnclearAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AlertsInboxUnclearWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> AlertsInboxUnclearWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnclear";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/unclear", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxUnclear", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AlertsInboxUnclearAlert(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            AlertsInboxUnclearAlertWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> AlertsInboxUnclearAlertWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedGroupIds) : cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedAlertIds) : cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeType) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds) : cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsSelectedTags) : cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(channelInstanceRefs) : cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnclearAlert";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/unclearalert", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxUnclearAlert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsInboxUnclearAlertAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AlertsInboxUnclearAlertWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> AlertsInboxUnclearAlertWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnclearAlert";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/unclearalert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxUnclearAlert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AlertsInboxUnread(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            AlertsInboxUnreadWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> AlertsInboxUnreadWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedGroupIds) : cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedAlertIds) : cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeType) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds) : cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsSelectedTags) : cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(channelInstanceRefs) : cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnread";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/unread", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxUnread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsInboxUnreadAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AlertsInboxUnreadWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> AlertsInboxUnreadWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnread";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/unread", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxUnread", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AlertsInboxUnreadAlert(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            AlertsInboxUnreadAlertWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> AlertsInboxUnreadAlertWithHttpInfo(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0)
        {
            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedGroupIds) : cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(selectedAlertIds) : cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeType) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode) : cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds) : cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(filterSettingsSelectedTags) : cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", localVarMultipartFormData ? cli.Client.ClientUtils.ParameterToString(channelInstanceRefs) : cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnreadAlert";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/unreadalert", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxUnreadAlert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AlertsInboxUnreadAlertAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AlertsInboxUnreadAlertWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"> (optional)</param>
        /// <param name="selectedGroupIds"> (optional)</param>
        /// <param name="selectedAlertIds"> (optional)</param>
        /// <param name="filterSettingsTimeRangeType"> (optional)</param>
        /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
        /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
        /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
        /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
        /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
        /// <param name="filterSettingsSelectedTags"> (optional)</param>
        /// <param name="channelInstanceRefs"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> AlertsInboxUnreadAlertWithHttpInfoAsync(string? lastUpdate = default(string?), List<GroupIdDto>? selectedGroupIds = default(List<GroupIdDto>?), List<QualifiedAlertIdDto>? selectedAlertIds = default(List<QualifiedAlertIdDto>?), AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default(AlertsFilterTimeRangeTypeDto?), int? filterSettingsTimeRangeRelativeMinutes = default(int?), long? filterSettingsTimeRangeFromDateTime = default(long?), long? filterSettingsTimeRangeToDateTime = default(long?), AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default(AlertsFilterTimeWindowModesDto?), bool? filterSettingsIncludeStatusSeverityHigh = default(bool?), bool? filterSettingsIncludeStatusSeverityMedium = default(bool?), bool? filterSettingsIncludeStatusSeverityLow = default(bool?), bool? filterSettingsIncludeStatusReadYes = default(bool?), bool? filterSettingsIncludeStatusReadNo = default(bool?), bool? filterSettingsIncludeStatusClearedYes = default(bool?), bool? filterSettingsIncludeStatusClearedNo = default(bool?), bool? filterSettingsIncludeStatusStatusEvent = default(bool?), bool? filterSettingsIncludeStatusStatusActive = default(bool?), bool? filterSettingsIncludeStatusStatusEnded = default(bool?), bool? filterSettingsIncludeStatusCommentYes = default(bool?), bool? filterSettingsIncludeStatusCommentNo = default(bool?), List<string>? filterSettingsIncludeAlertTypeIds = default(List<string>?), List<TagDto>? filterSettingsSelectedTags = default(List<TagDto>?), List<string>? channelInstanceRefs = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (lastUpdate != null)
            {
                localVarRequestOptions.FormParameters.Add("LastUpdate", cli.Client.ClientUtils.ParameterToString(lastUpdate)); // form parameter
            }
            if (selectedGroupIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedGroupIds", cli.Client.ClientUtils.Serialize(selectedGroupIds)); // form parameter
            }
            if (selectedAlertIds != null)
            {
                localVarRequestOptions.FormParameters.Add("SelectedAlertIds", cli.Client.ClientUtils.Serialize(selectedAlertIds)); // form parameter
            }
            if (filterSettingsTimeRangeType != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
            }
            if (filterSettingsTimeRangeRelativeMinutes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
            }
            if (filterSettingsTimeRangeFromDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeToDateTime != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime", cli.Client.ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
            }
            if (filterSettingsTimeRangeTimeWindowMode != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode", cli.Client.ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityHigh != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityMedium != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
            }
            if (filterSettingsIncludeStatusSeverityLow != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
            }
            if (filterSettingsIncludeStatusReadYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
            }
            if (filterSettingsIncludeStatusReadNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
            }
            if (filterSettingsIncludeStatusClearedNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEvent != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusActive != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
            }
            if (filterSettingsIncludeStatusStatusEnded != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentYes != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
            }
            if (filterSettingsIncludeStatusCommentNo != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo", cli.Client.ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
            }
            if (filterSettingsIncludeAlertTypeIds != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds", cli.Client.ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
            }
            if (filterSettingsSelectedTags != null)
            {
                localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags", cli.Client.ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
            }
            if (channelInstanceRefs != null)
            {
                localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs", cli.Client.ClientUtils.Serialize(channelInstanceRefs)); // form parameter
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnreadAlert";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/unreadalert", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AlertsInboxUnreadAlert", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0)
        {
            ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostWithHttpInfo(alertInboxSelectionDto, author, comment);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/add-alert-commentjson", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostWithHttpInfoAsync(alertInboxSelectionDto, author, comment, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/add-alert-commentjson", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0)
        {
            ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostWithHttpInfo(alertInboxSelectionDto, author, comment);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/add-group-commentjson", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostWithHttpInfoAsync(alertInboxSelectionDto, author, comment, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="author"> (optional)</param>
        /// <param name="comment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, string? author = default(string?), string? comment = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (author != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "author", author));
            }
            if (comment != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "comment", comment));
            }
            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/add-group-commentjson", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiAlertsAlertsgroupinboxClearalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            ApiAlertsAlertsgroupinboxClearalertjsonPostWithHttpInfo(alertInboxSelectionDto);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiAlertsAlertsgroupinboxClearalertjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxClearalertjsonPost");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxClearalertjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/clearalertjson", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxClearalertjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxClearalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiAlertsAlertsgroupinboxClearalertjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiAlertsAlertsgroupinboxClearalertjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxClearalertjsonPost");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxClearalertjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/clearalertjson", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxClearalertjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiAlertsAlertsgroupinboxClearjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            ApiAlertsAlertsgroupinboxClearjsonPostWithHttpInfo(alertInboxSelectionDto);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiAlertsAlertsgroupinboxClearjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxClearjsonPost");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxClearjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/clearjson", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxClearjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxClearjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiAlertsAlertsgroupinboxClearjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiAlertsAlertsgroupinboxClearjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxClearjsonPost");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxClearjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/clearjson", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxClearjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPost(string? name = default(string?), int operationIndex = 0)
        {
            cli.Client.ApiResponse<bool> localVarResponse = ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public cli.Client.ApiResponse<bool> ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostWithHttpInfo(string? name = default(string?), int operationIndex = 0)
        {
            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<bool>("/api/Alerts/alertsgroupinbox/deletecustomfilterjson", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostAsync(string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            cli.Client.ApiResponse<bool> localVarResponse = await ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<bool>> ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostWithHttpInfoAsync(string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<bool>("/api/Alerts/alertsgroupinbox/deletecustomfilterjson", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiAlertsAlertsgroupinboxReadalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            ApiAlertsAlertsgroupinboxReadalertjsonPostWithHttpInfo(alertInboxSelectionDto);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiAlertsAlertsgroupinboxReadalertjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxReadalertjsonPost");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxReadalertjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/readalertjson", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxReadalertjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxReadalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiAlertsAlertsgroupinboxReadalertjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiAlertsAlertsgroupinboxReadalertjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxReadalertjsonPost");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxReadalertjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/readalertjson", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxReadalertjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiAlertsAlertsgroupinboxReadjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            ApiAlertsAlertsgroupinboxReadjsonPostWithHttpInfo(alertInboxSelectionDto);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiAlertsAlertsgroupinboxReadjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxReadjsonPost");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxReadjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/readjson", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxReadjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxReadjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiAlertsAlertsgroupinboxReadjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiAlertsAlertsgroupinboxReadjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxReadjsonPost");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxReadjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/readjson", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxReadjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSettingsDto"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost(FilterSettingsDto filterSettingsDto, string? name = default(string?), int operationIndex = 0)
        {
            ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostWithHttpInfo(filterSettingsDto, name);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSettingsDto"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostWithHttpInfo(FilterSettingsDto filterSettingsDto, string? name = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'filterSettingsDto' is set
            if (filterSettingsDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'filterSettingsDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            localVarRequestOptions.Data = filterSettingsDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/savecustomfilterjson", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSettingsDto"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostAsync(FilterSettingsDto filterSettingsDto, string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostWithHttpInfoAsync(filterSettingsDto, name, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterSettingsDto"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostWithHttpInfoAsync(FilterSettingsDto filterSettingsDto, string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'filterSettingsDto' is set
            if (filterSettingsDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'filterSettingsDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            localVarRequestOptions.Data = filterSettingsDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/savecustomfilterjson", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiAlertsAlertsgroupinboxUnclearalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            ApiAlertsAlertsgroupinboxUnclearalertjsonPostWithHttpInfo(alertInboxSelectionDto);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiAlertsAlertsgroupinboxUnclearalertjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnclearalertjsonPost");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnclearalertjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/unclearalertjson", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxUnclearalertjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxUnclearalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiAlertsAlertsgroupinboxUnclearalertjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiAlertsAlertsgroupinboxUnclearalertjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnclearalertjsonPost");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnclearalertjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/unclearalertjson", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxUnclearalertjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiAlertsAlertsgroupinboxUnclearjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            ApiAlertsAlertsgroupinboxUnclearjsonPostWithHttpInfo(alertInboxSelectionDto);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiAlertsAlertsgroupinboxUnclearjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnclearjsonPost");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnclearjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/unclearjson", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxUnclearjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxUnclearjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiAlertsAlertsgroupinboxUnclearjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiAlertsAlertsgroupinboxUnclearjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnclearjsonPost");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnclearjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/unclearjson", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxUnclearjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiAlertsAlertsgroupinboxUnreadalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            ApiAlertsAlertsgroupinboxUnreadalertjsonPostWithHttpInfo(alertInboxSelectionDto);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiAlertsAlertsgroupinboxUnreadalertjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnreadalertjsonPost");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnreadalertjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/unreadalertjson", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxUnreadalertjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxUnreadalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiAlertsAlertsgroupinboxUnreadalertjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiAlertsAlertsgroupinboxUnreadalertjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnreadalertjsonPost");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnreadalertjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/unreadalertjson", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxUnreadalertjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiAlertsAlertsgroupinboxUnreadjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            ApiAlertsAlertsgroupinboxUnreadjsonPostWithHttpInfo(alertInboxSelectionDto);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiAlertsAlertsgroupinboxUnreadjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnreadjsonPost");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnreadjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Alerts/alertsgroupinbox/unreadjson", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxUnreadjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiAlertsAlertsgroupinboxUnreadjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiAlertsAlertsgroupinboxUnreadjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alertInboxSelectionDto"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiAlertsAlertsgroupinboxUnreadjsonPostWithHttpInfoAsync(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'alertInboxSelectionDto' is set
            if (alertInboxSelectionDto == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnreadjsonPost");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = alertInboxSelectionDto;

            localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnreadjsonPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Alerts/alertsgroupinbox/unreadjson", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAlertsAlertsgroupinboxUnreadjsonPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
