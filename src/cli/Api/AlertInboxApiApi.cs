/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using cli.Client;
using cli.Model;

namespace cli.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAlertInboxApiApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxAddAlertComment(string? author = default, string? comment = default, string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxAddAlertCommentWithHttpInfo(string? author = default, string? comment = default,
        string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxAddGroupComment(string? author = default, string? comment = default, string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxAddGroupCommentWithHttpInfo(string? author = default, string? comment = default,
        string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxClear(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxClearWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxClearAlert(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxClearAlertWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>bool</returns>
    bool AlertsInboxDeleteCustomFilter(string? name = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of bool</returns>
    ApiResponse<bool> AlertsInboxDeleteCustomFilterWithHttpInfo(string? name = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxRead(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxReadWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxReadAlert(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxReadAlertWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxSaveCustomFilter(string? name = default, AlertsFilterTimeRangeTypeDto? timeRangeType = default,
        int? timeRangeRelativeMinutes = default, long? timeRangeFromDateTime = default,
        long? timeRangeToDateTime = default, AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default,
        bool? includeStatusSeverityHigh = default, bool? includeStatusSeverityMedium = default,
        bool? includeStatusSeverityLow = default, bool? includeStatusReadYes = default,
        bool? includeStatusReadNo = default, bool? includeStatusClearedYes = default,
        bool? includeStatusClearedNo = default, bool? includeStatusStatusEvent = default,
        bool? includeStatusStatusActive = default, bool? includeStatusStatusEnded = default,
        bool? includeStatusCommentYes = default, bool? includeStatusCommentNo = default,
        List<string>? includeAlertTypeIds = default, List<TagDto>? selectedTags = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxSaveCustomFilterWithHttpInfo(string? name = default,
        AlertsFilterTimeRangeTypeDto? timeRangeType = default, int? timeRangeRelativeMinutes = default,
        long? timeRangeFromDateTime = default, long? timeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default, bool? includeStatusSeverityHigh = default,
        bool? includeStatusSeverityMedium = default, bool? includeStatusSeverityLow = default,
        bool? includeStatusReadYes = default, bool? includeStatusReadNo = default,
        bool? includeStatusClearedYes = default, bool? includeStatusClearedNo = default,
        bool? includeStatusStatusEvent = default, bool? includeStatusStatusActive = default,
        bool? includeStatusStatusEnded = default, bool? includeStatusCommentYes = default,
        bool? includeStatusCommentNo = default, List<string>? includeAlertTypeIds = default,
        List<TagDto>? selectedTags = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxUnclear(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxUnclearWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxUnclearAlert(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxUnclearAlertWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxUnread(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxUnreadWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void AlertsInboxUnreadAlert(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> AlertsInboxUnreadAlertWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        string? author = default, string? comment = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, string? author = default, string? comment = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        string? author = default, string? comment = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, string? author = default, string? comment = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiAlertsAlertsgroupinboxClearalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiAlertsAlertsgroupinboxClearalertjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiAlertsAlertsgroupinboxClearjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiAlertsAlertsgroupinboxClearjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>bool</returns>
    bool ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPost(string? name = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of bool</returns>
    ApiResponse<bool> ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostWithHttpInfo(string? name = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiAlertsAlertsgroupinboxReadalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiAlertsAlertsgroupinboxReadalertjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiAlertsAlertsgroupinboxReadjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiAlertsAlertsgroupinboxReadjsonPostWithHttpInfo(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="filterSettingsDto"></param>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost(FilterSettingsDto filterSettingsDto, string? name = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="filterSettingsDto"></param>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostWithHttpInfo(
        FilterSettingsDto filterSettingsDto, string? name = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiAlertsAlertsgroupinboxUnclearalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiAlertsAlertsgroupinboxUnclearalertjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiAlertsAlertsgroupinboxUnclearjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiAlertsAlertsgroupinboxUnclearjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiAlertsAlertsgroupinboxUnreadalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiAlertsAlertsgroupinboxUnreadalertjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiAlertsAlertsgroupinboxUnreadjsonPost(AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiAlertsAlertsgroupinboxUnreadjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0);

    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAlertInboxApiApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxAddAlertCommentAsync(string? author = default, string? comment = default,
        string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxAddAlertCommentWithHttpInfoAsync(string? author = default,
        string? comment = default, string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxAddGroupCommentAsync(string? author = default, string? comment = default,
        string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxAddGroupCommentWithHttpInfoAsync(string? author = default,
        string? comment = default, string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxClearAsync(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxClearWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxClearAlertAsync(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxClearAlertWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of bool</returns>
    Task<bool> AlertsInboxDeleteCustomFilterAsync(string? name = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (bool)</returns>
    Task<ApiResponse<bool>> AlertsInboxDeleteCustomFilterWithHttpInfoAsync(string? name = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxReadAsync(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxReadWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxReadAlertAsync(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxReadAlertWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxSaveCustomFilterAsync(string? name = default, AlertsFilterTimeRangeTypeDto? timeRangeType = default,
        int? timeRangeRelativeMinutes = default, long? timeRangeFromDateTime = default,
        long? timeRangeToDateTime = default, AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default,
        bool? includeStatusSeverityHigh = default, bool? includeStatusSeverityMedium = default,
        bool? includeStatusSeverityLow = default, bool? includeStatusReadYes = default,
        bool? includeStatusReadNo = default, bool? includeStatusClearedYes = default,
        bool? includeStatusClearedNo = default, bool? includeStatusStatusEvent = default,
        bool? includeStatusStatusActive = default, bool? includeStatusStatusEnded = default,
        bool? includeStatusCommentYes = default, bool? includeStatusCommentNo = default,
        List<string>? includeAlertTypeIds = default, List<TagDto>? selectedTags = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxSaveCustomFilterWithHttpInfoAsync(string? name = default,
        AlertsFilterTimeRangeTypeDto? timeRangeType = default, int? timeRangeRelativeMinutes = default,
        long? timeRangeFromDateTime = default, long? timeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default, bool? includeStatusSeverityHigh = default,
        bool? includeStatusSeverityMedium = default, bool? includeStatusSeverityLow = default,
        bool? includeStatusReadYes = default, bool? includeStatusReadNo = default,
        bool? includeStatusClearedYes = default, bool? includeStatusClearedNo = default,
        bool? includeStatusStatusEvent = default, bool? includeStatusStatusActive = default,
        bool? includeStatusStatusEnded = default, bool? includeStatusCommentYes = default,
        bool? includeStatusCommentNo = default, List<string>? includeAlertTypeIds = default,
        List<TagDto>? selectedTags = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxUnclearAsync(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxUnclearWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxUnclearAlertAsync(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxUnclearAlertWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxUnreadAsync(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxUnreadWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task AlertsInboxUnreadAlertAsync(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> AlertsInboxUnreadAlertWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        string? author = default, string? comment = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, string? author = default, string? comment = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        string? author = default, string? comment = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, string? author = default, string? comment = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiAlertsAlertsgroupinboxClearalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxClearalertjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiAlertsAlertsgroupinboxClearjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxClearjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of bool</returns>
    Task<bool> ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostAsync(string? name = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (bool)</returns>
    Task<ApiResponse<bool>> ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostWithHttpInfoAsync(string? name = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiAlertsAlertsgroupinboxReadalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxReadalertjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiAlertsAlertsgroupinboxReadjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxReadjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="filterSettingsDto"></param>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostAsync(FilterSettingsDto filterSettingsDto,
        string? name = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="filterSettingsDto"></param>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostWithHttpInfoAsync(
        FilterSettingsDto filterSettingsDto, string? name = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiAlertsAlertsgroupinboxUnclearalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxUnclearalertjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiAlertsAlertsgroupinboxUnclearjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxUnclearjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiAlertsAlertsgroupinboxUnreadalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxUnreadalertjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiAlertsAlertsgroupinboxUnreadjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxUnreadjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAlertInboxApiApi : IAlertInboxApiApiSync, IAlertInboxApiApiAsync
{
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class AlertInboxApiApi : IAlertInboxApiApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="AlertInboxApiApi" /> class.
    /// </summary>
    /// <returns></returns>
    public AlertInboxApiApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AlertInboxApiApi" /> class.
    /// </summary>
    /// <returns></returns>
    public AlertInboxApiApi(string basePath)
    {
        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AlertInboxApiApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public AlertInboxApiApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AlertInboxApiApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public AlertInboxApiApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxAddAlertComment(string? author = default, string? comment = default,
        string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        AlertsInboxAddAlertCommentWithHttpInfo(author, comment, lastUpdate, selectedGroupIds, selectedAlertIds,
            filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxAddAlertCommentWithHttpInfo(string? author = default,
        string? comment = default, string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (author != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "author", author));
        if (comment != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "comment", comment));
        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedGroupIds)
                    : ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedAlertIds)
                    : ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeType)
                    : ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode)
                    : ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds)
                    : ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsSelectedTags)
                    : ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(channelInstanceRefs)
                    : ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxAddAlertComment";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/add-alert-comment",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxAddAlertComment", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxAddAlertCommentAsync(string? author = default, string? comment = default,
        string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxAddAlertCommentWithHttpInfoAsync(author, comment, lastUpdate, selectedGroupIds,
            selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes,
            filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime,
            filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh,
            filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow,
            filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo,
            filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo,
            filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive,
            filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes,
            filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags,
            channelInstanceRefs, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxAddAlertCommentWithHttpInfoAsync(string? author = default,
        string? comment = default, string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (author != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "author", author));
        if (comment != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "comment", comment));
        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxAddAlertComment";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<object>("/api/Alerts/alertsgroupinbox/add-alert-comment", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxAddAlertComment", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxAddGroupComment(string? author = default, string? comment = default,
        string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        AlertsInboxAddGroupCommentWithHttpInfo(author, comment, lastUpdate, selectedGroupIds, selectedAlertIds,
            filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxAddGroupCommentWithHttpInfo(string? author = default,
        string? comment = default, string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (author != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "author", author));
        if (comment != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "comment", comment));
        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedGroupIds)
                    : ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedAlertIds)
                    : ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeType)
                    : ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode)
                    : ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds)
                    : ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsSelectedTags)
                    : ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(channelInstanceRefs)
                    : ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxAddGroupComment";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/add-group-comment",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxAddGroupComment", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxAddGroupCommentAsync(string? author = default, string? comment = default,
        string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxAddGroupCommentWithHttpInfoAsync(author, comment, lastUpdate, selectedGroupIds,
            selectedAlertIds, filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes,
            filterSettingsTimeRangeFromDateTime, filterSettingsTimeRangeToDateTime,
            filterSettingsTimeRangeTimeWindowMode, filterSettingsIncludeStatusSeverityHigh,
            filterSettingsIncludeStatusSeverityMedium, filterSettingsIncludeStatusSeverityLow,
            filterSettingsIncludeStatusReadYes, filterSettingsIncludeStatusReadNo,
            filterSettingsIncludeStatusClearedYes, filterSettingsIncludeStatusClearedNo,
            filterSettingsIncludeStatusStatusEvent, filterSettingsIncludeStatusStatusActive,
            filterSettingsIncludeStatusStatusEnded, filterSettingsIncludeStatusCommentYes,
            filterSettingsIncludeStatusCommentNo, filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags,
            channelInstanceRefs, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxAddGroupCommentWithHttpInfoAsync(string? author = default,
        string? comment = default, string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (author != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "author", author));
        if (comment != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "comment", comment));
        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxAddGroupComment";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<object>("/api/Alerts/alertsgroupinbox/add-group-comment", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxAddGroupComment", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxClear(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        AlertsInboxClearWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType,
            filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxClearWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedGroupIds)
                    : ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedAlertIds)
                    : ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeType)
                    : ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode)
                    : ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds)
                    : ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsSelectedTags)
                    : ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(channelInstanceRefs)
                    : ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxClear";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Post<object>("/api/Alerts/alertsgroupinbox/clear", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxClear", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxClearAsync(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxClearWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds,
            filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxClearWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxClear";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/clear",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxClear", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxClearAlert(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        AlertsInboxClearAlertWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType,
            filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxClearAlertWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedGroupIds)
                    : ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedAlertIds)
                    : ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeType)
                    : ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode)
                    : ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds)
                    : ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsSelectedTags)
                    : ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(channelInstanceRefs)
                    : ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxClearAlert";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/clearalert", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxClearAlert", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxClearAlertAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxClearAlertWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds,
            filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxClearAlertWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxClearAlert";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/clearalert",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxClearAlert", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>bool</returns>
    public bool AlertsInboxDeleteCustomFilter(string? name = default, int operationIndex = 0)
    {
        var localVarResponse = AlertsInboxDeleteCustomFilterWithHttpInfo(name);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of bool</returns>
    public ApiResponse<bool> AlertsInboxDeleteCustomFilterWithHttpInfo(string? name = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (name != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxDeleteCustomFilter";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<bool>("/api/Alerts/alertsgroupinbox/deletecustomfilter",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxDeleteCustomFilter", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of bool</returns>
    public async Task<bool> AlertsInboxDeleteCustomFilterAsync(string? name = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await AlertsInboxDeleteCustomFilterWithHttpInfoAsync(name, operationIndex, cancellationToken)
                .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (bool)</returns>
    public async Task<ApiResponse<bool>> AlertsInboxDeleteCustomFilterWithHttpInfoAsync(string? name = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (name != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxDeleteCustomFilter";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<bool>("/api/Alerts/alertsgroupinbox/deletecustomfilter", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxDeleteCustomFilter", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxRead(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        AlertsInboxReadWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType,
            filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxReadWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedGroupIds)
                    : ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedAlertIds)
                    : ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeType)
                    : ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode)
                    : ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds)
                    : ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsSelectedTags)
                    : ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(channelInstanceRefs)
                    : ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxRead";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Post<object>("/api/Alerts/alertsgroupinbox/read", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxRead", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxReadAsync(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxReadWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds,
            filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxReadWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxRead";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/read",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxRead", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxReadAlert(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        AlertsInboxReadAlertWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType,
            filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxReadAlertWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedGroupIds)
                    : ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedAlertIds)
                    : ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeType)
                    : ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode)
                    : ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds)
                    : ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsSelectedTags)
                    : ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(channelInstanceRefs)
                    : ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxReadAlert";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/readalert", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxReadAlert", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxReadAlertAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxReadAlertWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds,
            filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxReadAlertWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxReadAlert";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/readalert",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxReadAlert", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxSaveCustomFilter(string? name = default,
        AlertsFilterTimeRangeTypeDto? timeRangeType = default, int? timeRangeRelativeMinutes = default,
        long? timeRangeFromDateTime = default, long? timeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default, bool? includeStatusSeverityHigh = default,
        bool? includeStatusSeverityMedium = default, bool? includeStatusSeverityLow = default,
        bool? includeStatusReadYes = default, bool? includeStatusReadNo = default,
        bool? includeStatusClearedYes = default, bool? includeStatusClearedNo = default,
        bool? includeStatusStatusEvent = default, bool? includeStatusStatusActive = default,
        bool? includeStatusStatusEnded = default, bool? includeStatusCommentYes = default,
        bool? includeStatusCommentNo = default, List<string>? includeAlertTypeIds = default,
        List<TagDto>? selectedTags = default, int operationIndex = 0)
    {
        AlertsInboxSaveCustomFilterWithHttpInfo(name, timeRangeType, timeRangeRelativeMinutes, timeRangeFromDateTime,
            timeRangeToDateTime, timeRangeTimeWindowMode, includeStatusSeverityHigh, includeStatusSeverityMedium,
            includeStatusSeverityLow, includeStatusReadYes, includeStatusReadNo, includeStatusClearedYes,
            includeStatusClearedNo, includeStatusStatusEvent, includeStatusStatusActive, includeStatusStatusEnded,
            includeStatusCommentYes, includeStatusCommentNo, includeAlertTypeIds, selectedTags);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxSaveCustomFilterWithHttpInfo(string? name = default,
        AlertsFilterTimeRangeTypeDto? timeRangeType = default, int? timeRangeRelativeMinutes = default,
        long? timeRangeFromDateTime = default, long? timeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default, bool? includeStatusSeverityHigh = default,
        bool? includeStatusSeverityMedium = default, bool? includeStatusSeverityLow = default,
        bool? includeStatusReadYes = default, bool? includeStatusReadNo = default,
        bool? includeStatusClearedYes = default, bool? includeStatusClearedNo = default,
        bool? includeStatusStatusEvent = default, bool? includeStatusStatusActive = default,
        bool? includeStatusStatusEnded = default, bool? includeStatusCommentYes = default,
        bool? includeStatusCommentNo = default, List<string>? includeAlertTypeIds = default,
        List<TagDto>? selectedTags = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (name != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));
        if (timeRangeType != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.Type",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(timeRangeType)
                    : ClientUtils.Serialize(timeRangeType)); // form parameter
        if (timeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(timeRangeRelativeMinutes)); // form parameter
        if (timeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.FromDateTime",
                ClientUtils.ParameterToString(timeRangeFromDateTime)); // form parameter
        if (timeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.ToDateTime",
                ClientUtils.ParameterToString(timeRangeToDateTime)); // form parameter
        if (timeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.TimeWindowMode",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(timeRangeTimeWindowMode)
                    : ClientUtils.Serialize(timeRangeTimeWindowMode)); // form parameter
        if (includeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(includeStatusSeverityHigh)); // form parameter
        if (includeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(includeStatusSeverityMedium)); // form parameter
        if (includeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(includeStatusSeverityLow)); // form parameter
        if (includeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(includeStatusReadYes)); // form parameter
        if (includeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(includeStatusReadNo)); // form parameter
        if (includeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(includeStatusClearedYes)); // form parameter
        if (includeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(includeStatusClearedNo)); // form parameter
        if (includeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(includeStatusStatusEvent)); // form parameter
        if (includeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(includeStatusStatusActive)); // form parameter
        if (includeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(includeStatusStatusEnded)); // form parameter
        if (includeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(includeStatusCommentYes)); // form parameter
        if (includeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(includeStatusCommentNo)); // form parameter
        if (includeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("IncludeAlertTypeIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(includeAlertTypeIds)
                    : ClientUtils.Serialize(includeAlertTypeIds)); // form parameter
        if (selectedTags != null)
            localVarRequestOptions.FormParameters.Add("SelectedTags",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedTags)
                    : ClientUtils.Serialize(selectedTags)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxSaveCustomFilter";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/savecustomfilter",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxSaveCustomFilter", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxSaveCustomFilterAsync(string? name = default,
        AlertsFilterTimeRangeTypeDto? timeRangeType = default, int? timeRangeRelativeMinutes = default,
        long? timeRangeFromDateTime = default, long? timeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default, bool? includeStatusSeverityHigh = default,
        bool? includeStatusSeverityMedium = default, bool? includeStatusSeverityLow = default,
        bool? includeStatusReadYes = default, bool? includeStatusReadNo = default,
        bool? includeStatusClearedYes = default, bool? includeStatusClearedNo = default,
        bool? includeStatusStatusEvent = default, bool? includeStatusStatusActive = default,
        bool? includeStatusStatusEnded = default, bool? includeStatusCommentYes = default,
        bool? includeStatusCommentNo = default, List<string>? includeAlertTypeIds = default,
        List<TagDto>? selectedTags = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await AlertsInboxSaveCustomFilterWithHttpInfoAsync(name, timeRangeType, timeRangeRelativeMinutes,
            timeRangeFromDateTime, timeRangeToDateTime, timeRangeTimeWindowMode, includeStatusSeverityHigh,
            includeStatusSeverityMedium, includeStatusSeverityLow, includeStatusReadYes, includeStatusReadNo,
            includeStatusClearedYes, includeStatusClearedNo, includeStatusStatusEvent, includeStatusStatusActive,
            includeStatusStatusEnded, includeStatusCommentYes, includeStatusCommentNo, includeAlertTypeIds,
            selectedTags, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="timeRangeType"> (optional)</param>
    /// <param name="timeRangeRelativeMinutes"> (optional)</param>
    /// <param name="timeRangeFromDateTime"> (optional)</param>
    /// <param name="timeRangeToDateTime"> (optional)</param>
    /// <param name="timeRangeTimeWindowMode"> (optional)</param>
    /// <param name="includeStatusSeverityHigh"> (optional)</param>
    /// <param name="includeStatusSeverityMedium"> (optional)</param>
    /// <param name="includeStatusSeverityLow"> (optional)</param>
    /// <param name="includeStatusReadYes"> (optional)</param>
    /// <param name="includeStatusReadNo"> (optional)</param>
    /// <param name="includeStatusClearedYes"> (optional)</param>
    /// <param name="includeStatusClearedNo"> (optional)</param>
    /// <param name="includeStatusStatusEvent"> (optional)</param>
    /// <param name="includeStatusStatusActive"> (optional)</param>
    /// <param name="includeStatusStatusEnded"> (optional)</param>
    /// <param name="includeStatusCommentYes"> (optional)</param>
    /// <param name="includeStatusCommentNo"> (optional)</param>
    /// <param name="includeAlertTypeIds"> (optional)</param>
    /// <param name="selectedTags"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxSaveCustomFilterWithHttpInfoAsync(string? name = default,
        AlertsFilterTimeRangeTypeDto? timeRangeType = default, int? timeRangeRelativeMinutes = default,
        long? timeRangeFromDateTime = default, long? timeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = default, bool? includeStatusSeverityHigh = default,
        bool? includeStatusSeverityMedium = default, bool? includeStatusSeverityLow = default,
        bool? includeStatusReadYes = default, bool? includeStatusReadNo = default,
        bool? includeStatusClearedYes = default, bool? includeStatusClearedNo = default,
        bool? includeStatusStatusEvent = default, bool? includeStatusStatusActive = default,
        bool? includeStatusStatusEnded = default, bool? includeStatusCommentYes = default,
        bool? includeStatusCommentNo = default, List<string>? includeAlertTypeIds = default,
        List<TagDto>? selectedTags = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (name != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));
        if (timeRangeType != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.Type",
                ClientUtils.Serialize(timeRangeType)); // form parameter
        if (timeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(timeRangeRelativeMinutes)); // form parameter
        if (timeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.FromDateTime",
                ClientUtils.ParameterToString(timeRangeFromDateTime)); // form parameter
        if (timeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.ToDateTime",
                ClientUtils.ParameterToString(timeRangeToDateTime)); // form parameter
        if (timeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("TimeRange.TimeWindowMode",
                ClientUtils.Serialize(timeRangeTimeWindowMode)); // form parameter
        if (includeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(includeStatusSeverityHigh)); // form parameter
        if (includeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(includeStatusSeverityMedium)); // form parameter
        if (includeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(includeStatusSeverityLow)); // form parameter
        if (includeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(includeStatusReadYes)); // form parameter
        if (includeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(includeStatusReadNo)); // form parameter
        if (includeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(includeStatusClearedYes)); // form parameter
        if (includeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(includeStatusClearedNo)); // form parameter
        if (includeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(includeStatusStatusEvent)); // form parameter
        if (includeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(includeStatusStatusActive)); // form parameter
        if (includeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(includeStatusStatusEnded)); // form parameter
        if (includeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(includeStatusCommentYes)); // form parameter
        if (includeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(includeStatusCommentNo)); // form parameter
        if (includeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("IncludeAlertTypeIds",
                ClientUtils.Serialize(includeAlertTypeIds)); // form parameter
        if (selectedTags != null)
            localVarRequestOptions.FormParameters.Add("SelectedTags",
                ClientUtils.Serialize(selectedTags)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxSaveCustomFilter";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<object>("/api/Alerts/alertsgroupinbox/savecustomfilter", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxSaveCustomFilter", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxUnclear(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        AlertsInboxUnclearWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType,
            filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxUnclearWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedGroupIds)
                    : ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedAlertIds)
                    : ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeType)
                    : ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode)
                    : ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds)
                    : ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsSelectedTags)
                    : ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(channelInstanceRefs)
                    : ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnclear";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Post<object>("/api/Alerts/alertsgroupinbox/unclear", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxUnclear", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxUnclearAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxUnclearWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds,
            filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxUnclearWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnclear";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/unclear",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxUnclear", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxUnclearAlert(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        AlertsInboxUnclearAlertWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType,
            filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxUnclearAlertWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedGroupIds)
                    : ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedAlertIds)
                    : ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeType)
                    : ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode)
                    : ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds)
                    : ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsSelectedTags)
                    : ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(channelInstanceRefs)
                    : ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnclearAlert";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/unclearalert", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxUnclearAlert", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxUnclearAlertAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxUnclearAlertWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds,
            filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxUnclearAlertWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnclearAlert";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/unclearalert",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxUnclearAlert", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxUnread(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        AlertsInboxUnreadWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType,
            filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxUnreadWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedGroupIds)
                    : ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedAlertIds)
                    : ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeType)
                    : ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode)
                    : ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds)
                    : ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsSelectedTags)
                    : ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(channelInstanceRefs)
                    : ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnread";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Post<object>("/api/Alerts/alertsgroupinbox/unread", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxUnread", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxUnreadAsync(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxUnreadWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds,
            filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxUnreadWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnread";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/unread",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxUnread", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void AlertsInboxUnreadAlert(string? lastUpdate = default, List<GroupIdDto>? selectedGroupIds = default,
        List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        AlertsInboxUnreadAlertWithHttpInfo(lastUpdate, selectedGroupIds, selectedAlertIds, filterSettingsTimeRangeType,
            filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> AlertsInboxUnreadAlertWithHttpInfo(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedGroupIds)
                    : ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(selectedAlertIds)
                    : ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeType)
                    : ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsTimeRangeTimeWindowMode)
                    : ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsIncludeAlertTypeIds)
                    : ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(filterSettingsSelectedTags)
                    : ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                localVarMultipartFormData
                    ? ClientUtils.ParameterToString(channelInstanceRefs)
                    : ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnreadAlert";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/unreadalert", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxUnreadAlert", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task AlertsInboxUnreadAlertAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await AlertsInboxUnreadAlertWithHttpInfoAsync(lastUpdate, selectedGroupIds, selectedAlertIds,
            filterSettingsTimeRangeType, filterSettingsTimeRangeRelativeMinutes, filterSettingsTimeRangeFromDateTime,
            filterSettingsTimeRangeToDateTime, filterSettingsTimeRangeTimeWindowMode,
            filterSettingsIncludeStatusSeverityHigh, filterSettingsIncludeStatusSeverityMedium,
            filterSettingsIncludeStatusSeverityLow, filterSettingsIncludeStatusReadYes,
            filterSettingsIncludeStatusReadNo, filterSettingsIncludeStatusClearedYes,
            filterSettingsIncludeStatusClearedNo, filterSettingsIncludeStatusStatusEvent,
            filterSettingsIncludeStatusStatusActive, filterSettingsIncludeStatusStatusEnded,
            filterSettingsIncludeStatusCommentYes, filterSettingsIncludeStatusCommentNo,
            filterSettingsIncludeAlertTypeIds, filterSettingsSelectedTags, channelInstanceRefs, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="lastUpdate"> (optional)</param>
    /// <param name="selectedGroupIds"> (optional)</param>
    /// <param name="selectedAlertIds"> (optional)</param>
    /// <param name="filterSettingsTimeRangeType"> (optional)</param>
    /// <param name="filterSettingsTimeRangeRelativeMinutes"> (optional)</param>
    /// <param name="filterSettingsTimeRangeFromDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeToDateTime"> (optional)</param>
    /// <param name="filterSettingsTimeRangeTimeWindowMode"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityHigh"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityMedium"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusSeverityLow"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusReadNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusClearedNo"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEvent"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusActive"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusStatusEnded"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentYes"> (optional)</param>
    /// <param name="filterSettingsIncludeStatusCommentNo"> (optional)</param>
    /// <param name="filterSettingsIncludeAlertTypeIds"> (optional)</param>
    /// <param name="filterSettingsSelectedTags"> (optional)</param>
    /// <param name="channelInstanceRefs"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> AlertsInboxUnreadAlertWithHttpInfoAsync(string? lastUpdate = default,
        List<GroupIdDto>? selectedGroupIds = default, List<QualifiedAlertIdDto>? selectedAlertIds = default,
        AlertsFilterTimeRangeTypeDto? filterSettingsTimeRangeType = default,
        int? filterSettingsTimeRangeRelativeMinutes = default, long? filterSettingsTimeRangeFromDateTime = default,
        long? filterSettingsTimeRangeToDateTime = default,
        AlertsFilterTimeWindowModesDto? filterSettingsTimeRangeTimeWindowMode = default,
        bool? filterSettingsIncludeStatusSeverityHigh = default,
        bool? filterSettingsIncludeStatusSeverityMedium = default,
        bool? filterSettingsIncludeStatusSeverityLow = default, bool? filterSettingsIncludeStatusReadYes = default,
        bool? filterSettingsIncludeStatusReadNo = default, bool? filterSettingsIncludeStatusClearedYes = default,
        bool? filterSettingsIncludeStatusClearedNo = default, bool? filterSettingsIncludeStatusStatusEvent = default,
        bool? filterSettingsIncludeStatusStatusActive = default, bool? filterSettingsIncludeStatusStatusEnded = default,
        bool? filterSettingsIncludeStatusCommentYes = default, bool? filterSettingsIncludeStatusCommentNo = default,
        List<string>? filterSettingsIncludeAlertTypeIds = default, List<TagDto>? filterSettingsSelectedTags = default,
        List<string>? channelInstanceRefs = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "multipart/form-data"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (lastUpdate != null)
            localVarRequestOptions.FormParameters.Add("LastUpdate",
                ClientUtils.ParameterToString(lastUpdate)); // form parameter
        if (selectedGroupIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedGroupIds",
                ClientUtils.Serialize(selectedGroupIds)); // form parameter
        if (selectedAlertIds != null)
            localVarRequestOptions.FormParameters.Add("SelectedAlertIds",
                ClientUtils.Serialize(selectedAlertIds)); // form parameter
        if (filterSettingsTimeRangeType != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.Type",
                ClientUtils.Serialize(filterSettingsTimeRangeType)); // form parameter
        if (filterSettingsTimeRangeRelativeMinutes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.RelativeMinutes",
                ClientUtils.ParameterToString(filterSettingsTimeRangeRelativeMinutes)); // form parameter
        if (filterSettingsTimeRangeFromDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.FromDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeFromDateTime)); // form parameter
        if (filterSettingsTimeRangeToDateTime != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.ToDateTime",
                ClientUtils.ParameterToString(filterSettingsTimeRangeToDateTime)); // form parameter
        if (filterSettingsTimeRangeTimeWindowMode != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.TimeRange.TimeWindowMode",
                ClientUtils.Serialize(filterSettingsTimeRangeTimeWindowMode)); // form parameter
        if (filterSettingsIncludeStatusSeverityHigh != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityHigh",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityHigh)); // form parameter
        if (filterSettingsIncludeStatusSeverityMedium != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityMedium",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityMedium)); // form parameter
        if (filterSettingsIncludeStatusSeverityLow != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.SeverityLow",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusSeverityLow)); // form parameter
        if (filterSettingsIncludeStatusReadYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadYes)); // form parameter
        if (filterSettingsIncludeStatusReadNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ReadNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusReadNo)); // form parameter
        if (filterSettingsIncludeStatusClearedYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedYes)); // form parameter
        if (filterSettingsIncludeStatusClearedNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.ClearedNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusClearedNo)); // form parameter
        if (filterSettingsIncludeStatusStatusEvent != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEvent",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEvent)); // form parameter
        if (filterSettingsIncludeStatusStatusActive != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusActive",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusActive)); // form parameter
        if (filterSettingsIncludeStatusStatusEnded != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.StatusEnded",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusStatusEnded)); // form parameter
        if (filterSettingsIncludeStatusCommentYes != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentYes",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentYes)); // form parameter
        if (filterSettingsIncludeStatusCommentNo != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeStatus.CommentNo",
                ClientUtils.ParameterToString(filterSettingsIncludeStatusCommentNo)); // form parameter
        if (filterSettingsIncludeAlertTypeIds != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.IncludeAlertTypeIds",
                ClientUtils.Serialize(filterSettingsIncludeAlertTypeIds)); // form parameter
        if (filterSettingsSelectedTags != null)
            localVarRequestOptions.FormParameters.Add("FilterSettings.SelectedTags",
                ClientUtils.Serialize(filterSettingsSelectedTags)); // form parameter
        if (channelInstanceRefs != null)
            localVarRequestOptions.FormParameters.Add("ChannelInstanceRefs",
                ClientUtils.Serialize(channelInstanceRefs)); // form parameter

        localVarRequestOptions.Operation = "AlertInboxApiApi.AlertsInboxUnreadAlert";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/unreadalert",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("AlertsInboxUnreadAlert", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        string? author = default, string? comment = default, int operationIndex = 0)
    {
        ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostWithHttpInfo(alertInboxSelectionDto, author, comment);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, string? author = default, string? comment = default,
        int operationIndex = 0)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (author != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "author", author));
        if (comment != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "comment", comment));
        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/add-alert-commentjson",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, string? author = default, string? comment = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostWithHttpInfoAsync(alertInboxSelectionDto, author, comment,
            operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxAddAlertCommentjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, string? author = default, string? comment = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (author != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "author", author));
        if (comment != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "comment", comment));
        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<object>("/api/Alerts/alertsgroupinbox/add-alert-commentjson", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxAddAlertCommentjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        string? author = default, string? comment = default, int operationIndex = 0)
    {
        ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostWithHttpInfo(alertInboxSelectionDto, author, comment);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, string? author = default, string? comment = default,
        int operationIndex = 0)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (author != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "author", author));
        if (comment != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "comment", comment));
        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/add-group-commentjson",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, string? author = default, string? comment = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostWithHttpInfoAsync(alertInboxSelectionDto, author, comment,
            operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="author"> (optional)</param>
    /// <param name="comment"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxAddGroupCommentjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, string? author = default, string? comment = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (author != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "author", author));
        if (comment != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "comment", comment));
        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<object>("/api/Alerts/alertsgroupinbox/add-group-commentjson", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxAddGroupCommentjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiAlertsAlertsgroupinboxClearalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0)
    {
        ApiAlertsAlertsgroupinboxClearalertjsonPostWithHttpInfo(alertInboxSelectionDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiAlertsAlertsgroupinboxClearalertjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxClearalertjsonPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxClearalertjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/clearalertjson",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxClearalertjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiAlertsAlertsgroupinboxClearalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiAlertsAlertsgroupinboxClearalertjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxClearalertjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxClearalertjsonPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxClearalertjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/clearalertjson",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxClearalertjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiAlertsAlertsgroupinboxClearjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0)
    {
        ApiAlertsAlertsgroupinboxClearjsonPostWithHttpInfo(alertInboxSelectionDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiAlertsAlertsgroupinboxClearjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxClearjsonPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxClearjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/clearjson", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxClearjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiAlertsAlertsgroupinboxClearjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiAlertsAlertsgroupinboxClearjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxClearjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxClearjsonPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxClearjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/clearjson",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxClearjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>bool</returns>
    public bool ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPost(string? name = default, int operationIndex = 0)
    {
        var localVarResponse = ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostWithHttpInfo(name);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of bool</returns>
    public ApiResponse<bool> ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostWithHttpInfo(string? name = default,
        int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (name != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<bool>("/api/Alerts/alertsgroupinbox/deletecustomfilterjson",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of bool</returns>
    public async Task<bool> ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostAsync(string? name = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostWithHttpInfoAsync(name, operationIndex,
                cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (bool)</returns>
    public async Task<ApiResponse<bool>> ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPostWithHttpInfoAsync(
        string? name = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (name != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<bool>("/api/Alerts/alertsgroupinbox/deletecustomfilterjson", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxDeletecustomfilterjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiAlertsAlertsgroupinboxReadalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0)
    {
        ApiAlertsAlertsgroupinboxReadalertjsonPostWithHttpInfo(alertInboxSelectionDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiAlertsAlertsgroupinboxReadalertjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxReadalertjsonPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxReadalertjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/readalertjson", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxReadalertjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiAlertsAlertsgroupinboxReadalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiAlertsAlertsgroupinboxReadalertjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxReadalertjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxReadalertjsonPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxReadalertjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/readalertjson",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxReadalertjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiAlertsAlertsgroupinboxReadjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0)
    {
        ApiAlertsAlertsgroupinboxReadjsonPostWithHttpInfo(alertInboxSelectionDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiAlertsAlertsgroupinboxReadjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxReadjsonPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxReadjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Post<object>("/api/Alerts/alertsgroupinbox/readjson", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxReadjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiAlertsAlertsgroupinboxReadjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiAlertsAlertsgroupinboxReadjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxReadjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxReadjsonPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxReadjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/readjson",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxReadjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="filterSettingsDto"></param>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost(FilterSettingsDto filterSettingsDto,
        string? name = default, int operationIndex = 0)
    {
        ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostWithHttpInfo(filterSettingsDto, name);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="filterSettingsDto"></param>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostWithHttpInfo(
        FilterSettingsDto filterSettingsDto, string? name = default, int operationIndex = 0)
    {
        // verify the required parameter 'filterSettingsDto' is set
        if (filterSettingsDto == null)
            throw new ApiException(400,
                "Missing required parameter 'filterSettingsDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (name != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));
        localVarRequestOptions.Data = filterSettingsDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/savecustomfilterjson",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="filterSettingsDto"></param>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostAsync(FilterSettingsDto filterSettingsDto,
        string? name = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostWithHttpInfoAsync(filterSettingsDto, name,
            operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="filterSettingsDto"></param>
    /// <param name="name"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxSavecustomfilterjsonPostWithHttpInfoAsync(
        FilterSettingsDto filterSettingsDto, string? name = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'filterSettingsDto' is set
        if (filterSettingsDto == null)
            throw new ApiException(400,
                "Missing required parameter 'filterSettingsDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        if (name != null) localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "name", name));
        localVarRequestOptions.Data = filterSettingsDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<object>("/api/Alerts/alertsgroupinbox/savecustomfilterjson", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxSavecustomfilterjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiAlertsAlertsgroupinboxUnclearalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0)
    {
        ApiAlertsAlertsgroupinboxUnclearalertjsonPostWithHttpInfo(alertInboxSelectionDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiAlertsAlertsgroupinboxUnclearalertjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnclearalertjsonPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnclearalertjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/unclearalertjson",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxUnclearalertjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiAlertsAlertsgroupinboxUnclearalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiAlertsAlertsgroupinboxUnclearalertjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxUnclearalertjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnclearalertjsonPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnclearalertjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<object>("/api/Alerts/alertsgroupinbox/unclearalertjson", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxUnclearalertjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiAlertsAlertsgroupinboxUnclearjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0)
    {
        ApiAlertsAlertsgroupinboxUnclearjsonPostWithHttpInfo(alertInboxSelectionDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiAlertsAlertsgroupinboxUnclearjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnclearjsonPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnclearjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/unclearjson", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxUnclearjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiAlertsAlertsgroupinboxUnclearjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiAlertsAlertsgroupinboxUnclearjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxUnclearjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnclearjsonPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnclearjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/unclearjson",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxUnclearjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiAlertsAlertsgroupinboxUnreadalertjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0)
    {
        ApiAlertsAlertsgroupinboxUnreadalertjsonPostWithHttpInfo(alertInboxSelectionDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiAlertsAlertsgroupinboxUnreadalertjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnreadalertjsonPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnreadalertjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/unreadalertjson",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxUnreadalertjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiAlertsAlertsgroupinboxUnreadalertjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiAlertsAlertsgroupinboxUnreadalertjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxUnreadalertjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnreadalertjsonPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnreadalertjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<object>("/api/Alerts/alertsgroupinbox/unreadalertjson", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxUnreadalertjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiAlertsAlertsgroupinboxUnreadjsonPost(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0)
    {
        ApiAlertsAlertsgroupinboxUnreadjsonPostWithHttpInfo(alertInboxSelectionDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiAlertsAlertsgroupinboxUnreadjsonPostWithHttpInfo(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnreadjsonPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnreadjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/Alerts/alertsgroupinbox/unreadjson", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxUnreadjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiAlertsAlertsgroupinboxUnreadjsonPostAsync(AlertInboxSelectionDto alertInboxSelectionDto,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiAlertsAlertsgroupinboxUnreadjsonPostWithHttpInfoAsync(alertInboxSelectionDto, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="alertInboxSelectionDto"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiAlertsAlertsgroupinboxUnreadjsonPostWithHttpInfoAsync(
        AlertInboxSelectionDto alertInboxSelectionDto, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'alertInboxSelectionDto' is set
        if (alertInboxSelectionDto == null)
            throw new ApiException(400,
                "Missing required parameter 'alertInboxSelectionDto' when calling AlertInboxApiApi->ApiAlertsAlertsgroupinboxUnreadjsonPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = alertInboxSelectionDto;

        localVarRequestOptions.Operation = "AlertInboxApiApi.ApiAlertsAlertsgroupinboxUnreadjsonPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<object>("/api/Alerts/alertsgroupinbox/unreadjson",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiAlertsAlertsgroupinboxUnreadjsonPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}