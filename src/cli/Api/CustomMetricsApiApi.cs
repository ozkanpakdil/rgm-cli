/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using cli.Client;
using cli.Model;

namespace cli.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ICustomMetricsApiApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>StringJSendSuccess</returns>
    StringJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDelete(string baseMonitorName,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of StringJSendSuccess</returns>
    ApiResponse<StringJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDeleteWithHttpInfo(
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>StringJSendSuccess</returns>
    StringJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePut(string baseMonitorName,
        bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of StringJSendSuccess</returns>
    ApiResponse<StringJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePutWithHttpInfo(
        string baseMonitorName, bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>DatabaseDtoIEnumerableJSendSuccess</returns>
    DatabaseDtoIEnumerableJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGet(
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of DatabaseDtoIEnumerableJSendSuccess</returns>
    ApiResponse<DatabaseDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGetWithHttpInfo(string baseMonitorName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>StringJSendSuccess</returns>
    StringJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDelete(string baseMonitorName,
        List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of StringJSendSuccess</returns>
    ApiResponse<StringJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDeleteWithHttpInfo(
        string baseMonitorName, List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>StringJSendSuccess</returns>
    StringJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePut(string baseMonitorName,
        bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of StringJSendSuccess</returns>
    ApiResponse<StringJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePutWithHttpInfo(
        string baseMonitorName, bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>CustomMetricsGridDtoIEnumerableJSendSuccess</returns>
    CustomMetricsGridDtoIEnumerableJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGet(
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of CustomMetricsGridDtoIEnumerableJSendSuccess</returns>
    ApiResponse<CustomMetricsGridDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGetWithHttpInfo(string baseMonitorName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>MonitoredEntityTreeDtoJSendSuccess</returns>
    MonitoredEntityTreeDtoJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGet(
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of MonitoredEntityTreeDtoJSendSuccess</returns>
    ApiResponse<MonitoredEntityTreeDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGetWithHttpInfo(
            string baseMonitorName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="customMetricDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>IntegerIdentifierJSendSuccess</returns>
    IntegerIdentifierJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPost(string baseMonitorName,
        CustomMetricDto? customMetricDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="customMetricDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of IntegerIdentifierJSendSuccess</returns>
    ApiResponse<IntegerIdentifierJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPostWithHttpInfo(
        string baseMonitorName, CustomMetricDto? customMetricDto = default, int operationIndex = 0);

    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ICustomMetricsApiApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of StringJSendSuccess</returns>
    Task<StringJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDeleteAsync(
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (StringJSendSuccess)</returns>
    Task<ApiResponse<StringJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDeleteWithHttpInfoAsync(string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of StringJSendSuccess</returns>
    Task<StringJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePutAsync(
        string baseMonitorName, bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (StringJSendSuccess)</returns>
    Task<ApiResponse<StringJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePutWithHttpInfoAsync(string baseMonitorName,
            bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DatabaseDtoIEnumerableJSendSuccess</returns>
    Task<DatabaseDtoIEnumerableJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGetAsync(
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DatabaseDtoIEnumerableJSendSuccess)</returns>
    Task<ApiResponse<DatabaseDtoIEnumerableJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGetWithHttpInfoAsync(string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of StringJSendSuccess</returns>
    Task<StringJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDeleteAsync(string baseMonitorName,
        List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (StringJSendSuccess)</returns>
    Task<ApiResponse<StringJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDeleteWithHttpInfoAsync(string baseMonitorName,
            List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of StringJSendSuccess</returns>
    Task<StringJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePutAsync(
        string baseMonitorName, bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (StringJSendSuccess)</returns>
    Task<ApiResponse<StringJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePutWithHttpInfoAsync(string baseMonitorName,
            bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CustomMetricsGridDtoIEnumerableJSendSuccess</returns>
    Task<CustomMetricsGridDtoIEnumerableJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGetAsync(
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CustomMetricsGridDtoIEnumerableJSendSuccess)</returns>
    Task<ApiResponse<CustomMetricsGridDtoIEnumerableJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGetWithHttpInfoAsync(string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of MonitoredEntityTreeDtoJSendSuccess</returns>
    Task<MonitoredEntityTreeDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGetAsync(string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (MonitoredEntityTreeDtoJSendSuccess)</returns>
    Task<ApiResponse<MonitoredEntityTreeDtoJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGetWithHttpInfoAsync(
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="customMetricDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of IntegerIdentifierJSendSuccess</returns>
    Task<IntegerIdentifierJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPostAsync(
        string baseMonitorName, CustomMetricDto? customMetricDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="customMetricDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (IntegerIdentifierJSendSuccess)</returns>
    Task<ApiResponse<IntegerIdentifierJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPostWithHttpInfoAsync(string baseMonitorName,
            CustomMetricDto? customMetricDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ICustomMetricsApiApi : ICustomMetricsApiApiSync, ICustomMetricsApiApiAsync
{
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class CustomMetricsApiApi : ICustomMetricsApiApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="CustomMetricsApiApi" /> class.
    /// </summary>
    /// <returns></returns>
    public CustomMetricsApiApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="CustomMetricsApiApi" /> class.
    /// </summary>
    /// <returns></returns>
    public CustomMetricsApiApi(string basePath)
    {
        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="CustomMetricsApiApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public CustomMetricsApiApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="CustomMetricsApiApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public CustomMetricsApiApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>StringJSendSuccess</returns>
    public StringJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDelete(
        string baseMonitorName, int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDeleteWithHttpInfo(baseMonitorName);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of StringJSendSuccess</returns>
    public ApiResponse<StringJSendSuccess>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDeleteWithHttpInfo(string baseMonitorName,
            int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDelete");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Delete<StringJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/configuration/custom-metrics/alerts", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDelete",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of StringJSendSuccess</returns>
    public async Task<StringJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDeleteAsync(
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDeleteWithHttpInfoAsync(baseMonitorName,
                operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (StringJSendSuccess)</returns>
    public async Task<ApiResponse<StringJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDeleteWithHttpInfoAsync(string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDelete");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .DeleteAsync<StringJSendSuccess>("/api/basemonitors/{baseMonitorName}/configuration/custom-metrics/alerts",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsDelete",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>StringJSendSuccess</returns>
    public StringJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePut(
        string baseMonitorName, bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default,
        int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePutWithHttpInfo(baseMonitorName, enable,
                integerIdentifier);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of StringJSendSuccess</returns>
    public ApiResponse<StringJSendSuccess>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePutWithHttpInfo(string baseMonitorName,
            bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        if (enable != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "enable", enable));
        localVarRequestOptions.Data = integerIdentifier;

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Put<StringJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/configuration/custom-metrics/alerts/enable", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of StringJSendSuccess</returns>
    public async Task<StringJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePutAsync(
        string baseMonitorName, bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePutWithHttpInfoAsync(
                baseMonitorName, enable, integerIdentifier, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (StringJSendSuccess)</returns>
    public async Task<ApiResponse<StringJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePutWithHttpInfoAsync(string baseMonitorName,
            bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        if (enable != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "enable", enable));
        localVarRequestOptions.Data = integerIdentifier;

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<StringJSendSuccess>(
                "/api/basemonitors/{baseMonitorName}/configuration/custom-metrics/alerts/enable",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsAlertsEnablePut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>DatabaseDtoIEnumerableJSendSuccess</returns>
    public DatabaseDtoIEnumerableJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGet(
        string baseMonitorName, int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGetWithHttpInfo(baseMonitorName);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of DatabaseDtoIEnumerableJSendSuccess</returns>
    public ApiResponse<DatabaseDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGetWithHttpInfo(string baseMonitorName,
            int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<DatabaseDtoIEnumerableJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/configuration/custom-metrics/databases", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DatabaseDtoIEnumerableJSendSuccess</returns>
    public async Task<DatabaseDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGetAsync(string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGetWithHttpInfoAsync(baseMonitorName,
                operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DatabaseDtoIEnumerableJSendSuccess)</returns>
    public async Task<ApiResponse<DatabaseDtoIEnumerableJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGetWithHttpInfoAsync(string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<DatabaseDtoIEnumerableJSendSuccess>(
                "/api/basemonitors/{baseMonitorName}/configuration/custom-metrics/databases", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDatabasesGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>StringJSendSuccess</returns>
    public StringJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDelete(string baseMonitorName,
        List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDeleteWithHttpInfo(baseMonitorName,
                integerIdentifier);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of StringJSendSuccess</returns>
    public ApiResponse<StringJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDeleteWithHttpInfo(
        string baseMonitorName, List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDelete");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = integerIdentifier;

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Delete<StringJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/configuration/custom-metrics", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDelete",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of StringJSendSuccess</returns>
    public async Task<StringJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDeleteAsync(
        string baseMonitorName, List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDeleteWithHttpInfoAsync(baseMonitorName,
                integerIdentifier, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (StringJSendSuccess)</returns>
    public async Task<ApiResponse<StringJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDeleteWithHttpInfoAsync(string baseMonitorName,
            List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDelete");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = integerIdentifier;

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .DeleteAsync<StringJSendSuccess>("/api/basemonitors/{baseMonitorName}/configuration/custom-metrics",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsDelete",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>StringJSendSuccess</returns>
    public StringJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePut(string baseMonitorName,
        bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePutWithHttpInfo(baseMonitorName, enable,
                integerIdentifier);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of StringJSendSuccess</returns>
    public ApiResponse<StringJSendSuccess>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePutWithHttpInfo(string baseMonitorName,
            bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        if (enable != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "enable", enable));
        localVarRequestOptions.Data = integerIdentifier;

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Put<StringJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/configuration/custom-metrics/enable", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of StringJSendSuccess</returns>
    public async Task<StringJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePutAsync(
        string baseMonitorName, bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePutWithHttpInfoAsync(baseMonitorName,
                enable, integerIdentifier, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="enable"> (optional)</param>
    /// <param name="integerIdentifier"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (StringJSendSuccess)</returns>
    public async Task<ApiResponse<StringJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePutWithHttpInfoAsync(string baseMonitorName,
            bool? enable = default, List<IntegerIdentifier>? integerIdentifier = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        if (enable != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "enable", enable));
        localVarRequestOptions.Data = integerIdentifier;

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<StringJSendSuccess>("/api/basemonitors/{baseMonitorName}/configuration/custom-metrics/enable",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsEnablePut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>CustomMetricsGridDtoIEnumerableJSendSuccess</returns>
    public CustomMetricsGridDtoIEnumerableJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGet(
        string baseMonitorName, int operationIndex = 0)
    {
        var localVarResponse = ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGetWithHttpInfo(baseMonitorName);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of CustomMetricsGridDtoIEnumerableJSendSuccess</returns>
    public ApiResponse<CustomMetricsGridDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGetWithHttpInfo(string baseMonitorName,
            int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<CustomMetricsGridDtoIEnumerableJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/configuration/custom-metrics", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CustomMetricsGridDtoIEnumerableJSendSuccess</returns>
    public async Task<CustomMetricsGridDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGetAsync(string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGetWithHttpInfoAsync(baseMonitorName,
                operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CustomMetricsGridDtoIEnumerableJSendSuccess)</returns>
    public async Task<ApiResponse<CustomMetricsGridDtoIEnumerableJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGetWithHttpInfoAsync(string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<CustomMetricsGridDtoIEnumerableJSendSuccess>(
                "/api/basemonitors/{baseMonitorName}/configuration/custom-metrics", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>MonitoredEntityTreeDtoJSendSuccess</returns>
    public MonitoredEntityTreeDtoJSendSuccess
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGet(string baseMonitorName,
            int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGetWithHttpInfo(baseMonitorName);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of MonitoredEntityTreeDtoJSendSuccess</returns>
    public ApiResponse<MonitoredEntityTreeDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGetWithHttpInfo(
            string baseMonitorName,
            int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<MonitoredEntityTreeDtoJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/configuration/custom-metrics/monitored-entity-tree",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of MonitoredEntityTreeDtoJSendSuccess</returns>
    public async Task<MonitoredEntityTreeDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGetAsync(string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGetWithHttpInfoAsync(
                baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (MonitoredEntityTreeDtoJSendSuccess)</returns>
    public async Task<ApiResponse<MonitoredEntityTreeDtoJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGetWithHttpInfoAsync(
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<MonitoredEntityTreeDtoJSendSuccess>(
                "/api/basemonitors/{baseMonitorName}/configuration/custom-metrics/monitored-entity-tree",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsMonitoredEntityTreeGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="customMetricDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>IntegerIdentifierJSendSuccess</returns>
    public IntegerIdentifierJSendSuccess ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPost(
        string baseMonitorName, CustomMetricDto? customMetricDto = default, int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPostWithHttpInfo(baseMonitorName, customMetricDto);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="customMetricDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of IntegerIdentifierJSendSuccess</returns>
    public ApiResponse<IntegerIdentifierJSendSuccess>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPostWithHttpInfo(string baseMonitorName,
            CustomMetricDto? customMetricDto = default, int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = customMetricDto;

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<IntegerIdentifierJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/configuration/custom-metrics", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPost",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="customMetricDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of IntegerIdentifierJSendSuccess</returns>
    public async Task<IntegerIdentifierJSendSuccess> ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPostAsync(
        string baseMonitorName, CustomMetricDto? customMetricDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPostWithHttpInfoAsync(baseMonitorName,
                customMetricDto, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="customMetricDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (IntegerIdentifierJSendSuccess)</returns>
    public async Task<ApiResponse<IntegerIdentifierJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPostWithHttpInfoAsync(string baseMonitorName,
            CustomMetricDto? customMetricDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling CustomMetricsApiApi->ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = customMetricDto;

        localVarRequestOptions.Operation =
            "CustomMetricsApiApi.ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<IntegerIdentifierJSendSuccess>(
                "/api/basemonitors/{baseMonitorName}/configuration/custom-metrics", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameConfigurationCustomMetricsPost",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}