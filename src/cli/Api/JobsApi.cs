/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Threading;
using System.Threading.Tasks;
using cli.Client;

namespace cli.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IJobsApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGet(string clusterName,
        string instanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGetWithHttpInfo(
        string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGet(string clusterName,
        string instanceName, string jobName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGetWithHttpInfo(
            string clusterName,
            string instanceName, string jobName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGet(
        string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGetWithHttpInfo(
            string clusterName, string machineName, string instanceName, string baseMonitorName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet(
        string clusterName, string machineName, string instanceName, string jobName, string baseMonitorName,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGetWithHttpInfo(
            string clusterName, string machineName, string instanceName, string jobName, string baseMonitorName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGet(string machineName,
        string instanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGetWithHttpInfo(
            string machineName, string instanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGet(
        string machineName, string instanceName, string jobName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGetWithHttpInfo(
            string machineName, string instanceName, string jobName, string baseMonitorName, int operationIndex = 0);

    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IJobsApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGetAsync(string clusterName,
        string instanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGetWithHttpInfoAsync(
            string clusterName,
            string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGetAsync(string clusterName,
        string instanceName, string jobName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGetWithHttpInfoAsync(
            string clusterName, string instanceName, string jobName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGetAsync(
        string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGetWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGetAsync(
        string clusterName, string machineName, string instanceName, string jobName, string baseMonitorName,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGetWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string jobName, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGetAsync(
        string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGetWithHttpInfoAsync(
            string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGetAsync(
        string machineName, string instanceName, string jobName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGetWithHttpInfoAsync(
            string machineName, string instanceName, string jobName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IJobsApi : IJobsApiSync, IJobsApiAsync
{
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class JobsApi : IJobsApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="JobsApi" /> class.
    /// </summary>
    /// <returns></returns>
    public JobsApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="JobsApi" /> class.
    /// </summary>
    /// <returns></returns>
    public JobsApi(string basePath)
    {
        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="JobsApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public JobsApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="JobsApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public JobsApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGet(string clusterName,
        string instanceName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGetWithHttpInfo(clusterName,
            instanceName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGetWithHttpInfo(string clusterName,
            string instanceName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/jobs",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGetAsync(
        string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGetWithHttpInfoAsync(
            clusterName, instanceName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGetWithHttpInfoAsync(
            string clusterName,
            string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/jobs",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGet(string clusterName,
        string instanceName, string jobName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGetWithHttpInfo(clusterName,
            instanceName, jobName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGetWithHttpInfo(
            string clusterName,
            string instanceName, string jobName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/jobs/{jobName}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGetAsync(
        string clusterName, string instanceName, string jobName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGetWithHttpInfoAsync(
                clusterName, instanceName, jobName, baseMonitorName, operationIndex, cancellationToken)
            .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGetWithHttpInfoAsync(
            string clusterName, string instanceName, string jobName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/jobs/{jobName}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGet(
        string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGetWithHttpInfo(
            clusterName, machineName, instanceName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGetWithHttpInfo(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGet");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/jobs",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGetAsync(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGetWithHttpInfoAsync(
                    clusterName, machineName, instanceName, baseMonitorName, operationIndex, cancellationToken)
                .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGetWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGet");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/jobs",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet(
        string clusterName, string machineName, string instanceName, string jobName, string baseMonitorName,
        int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGetWithHttpInfo(
            clusterName, machineName, instanceName, jobName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGetWithHttpInfo(
            string clusterName, string machineName, string instanceName, string jobName, string baseMonitorName,
            int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/jobs/{jobName}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGetAsync(
            string clusterName, string machineName, string instanceName, string jobName, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGetWithHttpInfoAsync(
                    clusterName, machineName, instanceName, jobName, baseMonitorName, operationIndex, cancellationToken)
                .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGetWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string jobName, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/jobs/{jobName}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGet(
        string machineName, string instanceName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGetWithHttpInfo(machineName,
            instanceName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGetWithHttpInfo(
            string machineName, string instanceName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobsApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/jobs",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGetAsync(
        string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGetWithHttpInfoAsync(
            machineName, instanceName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGetWithHttpInfoAsync(
            string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobsApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/jobs",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGet(
        string machineName, string instanceName, string jobName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGetWithHttpInfo(
            machineName, instanceName, jobName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGetWithHttpInfo(
            string machineName, string instanceName, string jobName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobsApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/jobs/{jobName}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGetAsync(
            string machineName, string instanceName, string jobName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGetWithHttpInfoAsync(
                    machineName, instanceName, jobName, baseMonitorName, operationIndex, cancellationToken)
                .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGetWithHttpInfoAsync(
            string machineName, string instanceName, string jobName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobsApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/jobs/{jobName}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}