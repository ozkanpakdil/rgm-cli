/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Threading;
using System.Threading.Tasks;
using cli.Client;
using cli.Model;

namespace cli.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISqlServerInstanceAlertSettingsApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatch(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            string? body = default,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            string? body = default,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGet(
        string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatch(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatch(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            Hashtable? requestBody = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfo(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            Hashtable? requestBody = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatch(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0);

    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISqlServerInstanceAlertSettingsApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatchAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            string? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            string? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGetAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatchAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatchAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfoAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatchAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ISqlServerInstanceAlertSettingsApi : ISqlServerInstanceAlertSettingsApiSync,
    ISqlServerInstanceAlertSettingsApiAsync
{
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class SqlServerInstanceAlertSettingsApi : ISqlServerInstanceAlertSettingsApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="SqlServerInstanceAlertSettingsApi" /> class.
    /// </summary>
    /// <returns></returns>
    public SqlServerInstanceAlertSettingsApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="SqlServerInstanceAlertSettingsApi" /> class.
    /// </summary>
    /// <returns></returns>
    public SqlServerInstanceAlertSettingsApi(string basePath)
    {
        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="SqlServerInstanceAlertSettingsApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public SqlServerInstanceAlertSettingsApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="SqlServerInstanceAlertSettingsApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public SqlServerInstanceAlertSettingsApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatch(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            string? body = default,
            int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            instanceName, alertTypeId, baseMonitorName, linuxMachineName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            string? body = default,
            int operationIndex = 0)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "SqlServerInstanceAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Patch<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/alertsettings/{alertTypeId}/comments",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatchAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            string? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
                    instanceName, alertTypeId, baseMonitorName, linuxMachineName, body, operationIndex,
                    cancellationToken)
                .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            string? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "SqlServerInstanceAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/alertsettings/{alertTypeId}/comments",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdCommentsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGet(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            instanceName, alertTypeId, baseMonitorName, linuxMachineName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            int operationIndex = 0)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter

        localVarRequestOptions.Operation =
            "SqlServerInstanceAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/alertsettings/{alertTypeId}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGetAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
                    instanceName, alertTypeId, baseMonitorName, linuxMachineName, operationIndex, cancellationToken)
                .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter

        localVarRequestOptions.Operation =
            "SqlServerInstanceAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/alertsettings/{alertTypeId}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatch(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            instanceName, alertTypeId, baseMonitorName, linuxMachineName, alertNotificationSettingsDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.Data = alertNotificationSettingsDto;

        localVarRequestOptions.Operation =
            "SqlServerInstanceAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Patch<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/alertsettings/{alertTypeId}/notificationsettings",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatchAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
                instanceName, alertTypeId, baseMonitorName, linuxMachineName, alertNotificationSettingsDto,
                operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.Data = alertNotificationSettingsDto;

        localVarRequestOptions.Operation =
            "SqlServerInstanceAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/alertsettings/{alertTypeId}/notificationsettings",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdNotificationsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatch(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            Hashtable? requestBody = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfo(
            instanceName, alertTypeId, baseMonitorName, linuxMachineName, requestBody);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfo(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            Hashtable? requestBody = default, int operationIndex = 0)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.Data = requestBody;

        localVarRequestOptions.Operation =
            "SqlServerInstanceAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Patch<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/alertsettings/{alertTypeId}/specificsettings",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatchAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfoAsync(
                instanceName, alertTypeId, baseMonitorName, linuxMachineName, requestBody, operationIndex,
                cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfoAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.Data = requestBody;

        localVarRequestOptions.Operation =
            "SqlServerInstanceAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/alertsettings/{alertTypeId}/specificsettings",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdSpecificsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatch(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            instanceName, alertTypeId, baseMonitorName, linuxMachineName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "SqlServerInstanceAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Patch<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/alertsettings/{alertTypeId}/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatchAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
                    instanceName, alertTypeId, baseMonitorName, linuxMachineName, body, operationIndex,
                    cancellationToken)
                .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
            string instanceName, long alertTypeId, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling SqlServerInstanceAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "SqlServerInstanceAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/alertsettings/{alertTypeId}/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameAlertsettingsAlertTypeIdStatusPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}