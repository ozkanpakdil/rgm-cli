/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Threading;
using System.Threading.Tasks;
using cli.Client;
using cli.Model;

namespace cli.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IJobAlertSettingsApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet(
        string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfo(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, string? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, string? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, AlertNotificationSettingsDto? alertNotificationSettingsDto = default,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, AlertNotificationSettingsDto? alertNotificationSettingsDto = default,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfo(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfo(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0);

    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IJobAlertSettingsApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfoAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, string? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, string? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, AlertNotificationSettingsDto? alertNotificationSettingsDto = default,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, AlertNotificationSettingsDto? alertNotificationSettingsDto = default,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfoAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfoAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IJobAlertSettingsApi : IJobAlertSettingsApiSync, IJobAlertSettingsApiAsync
{
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class JobAlertSettingsApi : IJobAlertSettingsApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="JobAlertSettingsApi" /> class.
    /// </summary>
    /// <returns></returns>
    public JobAlertSettingsApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="JobAlertSettingsApi" /> class.
    /// </summary>
    /// <returns></returns>
    public JobAlertSettingsApi(string basePath)
    {
        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="JobAlertSettingsApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public JobAlertSettingsApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="JobAlertSettingsApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public JobAlertSettingsApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            clusterName, instanceName, jobName, alertTypeId, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Patch<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/comments",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
                clusterName, instanceName, jobName, alertTypeId, baseMonitorName, body, operationIndex,
                cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/comments",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            clusterName, instanceName, jobName, alertTypeId, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
                    clusterName, instanceName, jobName, alertTypeId, baseMonitorName, operationIndex, cancellationToken)
                .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            clusterName, instanceName, jobName, alertTypeId, baseMonitorName, alertNotificationSettingsDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = alertNotificationSettingsDto;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Patch<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/notificationsettings",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
                clusterName, instanceName, jobName, alertTypeId, baseMonitorName, alertNotificationSettingsDto,
                operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = alertNotificationSettingsDto;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PatchAsync<object>(
            "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/notificationsettings",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfo(
            clusterName, instanceName, jobName, alertTypeId, baseMonitorName, requestBody);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfo(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = requestBody;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Patch<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/specificsettings",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfoAsync(
                clusterName, instanceName, jobName, alertTypeId, baseMonitorName, requestBody, operationIndex,
                cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfoAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = requestBody;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/specificsettings",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            clusterName, instanceName, jobName, alertTypeId, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Patch<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
                clusterName, instanceName, jobName, alertTypeId, baseMonitorName, body, operationIndex,
                cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
            string clusterName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, string? body = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            clusterName, machineName, instanceName, jobName, alertTypeId, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, string? body = default, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Patch<object>(
            "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/comments",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, string? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
                clusterName, machineName, instanceName, jobName, alertTypeId, baseMonitorName, body, operationIndex,
                cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, string? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PatchAsync<object>(
            "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/comments",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            clusterName, machineName, instanceName, jobName, alertTypeId, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
                clusterName, machineName, instanceName, jobName, alertTypeId, baseMonitorName, operationIndex,
                cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, AlertNotificationSettingsDto? alertNotificationSettingsDto = default,
            int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            clusterName, machineName, instanceName, jobName, alertTypeId, baseMonitorName,
            alertNotificationSettingsDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, AlertNotificationSettingsDto? alertNotificationSettingsDto = default,
            int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = alertNotificationSettingsDto;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Patch<object>(
            "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/notificationsettings",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, AlertNotificationSettingsDto? alertNotificationSettingsDto = default,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
                clusterName, machineName, instanceName, jobName, alertTypeId, baseMonitorName,
                alertNotificationSettingsDto, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, AlertNotificationSettingsDto? alertNotificationSettingsDto = default,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = alertNotificationSettingsDto;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PatchAsync<object>(
            "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/notificationsettings",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int? body = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            clusterName, machineName, instanceName, jobName, alertTypeId, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int? body = default, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Patch<object>(
            "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/status",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
                clusterName, machineName, instanceName, jobName, alertTypeId, baseMonitorName, body, operationIndex,
                cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string jobName, long alertTypeId,
            string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PatchAsync<object>(
            "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/status",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            linuxMachineName, instanceName, jobName, alertTypeId, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Patch<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/comments",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
                linuxMachineName, instanceName, jobName, alertTypeId, baseMonitorName, body, operationIndex,
                cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/comments",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            linuxMachineName, instanceName, jobName, alertTypeId, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
                linuxMachineName, instanceName, jobName, alertTypeId, baseMonitorName, operationIndex,
                cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            linuxMachineName, instanceName, jobName, alertTypeId, baseMonitorName, alertNotificationSettingsDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = alertNotificationSettingsDto;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Patch<object>(
            "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/notificationsettings",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
                linuxMachineName, instanceName, jobName, alertTypeId, baseMonitorName, alertNotificationSettingsDto,
                operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = alertNotificationSettingsDto;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PatchAsync<object>(
            "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/notificationsettings",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfo(
            linuxMachineName, instanceName, jobName, alertTypeId, baseMonitorName, requestBody);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfo(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = requestBody;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Patch<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/specificsettings",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfoAsync(
                linuxMachineName, instanceName, jobName, alertTypeId, baseMonitorName, requestBody, operationIndex,
                cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfoAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = requestBody;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PatchAsync<object>(
            "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/specificsettings",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            linuxMachineName, instanceName, jobName, alertTypeId, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Patch<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
                linuxMachineName, instanceName, jobName, alertTypeId, baseMonitorName, body, operationIndex,
                cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
            string linuxMachineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            machineName, instanceName, jobName, alertTypeId, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfo(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Patch<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/comments",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
                machineName, instanceName, jobName, alertTypeId, baseMonitorName, body, operationIndex,
                cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatchWithHttpInfoAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            string? body = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/comments",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdCommentsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            machineName, instanceName, jobName, alertTypeId, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfo(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
                    machineName, instanceName, jobName, alertTypeId, baseMonitorName, operationIndex, cancellationToken)
                .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGetWithHttpInfoAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            machineName, instanceName, jobName, alertTypeId, baseMonitorName, alertNotificationSettingsDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfo(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = alertNotificationSettingsDto;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Patch<object>(
            "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/notificationsettings",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
                machineName, instanceName, jobName, alertTypeId, baseMonitorName, alertNotificationSettingsDto,
                operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertNotificationSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatchWithHttpInfoAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            AlertNotificationSettingsDto? alertNotificationSettingsDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = alertNotificationSettingsDto;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PatchAsync<object>(
            "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/notificationsettings",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdNotificationsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfo(
            machineName, instanceName, jobName, alertTypeId, baseMonitorName, requestBody);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfo(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = requestBody;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Patch<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/specificsettings",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfoAsync(
                machineName, instanceName, jobName, alertTypeId, baseMonitorName, requestBody, operationIndex,
                cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="requestBody"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatchWithHttpInfoAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            Hashtable? requestBody = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = requestBody;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PatchAsync<object>(
            "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/specificsettings",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdSpecificsettingsPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            machineName, instanceName, jobName, alertTypeId, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfo(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Patch<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
                machineName, instanceName, jobName, alertTypeId, baseMonitorName, body, operationIndex,
                cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="jobName"></param>
    /// <param name="alertTypeId"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatchWithHttpInfoAsync(
            string machineName, string instanceName, string jobName, long alertTypeId, string baseMonitorName,
            int? body = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'jobName' is set
        if (jobName == null)
            throw new ApiException(400,
                "Missing required parameter 'jobName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling JobAlertSettingsApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("jobName", ClientUtils.ParameterToString(jobName)); // path parameter
        localVarRequestOptions.PathParameters.Add("alertTypeId",
            ClientUtils.ParameterToString(alertTypeId)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "JobAlertSettingsApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PatchAsync<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/jobs/{jobName}/alertsettings/{alertTypeId}/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameJobsJobNameAlertsettingsAlertTypeIdStatusPatch",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}