/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Threading;
using System.Threading.Tasks;
using cli.Client;
using cli.Model;

namespace cli.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IConfigureAuthenticationApiApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="deleteDomainConnectionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>JSendSuccess</returns>
    JSendSuccess ApiConfigurationAuthAdDomainDelete(
        DeleteDomainConnectionRequest? deleteDomainConnectionRequest = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="deleteDomainConnectionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of JSendSuccess</returns>
    ApiResponse<JSendSuccess> ApiConfigurationAuthAdDomainDeleteWithHttpInfo(
        DeleteDomainConnectionRequest? deleteDomainConnectionRequest = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>JSendSuccess</returns>
    JSendSuccess ApiConfigurationAuthAdDomainPost(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of JSendSuccess</returns>
    ApiResponse<JSendSuccess> ApiConfigurationAuthAdDomainPostWithHttpInfo(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>JSendSuccess</returns>
    JSendSuccess ApiConfigurationAuthAdDomainTestPost(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of JSendSuccess</returns>
    ApiResponse<JSendSuccess> ApiConfigurationAuthAdDomainTestPostWithHttpInfo(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AuthenticationViewModelJSendSuccess</returns>
    AuthenticationViewModelJSendSuccess ApiConfigurationAuthAdGet(int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AuthenticationViewModelJSendSuccess</returns>
    ApiResponse<AuthenticationViewModelJSendSuccess> ApiConfigurationAuthAdGetWithHttpInfo(int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchToActiveDirectoryNewSettingsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>JSendSuccess</returns>
    JSendSuccess ApiConfigurationAuthAdPut(
        SwitchToActiveDirectoryNewSettingsRequest? switchToActiveDirectoryNewSettingsRequest = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchToActiveDirectoryNewSettingsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of JSendSuccess</returns>
    ApiResponse<JSendSuccess> ApiConfigurationAuthAdPutWithHttpInfo(
        SwitchToActiveDirectoryNewSettingsRequest? switchToActiveDirectoryNewSettingsRequest = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>OpenIdConnectSettingsDtoJSendSuccess</returns>
    OpenIdConnectSettingsDtoJSendSuccess ApiConfigurationAuthOidcGet(int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of OpenIdConnectSettingsDtoJSendSuccess</returns>
    ApiResponse<OpenIdConnectSettingsDtoJSendSuccess> ApiConfigurationAuthOidcGetWithHttpInfo(int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="openIdConnectSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>JSendSuccess</returns>
    JSendSuccess ApiConfigurationAuthOidcPut(OpenIdConnectSettingsDto? openIdConnectSettingsDto = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="openIdConnectSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of JSendSuccess</returns>
    ApiResponse<JSendSuccess> ApiConfigurationAuthOidcPutWithHttpInfo(
        OpenIdConnectSettingsDto? openIdConnectSettingsDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchAuthenticationTypeDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>JSendSuccess</returns>
    JSendSuccess ApiConfigurationAuthPost(SwitchAuthenticationTypeDto? switchAuthenticationTypeDto = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchAuthenticationTypeDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of JSendSuccess</returns>
    ApiResponse<JSendSuccess> ApiConfigurationAuthPostWithHttpInfo(
        SwitchAuthenticationTypeDto? switchAuthenticationTypeDto = default, int operationIndex = 0);

    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IConfigureAuthenticationApiApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="deleteDomainConnectionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of JSendSuccess</returns>
    Task<JSendSuccess> ApiConfigurationAuthAdDomainDeleteAsync(
        DeleteDomainConnectionRequest? deleteDomainConnectionRequest = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="deleteDomainConnectionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (JSendSuccess)</returns>
    Task<ApiResponse<JSendSuccess>> ApiConfigurationAuthAdDomainDeleteWithHttpInfoAsync(
        DeleteDomainConnectionRequest? deleteDomainConnectionRequest = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of JSendSuccess</returns>
    Task<JSendSuccess> ApiConfigurationAuthAdDomainPostAsync(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (JSendSuccess)</returns>
    Task<ApiResponse<JSendSuccess>> ApiConfigurationAuthAdDomainPostWithHttpInfoAsync(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of JSendSuccess</returns>
    Task<JSendSuccess> ApiConfigurationAuthAdDomainTestPostAsync(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (JSendSuccess)</returns>
    Task<ApiResponse<JSendSuccess>> ApiConfigurationAuthAdDomainTestPostWithHttpInfoAsync(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AuthenticationViewModelJSendSuccess</returns>
    Task<AuthenticationViewModelJSendSuccess> ApiConfigurationAuthAdGetAsync(int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AuthenticationViewModelJSendSuccess)</returns>
    Task<ApiResponse<AuthenticationViewModelJSendSuccess>> ApiConfigurationAuthAdGetWithHttpInfoAsync(
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchToActiveDirectoryNewSettingsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of JSendSuccess</returns>
    Task<JSendSuccess> ApiConfigurationAuthAdPutAsync(
        SwitchToActiveDirectoryNewSettingsRequest? switchToActiveDirectoryNewSettingsRequest = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchToActiveDirectoryNewSettingsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (JSendSuccess)</returns>
    Task<ApiResponse<JSendSuccess>> ApiConfigurationAuthAdPutWithHttpInfoAsync(
        SwitchToActiveDirectoryNewSettingsRequest? switchToActiveDirectoryNewSettingsRequest = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of OpenIdConnectSettingsDtoJSendSuccess</returns>
    Task<OpenIdConnectSettingsDtoJSendSuccess> ApiConfigurationAuthOidcGetAsync(int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (OpenIdConnectSettingsDtoJSendSuccess)</returns>
    Task<ApiResponse<OpenIdConnectSettingsDtoJSendSuccess>> ApiConfigurationAuthOidcGetWithHttpInfoAsync(
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="openIdConnectSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of JSendSuccess</returns>
    Task<JSendSuccess> ApiConfigurationAuthOidcPutAsync(OpenIdConnectSettingsDto? openIdConnectSettingsDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="openIdConnectSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (JSendSuccess)</returns>
    Task<ApiResponse<JSendSuccess>> ApiConfigurationAuthOidcPutWithHttpInfoAsync(
        OpenIdConnectSettingsDto? openIdConnectSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchAuthenticationTypeDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of JSendSuccess</returns>
    Task<JSendSuccess> ApiConfigurationAuthPostAsync(SwitchAuthenticationTypeDto? switchAuthenticationTypeDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchAuthenticationTypeDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (JSendSuccess)</returns>
    Task<ApiResponse<JSendSuccess>> ApiConfigurationAuthPostWithHttpInfoAsync(
        SwitchAuthenticationTypeDto? switchAuthenticationTypeDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IConfigureAuthenticationApiApi : IConfigureAuthenticationApiApiSync,
    IConfigureAuthenticationApiApiAsync
{
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class ConfigureAuthenticationApiApi : IConfigureAuthenticationApiApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="ConfigureAuthenticationApiApi" /> class.
    /// </summary>
    /// <returns></returns>
    public ConfigureAuthenticationApiApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="ConfigureAuthenticationApiApi" /> class.
    /// </summary>
    /// <returns></returns>
    public ConfigureAuthenticationApiApi(string basePath)
    {
        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="ConfigureAuthenticationApiApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public ConfigureAuthenticationApiApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="ConfigureAuthenticationApiApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public ConfigureAuthenticationApiApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="deleteDomainConnectionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>JSendSuccess</returns>
    public JSendSuccess ApiConfigurationAuthAdDomainDelete(
        DeleteDomainConnectionRequest? deleteDomainConnectionRequest = default, int operationIndex = 0)
    {
        var localVarResponse = ApiConfigurationAuthAdDomainDeleteWithHttpInfo(deleteDomainConnectionRequest);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="deleteDomainConnectionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of JSendSuccess</returns>
    public ApiResponse<JSendSuccess> ApiConfigurationAuthAdDomainDeleteWithHttpInfo(
        DeleteDomainConnectionRequest? deleteDomainConnectionRequest = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = deleteDomainConnectionRequest;

        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthAdDomainDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Delete<JSendSuccess>("/api/configuration/auth/ad/domain", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthAdDomainDelete", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="deleteDomainConnectionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of JSendSuccess</returns>
    public async Task<JSendSuccess> ApiConfigurationAuthAdDomainDeleteAsync(
        DeleteDomainConnectionRequest? deleteDomainConnectionRequest = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiConfigurationAuthAdDomainDeleteWithHttpInfoAsync(deleteDomainConnectionRequest, operationIndex,
                cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="deleteDomainConnectionRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (JSendSuccess)</returns>
    public async Task<ApiResponse<JSendSuccess>> ApiConfigurationAuthAdDomainDeleteWithHttpInfoAsync(
        DeleteDomainConnectionRequest? deleteDomainConnectionRequest = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = deleteDomainConnectionRequest;

        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthAdDomainDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.DeleteAsync<JSendSuccess>("/api/configuration/auth/ad/domain",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthAdDomainDelete", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>JSendSuccess</returns>
    public JSendSuccess ApiConfigurationAuthAdDomainPost(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0)
    {
        var localVarResponse = ApiConfigurationAuthAdDomainPostWithHttpInfo(activeDirectoryDomainViewModel);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of JSendSuccess</returns>
    public ApiResponse<JSendSuccess> ApiConfigurationAuthAdDomainPostWithHttpInfo(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = activeDirectoryDomainViewModel;

        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthAdDomainPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Post<JSendSuccess>("/api/configuration/auth/ad/domain", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthAdDomainPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of JSendSuccess</returns>
    public async Task<JSendSuccess> ApiConfigurationAuthAdDomainPostAsync(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiConfigurationAuthAdDomainPostWithHttpInfoAsync(activeDirectoryDomainViewModel, operationIndex,
                cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (JSendSuccess)</returns>
    public async Task<ApiResponse<JSendSuccess>> ApiConfigurationAuthAdDomainPostWithHttpInfoAsync(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = activeDirectoryDomainViewModel;

        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthAdDomainPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient.PostAsync<JSendSuccess>("/api/configuration/auth/ad/domain",
            localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthAdDomainPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>JSendSuccess</returns>
    public JSendSuccess ApiConfigurationAuthAdDomainTestPost(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0)
    {
        var localVarResponse = ApiConfigurationAuthAdDomainTestPostWithHttpInfo(activeDirectoryDomainViewModel);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of JSendSuccess</returns>
    public ApiResponse<JSendSuccess> ApiConfigurationAuthAdDomainTestPostWithHttpInfo(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = activeDirectoryDomainViewModel;

        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthAdDomainTestPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<JSendSuccess>("/api/configuration/auth/ad/domain/test",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthAdDomainTestPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of JSendSuccess</returns>
    public async Task<JSendSuccess> ApiConfigurationAuthAdDomainTestPostAsync(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiConfigurationAuthAdDomainTestPostWithHttpInfoAsync(activeDirectoryDomainViewModel, operationIndex,
                cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="activeDirectoryDomainViewModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (JSendSuccess)</returns>
    public async Task<ApiResponse<JSendSuccess>> ApiConfigurationAuthAdDomainTestPostWithHttpInfoAsync(
        ActiveDirectoryDomainViewModel? activeDirectoryDomainViewModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = activeDirectoryDomainViewModel;

        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthAdDomainTestPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<JSendSuccess>("/api/configuration/auth/ad/domain/test", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthAdDomainTestPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AuthenticationViewModelJSendSuccess</returns>
    public AuthenticationViewModelJSendSuccess ApiConfigurationAuthAdGet(int operationIndex = 0)
    {
        var localVarResponse = ApiConfigurationAuthAdGetWithHttpInfo();
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AuthenticationViewModelJSendSuccess</returns>
    public ApiResponse<AuthenticationViewModelJSendSuccess> ApiConfigurationAuthAdGetWithHttpInfo(
        int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthAdGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<AuthenticationViewModelJSendSuccess>("/api/configuration/auth/ad", localVarRequestOptions,
                Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthAdGet", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AuthenticationViewModelJSendSuccess</returns>
    public async Task<AuthenticationViewModelJSendSuccess> ApiConfigurationAuthAdGetAsync(int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse = await ApiConfigurationAuthAdGetWithHttpInfoAsync(operationIndex, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AuthenticationViewModelJSendSuccess)</returns>
    public async Task<ApiResponse<AuthenticationViewModelJSendSuccess>> ApiConfigurationAuthAdGetWithHttpInfoAsync(
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthAdGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<AuthenticationViewModelJSendSuccess>("/api/configuration/auth/ad", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthAdGet", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchToActiveDirectoryNewSettingsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>JSendSuccess</returns>
    public JSendSuccess ApiConfigurationAuthAdPut(
        SwitchToActiveDirectoryNewSettingsRequest? switchToActiveDirectoryNewSettingsRequest = default,
        int operationIndex = 0)
    {
        var localVarResponse = ApiConfigurationAuthAdPutWithHttpInfo(switchToActiveDirectoryNewSettingsRequest);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchToActiveDirectoryNewSettingsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of JSendSuccess</returns>
    public ApiResponse<JSendSuccess> ApiConfigurationAuthAdPutWithHttpInfo(
        SwitchToActiveDirectoryNewSettingsRequest? switchToActiveDirectoryNewSettingsRequest = default,
        int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = switchToActiveDirectoryNewSettingsRequest;

        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthAdPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<JSendSuccess>("/api/configuration/auth/ad", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthAdPut", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchToActiveDirectoryNewSettingsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of JSendSuccess</returns>
    public async Task<JSendSuccess> ApiConfigurationAuthAdPutAsync(
        SwitchToActiveDirectoryNewSettingsRequest? switchToActiveDirectoryNewSettingsRequest = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiConfigurationAuthAdPutWithHttpInfoAsync(switchToActiveDirectoryNewSettingsRequest, operationIndex,
                cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchToActiveDirectoryNewSettingsRequest"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (JSendSuccess)</returns>
    public async Task<ApiResponse<JSendSuccess>> ApiConfigurationAuthAdPutWithHttpInfoAsync(
        SwitchToActiveDirectoryNewSettingsRequest? switchToActiveDirectoryNewSettingsRequest = default,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = switchToActiveDirectoryNewSettingsRequest;

        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthAdPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<JSendSuccess>("/api/configuration/auth/ad", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthAdPut", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>OpenIdConnectSettingsDtoJSendSuccess</returns>
    public OpenIdConnectSettingsDtoJSendSuccess ApiConfigurationAuthOidcGet(int operationIndex = 0)
    {
        var localVarResponse = ApiConfigurationAuthOidcGetWithHttpInfo();
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of OpenIdConnectSettingsDtoJSendSuccess</returns>
    public ApiResponse<OpenIdConnectSettingsDtoJSendSuccess> ApiConfigurationAuthOidcGetWithHttpInfo(
        int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthOidcGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<OpenIdConnectSettingsDtoJSendSuccess>("/api/configuration/auth/oidc",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthOidcGet", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of OpenIdConnectSettingsDtoJSendSuccess</returns>
    public async Task<OpenIdConnectSettingsDtoJSendSuccess> ApiConfigurationAuthOidcGetAsync(int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse = await ApiConfigurationAuthOidcGetWithHttpInfoAsync(operationIndex, cancellationToken)
            .ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (OpenIdConnectSettingsDtoJSendSuccess)</returns>
    public async Task<ApiResponse<OpenIdConnectSettingsDtoJSendSuccess>> ApiConfigurationAuthOidcGetWithHttpInfoAsync(
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthOidcGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<OpenIdConnectSettingsDtoJSendSuccess>("/api/configuration/auth/oidc", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthOidcGet", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="openIdConnectSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>JSendSuccess</returns>
    public JSendSuccess ApiConfigurationAuthOidcPut(OpenIdConnectSettingsDto? openIdConnectSettingsDto = default,
        int operationIndex = 0)
    {
        var localVarResponse = ApiConfigurationAuthOidcPutWithHttpInfo(openIdConnectSettingsDto);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="openIdConnectSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of JSendSuccess</returns>
    public ApiResponse<JSendSuccess> ApiConfigurationAuthOidcPutWithHttpInfo(
        OpenIdConnectSettingsDto? openIdConnectSettingsDto = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = openIdConnectSettingsDto;

        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthOidcPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<JSendSuccess>("/api/configuration/auth/oidc", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthOidcPut", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="openIdConnectSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of JSendSuccess</returns>
    public async Task<JSendSuccess> ApiConfigurationAuthOidcPutAsync(
        OpenIdConnectSettingsDto? openIdConnectSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiConfigurationAuthOidcPutWithHttpInfoAsync(openIdConnectSettingsDto, operationIndex,
                cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="openIdConnectSettingsDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (JSendSuccess)</returns>
    public async Task<ApiResponse<JSendSuccess>> ApiConfigurationAuthOidcPutWithHttpInfoAsync(
        OpenIdConnectSettingsDto? openIdConnectSettingsDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = openIdConnectSettingsDto;

        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthOidcPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<JSendSuccess>("/api/configuration/auth/oidc", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthOidcPut", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchAuthenticationTypeDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>JSendSuccess</returns>
    public JSendSuccess ApiConfigurationAuthPost(SwitchAuthenticationTypeDto? switchAuthenticationTypeDto = default,
        int operationIndex = 0)
    {
        var localVarResponse = ApiConfigurationAuthPostWithHttpInfo(switchAuthenticationTypeDto);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchAuthenticationTypeDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of JSendSuccess</returns>
    public ApiResponse<JSendSuccess> ApiConfigurationAuthPostWithHttpInfo(
        SwitchAuthenticationTypeDto? switchAuthenticationTypeDto = default, int operationIndex = 0)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = switchAuthenticationTypeDto;

        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Post<JSendSuccess>("/api/configuration/auth", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchAuthenticationTypeDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of JSendSuccess</returns>
    public async Task<JSendSuccess> ApiConfigurationAuthPostAsync(
        SwitchAuthenticationTypeDto? switchAuthenticationTypeDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiConfigurationAuthPostWithHttpInfoAsync(switchAuthenticationTypeDto, operationIndex,
                cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="switchAuthenticationTypeDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (JSendSuccess)</returns>
    public async Task<ApiResponse<JSendSuccess>> ApiConfigurationAuthPostWithHttpInfoAsync(
        SwitchAuthenticationTypeDto? switchAuthenticationTypeDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.Data = switchAuthenticationTypeDto;

        localVarRequestOptions.Operation = "ConfigureAuthenticationApiApi.ApiConfigurationAuthPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<JSendSuccess>("/api/configuration/auth", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiConfigurationAuthPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}