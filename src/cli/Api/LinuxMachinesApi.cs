/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Threading;
using System.Threading.Tasks;
using cli.Client;
using cli.Model;

namespace cli.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ILinuxMachinesApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameLinuxmachinesGet(string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameLinuxmachinesGetWithHttpInfo(string baseMonitorName,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDelete(string linuxMachineName,
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDeleteWithHttpInfo(
        string linuxMachineName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGet(string linuxMachineName, string baseMonitorName,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGetWithHttpInfo(
        string linuxMachineName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGet(string linuxMachineName,
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGetWithHttpInfo(
        string linuxMachineName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="hostedSqlServerInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePut(string linuxMachineName,
        string instanceName, string baseMonitorName, HostedSqlServerInstanceDto? hostedSqlServerInstanceDto = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="hostedSqlServerInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePutWithHttpInfo(
        string linuxMachineName, string instanceName, string baseMonitorName,
        HostedSqlServerInstanceDto? hostedSqlServerInstanceDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGet(string linuxMachineName,
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGetWithHttpInfo(
        string linuxMachineName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePut(string linuxMachineName, string baseMonitorName,
        LinuxMachineDto? linuxMachineDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePutWithHttpInfo(
        string linuxMachineName, string baseMonitorName, LinuxMachineDto? linuxMachineDto = default,
        int operationIndex = 0);

    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ILinuxMachinesApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameLinuxmachinesGetAsync(string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameLinuxmachinesGetWithHttpInfoAsync(string baseMonitorName,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDeleteAsync(string linuxMachineName,
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDeleteWithHttpInfoAsync(
        string linuxMachineName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGetAsync(string linuxMachineName,
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGetWithHttpInfoAsync(
        string linuxMachineName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGetAsync(string linuxMachineName,
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGetWithHttpInfoAsync(
        string linuxMachineName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="hostedSqlServerInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePutAsync(
        string linuxMachineName, string instanceName, string baseMonitorName,
        HostedSqlServerInstanceDto? hostedSqlServerInstanceDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="hostedSqlServerInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePutWithHttpInfoAsync(
            string linuxMachineName, string instanceName, string baseMonitorName,
            HostedSqlServerInstanceDto? hostedSqlServerInstanceDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGetAsync(string linuxMachineName,
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGetWithHttpInfoAsync(
            string linuxMachineName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePutAsync(string linuxMachineName,
        string baseMonitorName, LinuxMachineDto? linuxMachineDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePutWithHttpInfoAsync(
        string linuxMachineName, string baseMonitorName, LinuxMachineDto? linuxMachineDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface ILinuxMachinesApi : ILinuxMachinesApiSync, ILinuxMachinesApiAsync
{
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class LinuxMachinesApi : ILinuxMachinesApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="LinuxMachinesApi" /> class.
    /// </summary>
    /// <returns></returns>
    public LinuxMachinesApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="LinuxMachinesApi" /> class.
    /// </summary>
    /// <returns></returns>
    public LinuxMachinesApi(string basePath)
    {
        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="LinuxMachinesApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public LinuxMachinesApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="LinuxMachinesApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public LinuxMachinesApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameLinuxmachinesGet(string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesGetWithHttpInfo(baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameLinuxmachinesGetWithHttpInfo(string baseMonitorName,
        int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation = "LinuxMachinesApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<object>("/api/basemonitors/{baseMonitorName}/linuxmachines",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesGet", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameLinuxmachinesGetAsync(string baseMonitorName,
        int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameLinuxmachinesGetWithHttpInfoAsync(baseMonitorName, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameLinuxmachinesGetWithHttpInfoAsync(
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation = "LinuxMachinesApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>("/api/basemonitors/{baseMonitorName}/linuxmachines", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesGet", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDelete(string linuxMachineName,
        string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDeleteWithHttpInfo(linuxMachineName,
            baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDeleteWithHttpInfo(
        string linuxMachineName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDelete");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDelete");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "LinuxMachinesApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Delete<object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDelete",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDeleteAsync(string linuxMachineName,
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDeleteWithHttpInfoAsync(linuxMachineName,
            baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDeleteWithHttpInfoAsync(string linuxMachineName,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDelete");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDelete");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "LinuxMachinesApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .DeleteAsync<object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameDelete",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGet(string linuxMachineName,
        string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGetWithHttpInfo(linuxMachineName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGetWithHttpInfo(
        string linuxMachineName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "LinuxMachinesApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGetAsync(string linuxMachineName,
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGetWithHttpInfoAsync(linuxMachineName,
            baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGetWithHttpInfoAsync(string linuxMachineName,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "LinuxMachinesApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGet(string linuxMachineName,
        string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGetWithHttpInfo(linuxMachineName,
            baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGetWithHttpInfo(
        string linuxMachineName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "LinuxMachinesApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGetAsync(
        string linuxMachineName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGetWithHttpInfoAsync(linuxMachineName,
            baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGetWithHttpInfoAsync(
            string linuxMachineName,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "LinuxMachinesApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="hostedSqlServerInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePut(
        string linuxMachineName, string instanceName, string baseMonitorName,
        HostedSqlServerInstanceDto? hostedSqlServerInstanceDto = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePutWithHttpInfo(
            linuxMachineName, instanceName, baseMonitorName, hostedSqlServerInstanceDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="hostedSqlServerInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePutWithHttpInfo(
            string linuxMachineName, string instanceName, string baseMonitorName,
            HostedSqlServerInstanceDto? hostedSqlServerInstanceDto = default, int operationIndex = 0)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePut");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = hostedSqlServerInstanceDto;

        localVarRequestOptions.Operation =
            "LinuxMachinesApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="hostedSqlServerInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePutAsync(
        string linuxMachineName, string instanceName, string baseMonitorName,
        HostedSqlServerInstanceDto? hostedSqlServerInstanceDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePutWithHttpInfoAsync(
            linuxMachineName, instanceName, baseMonitorName, hostedSqlServerInstanceDto, operationIndex,
            cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="hostedSqlServerInstanceDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePutWithHttpInfoAsync(
            string linuxMachineName, string instanceName, string baseMonitorName,
            HostedSqlServerInstanceDto? hostedSqlServerInstanceDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePut");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = hostedSqlServerInstanceDto;

        localVarRequestOptions.Operation =
            "LinuxMachinesApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{instanceName}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesInstanceNamePut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGet(string linuxMachineName,
        string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGetWithHttpInfo(linuxMachineName,
            baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGetWithHttpInfo(
            string linuxMachineName,
            string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "LinuxMachinesApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/postgresinstances",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGetAsync(
        string linuxMachineName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGetWithHttpInfoAsync(
            linuxMachineName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGetWithHttpInfoAsync(
            string linuxMachineName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "LinuxMachinesApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/postgresinstances",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePostgresinstancesGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePut(string linuxMachineName,
        string baseMonitorName, LinuxMachineDto? linuxMachineDto = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePutWithHttpInfo(linuxMachineName, baseMonitorName,
            linuxMachineDto);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePutWithHttpInfo(
        string linuxMachineName, string baseMonitorName, LinuxMachineDto? linuxMachineDto = default,
        int operationIndex = 0)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = linuxMachineDto;

        localVarRequestOptions.Operation =
            "LinuxMachinesApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePutAsync(string linuxMachineName,
        string baseMonitorName, LinuxMachineDto? linuxMachineDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePutWithHttpInfoAsync(linuxMachineName,
            baseMonitorName, linuxMachineDto, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePutWithHttpInfoAsync(string linuxMachineName,
            string baseMonitorName, LinuxMachineDto? linuxMachineDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling LinuxMachinesApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = linuxMachineDto;

        localVarRequestOptions.Operation =
            "LinuxMachinesApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNamePut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}