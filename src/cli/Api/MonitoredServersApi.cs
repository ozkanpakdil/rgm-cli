/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using cli.Client;
using cli.Model;

namespace cli.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMonitoredServersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAuroraClusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet(string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAuroraClusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetWithHttpInfo(string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonRdsHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet(string amazonRdsHostName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonRdsHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetWithHttpInfo(string amazonRdsHostName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet(string serverName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetWithHttpInfo(string serverName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureFlexHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet(string azureFlexHostName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureFlexHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetWithHttpInfo(string azureFlexHostName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet(string instanceName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(string instanceName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="databaseName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet(string serverName, string databaseName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="databaseName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetWithHttpInfo(string serverName, string databaseName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet(string serverName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetWithHttpInfo(string serverName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet(string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(string clusterName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string clusterName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet(string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet(string clusterName, string machineName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetWithHttpInfo(string clusterName, string machineName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet(string clusterName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetWithHttpInfo(string clusterName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut(string clusterName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string clusterName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlServerInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="linuxMachineName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut(string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlServerInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="linuxMachineName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linuxMachineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut(string linuxMachineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linuxMachineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string linuxMachineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="machineName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet(string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="machineName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetWithHttpInfo(string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet(string machineName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetWithHttpInfo(string machineName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameMonitoredserversDelete(string baseMonitorName, DeleteSqlServerModel? deleteSqlServerModel = default(DeleteSqlServerModel?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteWithHttpInfo(string baseMonitorName, DeleteSqlServerModel? deleteSqlServerModel = default(DeleteSqlServerModel?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete(string baseMonitorName, DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default(DeleteSqlServerInstanceModel?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteWithHttpInfo(string baseMonitorName, DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default(DeleteSqlServerInstanceModel?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="addSqlServerByTypeModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameMonitoredserversPost(string baseMonitorName, AddSqlServerByTypeModel? addSqlServerByTypeModel = default(AddSqlServerByTypeModel?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="addSqlServerByTypeModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameMonitoredserversPostWithHttpInfo(string baseMonitorName, AddSqlServerByTypeModel? addSqlServerByTypeModel = default(AddSqlServerByTypeModel?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut(string baseMonitorName, SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default(SqlServerInstanceCredentialsModel?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutWithHttpInfo(string baseMonitorName, SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default(SqlServerInstanceCredentialsModel?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="clusterCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut(string baseMonitorName, ClusterCredentialsModel? clusterCredentialsModel = default(ClusterCredentialsModel?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="clusterCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutWithHttpInfo(string baseMonitorName, ClusterCredentialsModel? clusterCredentialsModel = default(ClusterCredentialsModel?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postgresInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet(string postgresInstanceName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postgresInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetWithHttpInfo(string postgresInstanceName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet(string machineName, string instanceName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(string machineName, string instanceName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet(string machineName, string baseMonitorName, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetWithHttpInfo(string machineName, string baseMonitorName, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut(string machineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string machineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMonitoredServersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAuroraClusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetAsync(string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAuroraClusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetWithHttpInfoAsync(string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonRdsHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetAsync(string amazonRdsHostName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonRdsHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetWithHttpInfoAsync(string amazonRdsHostName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetAsync(string serverName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetWithHttpInfoAsync(string serverName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutAsync(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureFlexHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetAsync(string azureFlexHostName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureFlexHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetWithHttpInfoAsync(string azureFlexHostName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetAsync(string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="databaseName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetAsync(string serverName, string databaseName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="databaseName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetWithHttpInfoAsync(string serverName, string databaseName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetAsync(string serverName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetWithHttpInfoAsync(string serverName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutAsync(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetAsync(string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(string clusterName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string clusterName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetAsync(string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetAsync(string clusterName, string machineName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(string clusterName, string machineName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetAsync(string clusterName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetWithHttpInfoAsync(string clusterName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutAsync(string clusterName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string clusterName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlServerInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="linuxMachineName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlServerInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="linuxMachineName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linuxMachineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutAsync(string linuxMachineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linuxMachineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string linuxMachineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="machineName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetAsync(string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="machineName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetAsync(string machineName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(string machineName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteAsync(string baseMonitorName, DeleteSqlServerModel? deleteSqlServerModel = default(DeleteSqlServerModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteWithHttpInfoAsync(string baseMonitorName, DeleteSqlServerModel? deleteSqlServerModel = default(DeleteSqlServerModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteAsync(string baseMonitorName, DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default(DeleteSqlServerInstanceModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteWithHttpInfoAsync(string baseMonitorName, DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default(DeleteSqlServerInstanceModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="addSqlServerByTypeModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameMonitoredserversPostAsync(string baseMonitorName, AddSqlServerByTypeModel? addSqlServerByTypeModel = default(AddSqlServerByTypeModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="addSqlServerByTypeModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameMonitoredserversPostWithHttpInfoAsync(string baseMonitorName, AddSqlServerByTypeModel? addSqlServerByTypeModel = default(AddSqlServerByTypeModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutAsync(string baseMonitorName, SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default(SqlServerInstanceCredentialsModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutWithHttpInfoAsync(string baseMonitorName, SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default(SqlServerInstanceCredentialsModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="clusterCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutAsync(string baseMonitorName, ClusterCredentialsModel? clusterCredentialsModel = default(ClusterCredentialsModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="clusterCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutWithHttpInfoAsync(string baseMonitorName, ClusterCredentialsModel? clusterCredentialsModel = default(ClusterCredentialsModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postgresInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetAsync(string postgresInstanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postgresInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(string postgresInstanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetAsync(string machineName, string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(string machineName, string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetAsync(string machineName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(string machineName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutAsync(string machineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string machineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMonitoredServersApi : IMonitoredServersApiSync, IMonitoredServersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MonitoredServersApi : IMonitoredServersApi
    {
        private cli.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoredServersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MonitoredServersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoredServersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MonitoredServersApi(string basePath)
        {
            this.Configuration = cli.Client.Configuration.MergeConfigurations(
                cli.Client.GlobalConfiguration.Instance,
                new cli.Client.Configuration { BasePath = basePath }
            );
            this.Client = new cli.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cli.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoredServersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MonitoredServersApi(cli.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = cli.Client.Configuration.MergeConfigurations(
                cli.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new cli.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cli.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitoredServersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MonitoredServersApi(cli.Client.ISynchronousClient client, cli.Client.IAsynchronousClient asyncClient, cli.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public cli.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public cli.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public cli.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public cli.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAuroraClusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet(string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetWithHttpInfo(amazonAuroraClusterName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAuroraClusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetWithHttpInfo(string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'amazonAuroraClusterName' is set
            if (amazonAuroraClusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'amazonAuroraClusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("amazonAuroraClusterName", cli.Client.ClientUtils.ParameterToString(amazonAuroraClusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/amazonauroraclusters/{amazonAuroraClusterName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAuroraClusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetAsync(string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetWithHttpInfoAsync(amazonAuroraClusterName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonAuroraClusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetWithHttpInfoAsync(string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'amazonAuroraClusterName' is set
            if (amazonAuroraClusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'amazonAuroraClusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("amazonAuroraClusterName", cli.Client.ClientUtils.ParameterToString(amazonAuroraClusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/amazonauroraclusters/{amazonAuroraClusterName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonRdsHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet(string amazonRdsHostName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetWithHttpInfo(amazonRdsHostName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonRdsHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetWithHttpInfo(string amazonRdsHostName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'amazonRdsHostName' is set
            if (amazonRdsHostName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'amazonRdsHostName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("amazonRdsHostName", cli.Client.ClientUtils.ParameterToString(amazonRdsHostName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/amazonrdshosts/{amazonRdsHostName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonRdsHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetAsync(string amazonRdsHostName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetWithHttpInfoAsync(amazonRdsHostName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="amazonRdsHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetWithHttpInfoAsync(string amazonRdsHostName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'amazonRdsHostName' is set
            if (amazonRdsHostName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'amazonRdsHostName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("amazonRdsHostName", cli.Client.ClientUtils.ParameterToString(amazonRdsHostName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/amazonrdshosts/{amazonRdsHostName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet(string serverName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetWithHttpInfo(serverName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetWithHttpInfo(string serverName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'serverName' is set
            if (serverName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serverName", cli.Client.ClientUtils.ParameterToString(serverName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/{serverName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetAsync(string serverName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetWithHttpInfoAsync(serverName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetWithHttpInfoAsync(string serverName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'serverName' is set
            if (serverName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serverName", cli.Client.ClientUtils.ParameterToString(serverName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/{serverName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(serverName, baseMonitorName, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'serverName' is set
            if (serverName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serverName", cli.Client.ClientUtils.ParameterToString(serverName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/{serverName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutAsync(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(serverName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'serverName' is set
            if (serverName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serverName", cli.Client.ClientUtils.ParameterToString(serverName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/{serverName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureFlexHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet(string azureFlexHostName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetWithHttpInfo(azureFlexHostName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureFlexHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetWithHttpInfo(string azureFlexHostName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'azureFlexHostName' is set
            if (azureFlexHostName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'azureFlexHostName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("azureFlexHostName", cli.Client.ClientUtils.ParameterToString(azureFlexHostName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/azureflexhosts/{azureFlexHostName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureFlexHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetAsync(string azureFlexHostName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetWithHttpInfoAsync(azureFlexHostName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="azureFlexHostName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetWithHttpInfoAsync(string azureFlexHostName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'azureFlexHostName' is set
            if (azureFlexHostName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'azureFlexHostName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("azureFlexHostName", cli.Client.ClientUtils.ParameterToString(azureFlexHostName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/azureflexhosts/{azureFlexHostName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet(string instanceName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(instanceName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(string instanceName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/azuremanagedinstances/{instanceName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetAsync(string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(instanceName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/azuremanagedinstances/{instanceName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(instanceName, baseMonitorName, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/basemonitors/{baseMonitorName}/azuremanagedinstances/{instanceName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(instanceName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/basemonitors/{baseMonitorName}/azuremanagedinstances/{instanceName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="databaseName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet(string serverName, string databaseName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetWithHttpInfo(serverName, databaseName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="databaseName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetWithHttpInfo(string serverName, string databaseName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'serverName' is set
            if (serverName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'databaseName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serverName", cli.Client.ClientUtils.ParameterToString(serverName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", cli.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/azuresqlservers/{serverName}/databases/{databaseName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="databaseName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetAsync(string serverName, string databaseName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetWithHttpInfoAsync(serverName, databaseName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="databaseName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetWithHttpInfoAsync(string serverName, string databaseName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'serverName' is set
            if (serverName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'databaseName' is set
            if (databaseName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'databaseName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serverName", cli.Client.ClientUtils.ParameterToString(serverName)); // path parameter
            localVarRequestOptions.PathParameters.Add("databaseName", cli.Client.ClientUtils.ParameterToString(databaseName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/azuresqlservers/{serverName}/databases/{databaseName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet(string serverName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetWithHttpInfo(serverName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetWithHttpInfo(string serverName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'serverName' is set
            if (serverName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serverName", cli.Client.ClientUtils.ParameterToString(serverName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/azuresqlservers/{serverName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetAsync(string serverName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetWithHttpInfoAsync(serverName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetWithHttpInfoAsync(string serverName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'serverName' is set
            if (serverName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serverName", cli.Client.ClientUtils.ParameterToString(serverName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/azuresqlservers/{serverName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(serverName, baseMonitorName, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'serverName' is set
            if (serverName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serverName", cli.Client.ClientUtils.ParameterToString(serverName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/basemonitors/{baseMonitorName}/azuresqlservers/{serverName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutAsync(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(serverName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="serverName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string serverName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'serverName' is set
            if (serverName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("serverName", cli.Client.ClientUtils.ParameterToString(serverName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/basemonitors/{baseMonitorName}/azuresqlservers/{serverName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet(string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(clusterName, instanceName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'clusterName' is set
            if (clusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("clusterName", cli.Client.ClientUtils.ParameterToString(clusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetAsync(string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(clusterName, instanceName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clusterName' is set
            if (clusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("clusterName", cli.Client.ClientUtils.ParameterToString(clusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(string clusterName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(clusterName, instanceName, baseMonitorName, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string clusterName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'clusterName' is set
            if (clusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("clusterName", cli.Client.ClientUtils.ParameterToString(clusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(string clusterName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(clusterName, instanceName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string clusterName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clusterName' is set
            if (clusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("clusterName", cli.Client.ClientUtils.ParameterToString(clusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet(string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(clusterName, machineName, instanceName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'clusterName' is set
            if (clusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("clusterName", cli.Client.ClientUtils.ParameterToString(clusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetAsync(string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(clusterName, machineName, instanceName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clusterName' is set
            if (clusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("clusterName", cli.Client.ClientUtils.ParameterToString(clusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(clusterName, machineName, instanceName, baseMonitorName, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'clusterName' is set
            if (clusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("clusterName", cli.Client.ClientUtils.ParameterToString(clusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(clusterName, machineName, instanceName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clusterName' is set
            if (clusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("clusterName", cli.Client.ClientUtils.ParameterToString(clusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet(string clusterName, string machineName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetWithHttpInfo(clusterName, machineName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetWithHttpInfo(string clusterName, string machineName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'clusterName' is set
            if (clusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("clusterName", cli.Client.ClientUtils.ParameterToString(clusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetAsync(string clusterName, string machineName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(clusterName, machineName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(string clusterName, string machineName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clusterName' is set
            if (clusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("clusterName", cli.Client.ClientUtils.ParameterToString(clusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet(string clusterName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetWithHttpInfo(clusterName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetWithHttpInfo(string clusterName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'clusterName' is set
            if (clusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("clusterName", cli.Client.ClientUtils.ParameterToString(clusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetAsync(string clusterName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetWithHttpInfoAsync(clusterName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetWithHttpInfoAsync(string clusterName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clusterName' is set
            if (clusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("clusterName", cli.Client.ClientUtils.ParameterToString(clusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut(string clusterName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(clusterName, baseMonitorName, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string clusterName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'clusterName' is set
            if (clusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("clusterName", cli.Client.ClientUtils.ParameterToString(clusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutAsync(string clusterName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(clusterName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string clusterName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clusterName' is set
            if (clusterName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("clusterName", cli.Client.ClientUtils.ParameterToString(clusterName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlServerInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="linuxMachineName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut(string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default(int?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(sqlServerInstanceName, baseMonitorName, linuxMachineName, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlServerInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="linuxMachineName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'sqlServerInstanceName' is set
            if (sqlServerInstanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'sqlServerInstanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'linuxMachineName' is set
            if (linuxMachineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'linuxMachineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sqlServerInstanceName", cli.Client.ClientUtils.ParameterToString(sqlServerInstanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.PathParameters.Add("linuxMachineName", cli.Client.ClientUtils.ParameterToString(linuxMachineName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{sqlServerInstanceName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlServerInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="linuxMachineName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(sqlServerInstanceName, baseMonitorName, linuxMachineName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlServerInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="linuxMachineName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'sqlServerInstanceName' is set
            if (sqlServerInstanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'sqlServerInstanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'linuxMachineName' is set
            if (linuxMachineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'linuxMachineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sqlServerInstanceName", cli.Client.ClientUtils.ParameterToString(sqlServerInstanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.PathParameters.Add("linuxMachineName", cli.Client.ClientUtils.ParameterToString(linuxMachineName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{sqlServerInstanceName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linuxMachineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut(string linuxMachineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(linuxMachineName, baseMonitorName, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linuxMachineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string linuxMachineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'linuxMachineName' is set
            if (linuxMachineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'linuxMachineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("linuxMachineName", cli.Client.ClientUtils.ParameterToString(linuxMachineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linuxMachineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutAsync(string linuxMachineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(linuxMachineName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linuxMachineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string linuxMachineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'linuxMachineName' is set
            if (linuxMachineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'linuxMachineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("linuxMachineName", cli.Client.ClientUtils.ParameterToString(linuxMachineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="machineName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet(string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetWithHttpInfo(sqlInstanceName, baseMonitorName, machineName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="machineName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetWithHttpInfo(string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0)
        {
            // verify the required parameter 'sqlInstanceName' is set
            if (sqlInstanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'sqlInstanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sqlInstanceName", cli.Client.ClientUtils.ParameterToString(sqlInstanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{machineName}/instances/{sqlInstanceName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="machineName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetAsync(string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(sqlInstanceName, baseMonitorName, machineName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="machineName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'sqlInstanceName' is set
            if (sqlInstanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'sqlInstanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sqlInstanceName", cli.Client.ClientUtils.ParameterToString(sqlInstanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{machineName}/instances/{sqlInstanceName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet(string machineName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetWithHttpInfo(machineName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetWithHttpInfo(string machineName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{machineName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetAsync(string machineName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(machineName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(string machineName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{machineName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameMonitoredserversDelete(string baseMonitorName, DeleteSqlServerModel? deleteSqlServerModel = default(DeleteSqlServerModel?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteWithHttpInfo(baseMonitorName, deleteSqlServerModel);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteWithHttpInfo(string baseMonitorName, DeleteSqlServerModel? deleteSqlServerModel = default(DeleteSqlServerModel?), int operationIndex = 0)
        {
            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversDelete");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = deleteSqlServerModel;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/basemonitors/{baseMonitorName}/monitoredservers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteAsync(string baseMonitorName, DeleteSqlServerModel? deleteSqlServerModel = default(DeleteSqlServerModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteWithHttpInfoAsync(baseMonitorName, deleteSqlServerModel, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteWithHttpInfoAsync(string baseMonitorName, DeleteSqlServerModel? deleteSqlServerModel = default(DeleteSqlServerModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversDelete");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = deleteSqlServerModel;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/basemonitors/{baseMonitorName}/monitoredservers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete(string baseMonitorName, DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default(DeleteSqlServerInstanceModel?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteWithHttpInfo(baseMonitorName, deleteSqlServerInstanceModel);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteWithHttpInfo(string baseMonitorName, DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default(DeleteSqlServerInstanceModel?), int operationIndex = 0)
        {
            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = deleteSqlServerInstanceModel;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/basemonitors/{baseMonitorName}/monitoredservers/instances", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteAsync(string baseMonitorName, DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default(DeleteSqlServerInstanceModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteWithHttpInfoAsync(baseMonitorName, deleteSqlServerInstanceModel, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteWithHttpInfoAsync(string baseMonitorName, DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default(DeleteSqlServerInstanceModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = deleteSqlServerInstanceModel;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/basemonitors/{baseMonitorName}/monitoredservers/instances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="addSqlServerByTypeModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameMonitoredserversPost(string baseMonitorName, AddSqlServerByTypeModel? addSqlServerByTypeModel = default(AddSqlServerByTypeModel?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameMonitoredserversPostWithHttpInfo(baseMonitorName, addSqlServerByTypeModel);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="addSqlServerByTypeModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameMonitoredserversPostWithHttpInfo(string baseMonitorName, AddSqlServerByTypeModel? addSqlServerByTypeModel = default(AddSqlServerByTypeModel?), int operationIndex = 0)
        {
            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversPost");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = addSqlServerByTypeModel;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/basemonitors/{baseMonitorName}/monitoredservers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="addSqlServerByTypeModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameMonitoredserversPostAsync(string baseMonitorName, AddSqlServerByTypeModel? addSqlServerByTypeModel = default(AddSqlServerByTypeModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameMonitoredserversPostWithHttpInfoAsync(baseMonitorName, addSqlServerByTypeModel, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="addSqlServerByTypeModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameMonitoredserversPostWithHttpInfoAsync(string baseMonitorName, AddSqlServerByTypeModel? addSqlServerByTypeModel = default(AddSqlServerByTypeModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversPost");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = addSqlServerByTypeModel;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/basemonitors/{baseMonitorName}/monitoredservers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut(string baseMonitorName, SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default(SqlServerInstanceCredentialsModel?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutWithHttpInfo(baseMonitorName, sqlServerInstanceCredentialsModel);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutWithHttpInfo(string baseMonitorName, SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default(SqlServerInstanceCredentialsModel?), int operationIndex = 0)
        {
            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = sqlServerInstanceCredentialsModel;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/basemonitors/{baseMonitorName}/monitoredservers/sqlserver/credentials", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutAsync(string baseMonitorName, SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default(SqlServerInstanceCredentialsModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutWithHttpInfoAsync(baseMonitorName, sqlServerInstanceCredentialsModel, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutWithHttpInfoAsync(string baseMonitorName, SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default(SqlServerInstanceCredentialsModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = sqlServerInstanceCredentialsModel;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/basemonitors/{baseMonitorName}/monitoredservers/sqlserver/credentials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="clusterCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut(string baseMonitorName, ClusterCredentialsModel? clusterCredentialsModel = default(ClusterCredentialsModel?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutWithHttpInfo(baseMonitorName, clusterCredentialsModel);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="clusterCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutWithHttpInfo(string baseMonitorName, ClusterCredentialsModel? clusterCredentialsModel = default(ClusterCredentialsModel?), int operationIndex = 0)
        {
            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = clusterCredentialsModel;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/basemonitors/{baseMonitorName}/monitoredserverscluster/credentials", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="clusterCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutAsync(string baseMonitorName, ClusterCredentialsModel? clusterCredentialsModel = default(ClusterCredentialsModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutWithHttpInfoAsync(baseMonitorName, clusterCredentialsModel, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseMonitorName"></param>
        /// <param name="clusterCredentialsModel"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutWithHttpInfoAsync(string baseMonitorName, ClusterCredentialsModel? clusterCredentialsModel = default(ClusterCredentialsModel?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = clusterCredentialsModel;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/basemonitors/{baseMonitorName}/monitoredserverscluster/credentials", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postgresInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet(string postgresInstanceName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetWithHttpInfo(postgresInstanceName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postgresInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetWithHttpInfo(string postgresInstanceName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'postgresInstanceName' is set
            if (postgresInstanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'postgresInstanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("postgresInstanceName", cli.Client.ClientUtils.ParameterToString(postgresInstanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/postgresinstances/{postgresInstanceName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postgresInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetAsync(string postgresInstanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(postgresInstanceName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postgresInstanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(string postgresInstanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'postgresInstanceName' is set
            if (postgresInstanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'postgresInstanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("postgresInstanceName", cli.Client.ClientUtils.ParameterToString(postgresInstanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/postgresinstances/{postgresInstanceName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet(string machineName, string instanceName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(machineName, instanceName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(string machineName, string instanceName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetAsync(string machineName, string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(machineName, instanceName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(string machineName, string instanceName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(machineName, instanceName, baseMonitorName, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(machineName, instanceName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="instanceName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string machineName, string instanceName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'instanceName' is set
            if (instanceName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("instanceName", cli.Client.ClientUtils.ParameterToString(instanceName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet(string machineName, string baseMonitorName, int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetWithHttpInfo(machineName, baseMonitorName);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetWithHttpInfo(string machineName, string baseMonitorName, int operationIndex = 0)
        {
            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/monitoredservers/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetAsync(string machineName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(machineName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(string machineName, string baseMonitorName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/monitoredservers/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut(string machineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(machineName, baseMonitorName, body);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public cli.Client.ApiResponse<Object> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(string machineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutAsync(string machineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(machineName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="machineName"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<Object>> ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(string machineName, string baseMonitorName, int? body = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'machineName' is set
            if (machineName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("machineName", cli.Client.ClientUtils.ParameterToString(machineName)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/monitoredservers/status/suspendedstatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
