/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Threading;
using System.Threading.Tasks;
using cli.Client;
using cli.Model;

namespace cli.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IMonitoredServersApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonAuroraClusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet(
        string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonAuroraClusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetWithHttpInfo(
            string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet(
        string amazonRdsHostName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetWithHttpInfo(
            string amazonRdsHostName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet(string serverName,
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetWithHttpInfo(
            string serverName,
            string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut(
        string serverName, string baseMonitorName, int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string serverName, string baseMonitorName, int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureFlexHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet(
        string azureFlexHostName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureFlexHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetWithHttpInfo(
            string azureFlexHostName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet(string instanceName,
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(
            string instanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(
        string instanceName, string baseMonitorName, int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string instanceName, string baseMonitorName, int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="databaseName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet(
        string serverName, string databaseName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="databaseName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetWithHttpInfo(
            string serverName, string databaseName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet(string serverName,
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetWithHttpInfo(
        string serverName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut(
        string serverName, string baseMonitorName, int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string serverName, string baseMonitorName, int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet(
        string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(
            string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(
        string clusterName, string instanceName, string baseMonitorName, int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string clusterName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet(
            string clusterName, string machineName, string instanceName, string baseMonitorName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(
            string clusterName, string machineName, string instanceName, string baseMonitorName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet(
        string clusterName, string machineName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetWithHttpInfo(
            string clusterName, string machineName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet(string clusterName,
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetWithHttpInfo(
        string clusterName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut(string clusterName,
        string baseMonitorName, int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string clusterName, string baseMonitorName, int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlServerInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut(
            string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlServerInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut(
        string linuxMachineName, string baseMonitorName, int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string linuxMachineName, string baseMonitorName, int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="machineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet(
        string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="machineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetWithHttpInfo(
            string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet(string machineName,
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetWithHttpInfo(
        string machineName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameMonitoredserversDelete(string baseMonitorName,
        DeleteSqlServerModel? deleteSqlServerModel = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteWithHttpInfo(string baseMonitorName,
        DeleteSqlServerModel? deleteSqlServerModel = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete(string baseMonitorName,
        DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteWithHttpInfo(
        string baseMonitorName, DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addSqlServerByTypeModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameMonitoredserversPost(string baseMonitorName,
        AddSqlServerByTypeModel? addSqlServerByTypeModel = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addSqlServerByTypeModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameMonitoredserversPostWithHttpInfo(string baseMonitorName,
        AddSqlServerByTypeModel? addSqlServerByTypeModel = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut(string baseMonitorName,
        SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutWithHttpInfo(
        string baseMonitorName, SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="clusterCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut(string baseMonitorName,
        ClusterCredentialsModel? clusterCredentialsModel = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="clusterCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object> ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutWithHttpInfo(
        string baseMonitorName, ClusterCredentialsModel? clusterCredentialsModel = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="postgresInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet(
        string postgresInstanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="postgresInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetWithHttpInfo(
            string postgresInstanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet(
        string machineName, string instanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(
            string machineName, string instanceName, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(
            string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet(string machineName,
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetWithHttpInfo(
            string machineName,
            string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut(
        string machineName, string baseMonitorName, int? body = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string machineName, string baseMonitorName, int? body = default, int operationIndex = 0);

    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IMonitoredServersApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonAuroraClusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetAsync(
        string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonAuroraClusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetWithHttpInfoAsync(
            string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetAsync(
        string amazonRdsHostName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetWithHttpInfoAsync(
            string amazonRdsHostName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetAsync(string serverName,
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetWithHttpInfoAsync(
            string serverName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutAsync(
        string serverName, string baseMonitorName, int? body = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string serverName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureFlexHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetAsync(
        string azureFlexHostName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureFlexHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetWithHttpInfoAsync(
            string azureFlexHostName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetAsync(
        string instanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
            string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(
        string instanceName, string baseMonitorName, int? body = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string instanceName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="databaseName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetAsync(
        string serverName, string databaseName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="databaseName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetWithHttpInfoAsync(
            string serverName, string databaseName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetAsync(string serverName,
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetWithHttpInfoAsync(
            string serverName,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutAsync(
        string serverName, string baseMonitorName, int? body = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string serverName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetAsync(
        string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
            string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(
            string clusterName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string clusterName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetAsync(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetAsync(
        string clusterName, string machineName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(
            string clusterName, string machineName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetAsync(string clusterName,
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetWithHttpInfoAsync(string clusterName,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutAsync(
        string clusterName, string baseMonitorName, int? body = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string clusterName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlServerInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(
            string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlServerInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutAsync(
        string linuxMachineName, string baseMonitorName, int? body = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string linuxMachineName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="machineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetAsync(
        string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="machineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
            string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetAsync(string machineName,
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(
            string machineName,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteAsync(string baseMonitorName,
        DeleteSqlServerModel? deleteSqlServerModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteWithHttpInfoAsync(
        string baseMonitorName, DeleteSqlServerModel? deleteSqlServerModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteAsync(string baseMonitorName,
        DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteWithHttpInfoAsync(
        string baseMonitorName, DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addSqlServerByTypeModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameMonitoredserversPostAsync(string baseMonitorName,
        AddSqlServerByTypeModel? addSqlServerByTypeModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addSqlServerByTypeModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameMonitoredserversPostWithHttpInfoAsync(
        string baseMonitorName, AddSqlServerByTypeModel? addSqlServerByTypeModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutAsync(string baseMonitorName,
        SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutWithHttpInfoAsync(
        string baseMonitorName, SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="clusterCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutAsync(string baseMonitorName,
        ClusterCredentialsModel? clusterCredentialsModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="clusterCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutWithHttpInfoAsync(
        string baseMonitorName, ClusterCredentialsModel? clusterCredentialsModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="postgresInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetAsync(
        string postgresInstanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="postgresInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
            string postgresInstanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetAsync(
        string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
            string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(
            string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetAsync(string machineName,
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(
            string machineName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutAsync(
        string machineName, string baseMonitorName, int? body = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string machineName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IMonitoredServersApi : IMonitoredServersApiSync, IMonitoredServersApiAsync
{
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class MonitoredServersApi : IMonitoredServersApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="MonitoredServersApi" /> class.
    /// </summary>
    /// <returns></returns>
    public MonitoredServersApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="MonitoredServersApi" /> class.
    /// </summary>
    /// <returns></returns>
    public MonitoredServersApi(string basePath)
    {
        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="MonitoredServersApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public MonitoredServersApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="MonitoredServersApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public MonitoredServersApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonAuroraClusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet(
        string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetWithHttpInfo(
            amazonAuroraClusterName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonAuroraClusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetWithHttpInfo(
            string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'amazonAuroraClusterName' is set
        if (amazonAuroraClusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'amazonAuroraClusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("amazonAuroraClusterName",
            ClientUtils.ParameterToString(amazonAuroraClusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/amazonauroraclusters/{amazonAuroraClusterName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonAuroraClusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetAsync(
            string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetWithHttpInfoAsync(
                amazonAuroraClusterName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonAuroraClusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGetWithHttpInfoAsync(
            string amazonAuroraClusterName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'amazonAuroraClusterName' is set
        if (amazonAuroraClusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'amazonAuroraClusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("amazonAuroraClusterName",
            ClientUtils.ParameterToString(amazonAuroraClusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/amazonauroraclusters/{amazonAuroraClusterName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAmazonauroraclustersAmazonAuroraClusterNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet(
        string amazonRdsHostName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetWithHttpInfo(
            amazonRdsHostName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetWithHttpInfo(
            string amazonRdsHostName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'amazonRdsHostName' is set
        if (amazonRdsHostName == null)
            throw new ApiException(400,
                "Missing required parameter 'amazonRdsHostName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("amazonRdsHostName",
            ClientUtils.ParameterToString(amazonRdsHostName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/amazonrdshosts/{amazonRdsHostName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetAsync(
        string amazonRdsHostName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetWithHttpInfoAsync(
            amazonRdsHostName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="amazonRdsHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGetWithHttpInfoAsync(
            string amazonRdsHostName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'amazonRdsHostName' is set
        if (amazonRdsHostName == null)
            throw new ApiException(400,
                "Missing required parameter 'amazonRdsHostName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("amazonRdsHostName",
            ClientUtils.ParameterToString(amazonRdsHostName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/amazonrdshosts/{amazonRdsHostName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAmazonrdshostsAmazonRdsHostNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet(string serverName,
        string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetWithHttpInfo(serverName,
            baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetWithHttpInfo(
            string serverName,
            string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'serverName' is set
        if (serverName == null)
            throw new ApiException(400,
                "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("serverName",
            ClientUtils.ParameterToString(serverName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/{serverName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetAsync(
        string serverName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetWithHttpInfoAsync(
            serverName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGetWithHttpInfoAsync(
            string serverName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'serverName' is set
        if (serverName == null)
            throw new ApiException(400,
                "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("serverName",
            ClientUtils.ParameterToString(serverName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/{serverName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut(
        string serverName, string baseMonitorName, int? body = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            serverName, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string serverName, string baseMonitorName, int? body = default, int operationIndex = 0)
    {
        // verify the required parameter 'serverName' is set
        if (serverName == null)
            throw new ApiException(400,
                "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("serverName",
            ClientUtils.ParameterToString(serverName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>(
                "/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/{serverName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutAsync(
            string serverName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
                serverName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string serverName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'serverName' is set
        if (serverName == null)
            throw new ApiException(400,
                "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("serverName",
            ClientUtils.ParameterToString(serverName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>(
                "/api/basemonitors/{baseMonitorName}/amazonrdssqlservers/{serverName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAmazonrdssqlserversServerNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureFlexHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet(
        string azureFlexHostName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetWithHttpInfo(
            azureFlexHostName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureFlexHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetWithHttpInfo(
            string azureFlexHostName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'azureFlexHostName' is set
        if (azureFlexHostName == null)
            throw new ApiException(400,
                "Missing required parameter 'azureFlexHostName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("azureFlexHostName",
            ClientUtils.ParameterToString(azureFlexHostName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/azureflexhosts/{azureFlexHostName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureFlexHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetAsync(
        string azureFlexHostName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetWithHttpInfoAsync(
            azureFlexHostName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="azureFlexHostName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGetWithHttpInfoAsync(
            string azureFlexHostName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'azureFlexHostName' is set
        if (azureFlexHostName == null)
            throw new ApiException(400,
                "Missing required parameter 'azureFlexHostName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("azureFlexHostName",
            ClientUtils.ParameterToString(azureFlexHostName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/azureflexhosts/{azureFlexHostName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAzureflexhostsAzureFlexHostNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet(
        string instanceName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(
            instanceName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(
            string instanceName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/azuremanagedinstances/{instanceName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetAsync(
        string instanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
            instanceName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
            string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/azuremanagedinstances/{instanceName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(
        string instanceName, string baseMonitorName, int? body = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            instanceName, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string instanceName, string baseMonitorName, int? body = default, int operationIndex = 0)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>(
                "/api/basemonitors/{baseMonitorName}/azuremanagedinstances/{instanceName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(
            string instanceName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
                instanceName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string instanceName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>(
                "/api/basemonitors/{baseMonitorName}/azuremanagedinstances/{instanceName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAzuremanagedinstancesInstanceNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="databaseName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet(
        string serverName, string databaseName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetWithHttpInfo(
            serverName, databaseName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="databaseName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetWithHttpInfo(
            string serverName, string databaseName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'serverName' is set
        if (serverName == null)
            throw new ApiException(400,
                "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet");

        // verify the required parameter 'databaseName' is set
        if (databaseName == null)
            throw new ApiException(400,
                "Missing required parameter 'databaseName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("serverName",
            ClientUtils.ParameterToString(serverName)); // path parameter
        localVarRequestOptions.PathParameters.Add("databaseName",
            ClientUtils.ParameterToString(databaseName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/azuresqlservers/{serverName}/databases/{databaseName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="databaseName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetAsync(
            string serverName, string databaseName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetWithHttpInfoAsync(
                serverName, databaseName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="databaseName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGetWithHttpInfoAsync(
            string serverName, string databaseName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'serverName' is set
        if (serverName == null)
            throw new ApiException(400,
                "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet");

        // verify the required parameter 'databaseName' is set
        if (databaseName == null)
            throw new ApiException(400,
                "Missing required parameter 'databaseName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("serverName",
            ClientUtils.ParameterToString(serverName)); // path parameter
        localVarRequestOptions.PathParameters.Add("databaseName",
            ClientUtils.ParameterToString(databaseName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/azuresqlservers/{serverName}/databases/{databaseName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet(string serverName,
        string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetWithHttpInfo(serverName,
            baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetWithHttpInfo(string serverName,
            string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'serverName' is set
        if (serverName == null)
            throw new ApiException(400,
                "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("serverName",
            ClientUtils.ParameterToString(serverName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/azuresqlservers/{serverName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetAsync(
        string serverName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetWithHttpInfoAsync(
            serverName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGetWithHttpInfoAsync(
            string serverName,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'serverName' is set
        if (serverName == null)
            throw new ApiException(400,
                "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("serverName",
            ClientUtils.ParameterToString(serverName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/azuresqlservers/{serverName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut(
        string serverName, string baseMonitorName, int? body = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            serverName, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string serverName, string baseMonitorName, int? body = default, int operationIndex = 0)
    {
        // verify the required parameter 'serverName' is set
        if (serverName == null)
            throw new ApiException(400,
                "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("serverName",
            ClientUtils.ParameterToString(serverName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>(
                "/api/basemonitors/{baseMonitorName}/azuresqlservers/{serverName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutAsync(
            string serverName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
                serverName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="serverName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string serverName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'serverName' is set
        if (serverName == null)
            throw new ApiException(400,
                "Missing required parameter 'serverName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("serverName",
            ClientUtils.ParameterToString(serverName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>(
                "/api/basemonitors/{baseMonitorName}/azuresqlservers/{serverName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet(
        string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(
            clusterName, instanceName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(
            string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetAsync(
            string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
                clusterName, instanceName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
            string clusterName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(
            string clusterName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            clusterName, instanceName, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string clusterName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(
            string clusterName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
                    clusterName, instanceName, baseMonitorName, body, operationIndex, cancellationToken)
                .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string clusterName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/instances/{instanceName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(
            clusterName, machineName, instanceName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetAsync(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
                    clusterName, machineName, instanceName, baseMonitorName, operationIndex, cancellationToken)
                .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            clusterName, machineName, instanceName, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
                    clusterName, machineName, instanceName, baseMonitorName, body, operationIndex, cancellationToken)
                .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string clusterName, string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/instances/{instanceName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet(
        string clusterName, string machineName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetWithHttpInfo(
            clusterName, machineName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetWithHttpInfo(
            string clusterName, string machineName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetAsync(
            string clusterName, string machineName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(
                clusterName, machineName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(
            string clusterName, string machineName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/machines/{machineName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMachinesMachineNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet(string clusterName,
        string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetWithHttpInfo(clusterName,
            baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetWithHttpInfo(
        string clusterName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetAsync(
        string clusterName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetWithHttpInfoAsync(clusterName,
            baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGetWithHttpInfoAsync(string clusterName,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>("/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut(
        string clusterName, string baseMonitorName, int? body = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            clusterName, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string clusterName, string baseMonitorName, int? body = default, int operationIndex = 0)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutAsync(
        string clusterName, string baseMonitorName, int? body = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
                clusterName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="clusterName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string clusterName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'clusterName' is set
        if (clusterName == null)
            throw new ApiException(400,
                "Missing required parameter 'clusterName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("clusterName",
            ClientUtils.ParameterToString(clusterName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>(
                "/api/basemonitors/{baseMonitorName}/clusters/{clusterName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameClustersClusterNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlServerInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut(
            string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            sqlServerInstanceName, baseMonitorName, linuxMachineName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlServerInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0)
    {
        // verify the required parameter 'sqlServerInstanceName' is set
        if (sqlServerInstanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'sqlServerInstanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("sqlServerInstanceName",
            ClientUtils.ParameterToString(sqlServerInstanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{sqlServerInstanceName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlServerInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(
            string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
                    sqlServerInstanceName, baseMonitorName, linuxMachineName, body, operationIndex, cancellationToken)
                .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlServerInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="linuxMachineName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string sqlServerInstanceName, string baseMonitorName, string linuxMachineName, int? body = default,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'sqlServerInstanceName' is set
        if (sqlServerInstanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'sqlServerInstanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("sqlServerInstanceName",
            ClientUtils.ParameterToString(sqlServerInstanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/instances/{sqlServerInstanceName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameInstancesSqlServerInstanceNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut(
        string linuxMachineName, string baseMonitorName, int? body = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            linuxMachineName, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string linuxMachineName, string baseMonitorName, int? body = default, int operationIndex = 0)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutAsync(
            string linuxMachineName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
                linuxMachineName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="linuxMachineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string linuxMachineName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'linuxMachineName' is set
        if (linuxMachineName == null)
            throw new ApiException(400,
                "Missing required parameter 'linuxMachineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("linuxMachineName",
            ClientUtils.ParameterToString(linuxMachineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{linuxMachineName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="machineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet(
        string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetWithHttpInfo(
            sqlInstanceName, baseMonitorName, machineName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="machineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetWithHttpInfo(
            string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0)
    {
        // verify the required parameter 'sqlInstanceName' is set
        if (sqlInstanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'sqlInstanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("sqlInstanceName",
            ClientUtils.ParameterToString(sqlInstanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{machineName}/instances/{sqlInstanceName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="machineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetAsync(
            string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
                sqlInstanceName, baseMonitorName, machineName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sqlInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="machineName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
            string sqlInstanceName, string baseMonitorName, string machineName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'sqlInstanceName' is set
        if (sqlInstanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'sqlInstanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("sqlInstanceName",
            ClientUtils.ParameterToString(sqlInstanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{machineName}/instances/{sqlInstanceName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameInstancesSqlInstanceNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet(string machineName,
        string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetWithHttpInfo(machineName,
            baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetWithHttpInfo(string machineName,
            string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/linuxmachines/{machineName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetAsync(
        string machineName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(
            machineName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(
            string machineName,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>("/api/basemonitors/{baseMonitorName}/linuxmachines/{machineName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameMonitoredserversDelete(string baseMonitorName,
        DeleteSqlServerModel? deleteSqlServerModel = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteWithHttpInfo(baseMonitorName, deleteSqlServerModel);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteWithHttpInfo(string baseMonitorName,
        DeleteSqlServerModel? deleteSqlServerModel = default, int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversDelete");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = deleteSqlServerModel;

        localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Delete<object>("/api/basemonitors/{baseMonitorName}/monitoredservers",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversDelete", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteAsync(string baseMonitorName,
        DeleteSqlServerModel? deleteSqlServerModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteWithHttpInfoAsync(baseMonitorName,
            deleteSqlServerModel, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameMonitoredserversDeleteWithHttpInfoAsync(
        string baseMonitorName, DeleteSqlServerModel? deleteSqlServerModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversDelete");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = deleteSqlServerModel;

        localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .DeleteAsync<object>("/api/basemonitors/{baseMonitorName}/monitoredservers", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversDelete", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete(string baseMonitorName,
        DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteWithHttpInfo(baseMonitorName,
            deleteSqlServerInstanceModel);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteWithHttpInfo(
        string baseMonitorName, DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default,
        int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = deleteSqlServerInstanceModel;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Delete<object>("/api/basemonitors/{baseMonitorName}/monitoredservers/instances",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteAsync(string baseMonitorName,
        DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteWithHttpInfoAsync(baseMonitorName,
            deleteSqlServerInstanceModel, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="deleteSqlServerInstanceModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDeleteWithHttpInfoAsync(string baseMonitorName,
            DeleteSqlServerInstanceModel? deleteSqlServerInstanceModel = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = deleteSqlServerInstanceModel;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .DeleteAsync<object>("/api/basemonitors/{baseMonitorName}/monitoredservers/instances",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversInstancesDelete",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addSqlServerByTypeModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameMonitoredserversPost(string baseMonitorName,
        AddSqlServerByTypeModel? addSqlServerByTypeModel = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameMonitoredserversPostWithHttpInfo(baseMonitorName, addSqlServerByTypeModel);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addSqlServerByTypeModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameMonitoredserversPostWithHttpInfo(string baseMonitorName,
        AddSqlServerByTypeModel? addSqlServerByTypeModel = default, int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = addSqlServerByTypeModel;

        localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<object>("/api/basemonitors/{baseMonitorName}/monitoredservers",
            localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addSqlServerByTypeModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameMonitoredserversPostAsync(string baseMonitorName,
        AddSqlServerByTypeModel? addSqlServerByTypeModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameMonitoredserversPostWithHttpInfoAsync(baseMonitorName,
            addSqlServerByTypeModel, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="addSqlServerByTypeModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>> ApiBasemonitorsBaseMonitorNameMonitoredserversPostWithHttpInfoAsync(
        string baseMonitorName, AddSqlServerByTypeModel? addSqlServerByTypeModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = addSqlServerByTypeModel;

        localVarRequestOptions.Operation = "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<object>("/api/basemonitors/{baseMonitorName}/monitoredservers", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversPost", localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut(string baseMonitorName,
        SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutWithHttpInfo(baseMonitorName,
            sqlServerInstanceCredentialsModel);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutWithHttpInfo(
        string baseMonitorName, SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default,
        int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = sqlServerInstanceCredentialsModel;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>("/api/basemonitors/{baseMonitorName}/monitoredservers/sqlserver/credentials",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutAsync(string baseMonitorName,
        SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutWithHttpInfoAsync(baseMonitorName,
            sqlServerInstanceCredentialsModel, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="sqlServerInstanceCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPutWithHttpInfoAsync(string baseMonitorName,
            SqlServerInstanceCredentialsModel? sqlServerInstanceCredentialsModel = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = sqlServerInstanceCredentialsModel;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>("/api/basemonitors/{baseMonitorName}/monitoredservers/sqlserver/credentials",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserverCredentialsPut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="clusterCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut(string baseMonitorName,
        ClusterCredentialsModel? clusterCredentialsModel = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutWithHttpInfo(baseMonitorName,
            clusterCredentialsModel);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="clusterCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object> ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutWithHttpInfo(
        string baseMonitorName, ClusterCredentialsModel? clusterCredentialsModel = default, int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = clusterCredentialsModel;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>("/api/basemonitors/{baseMonitorName}/monitoredserverscluster/credentials",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="clusterCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutAsync(string baseMonitorName,
        ClusterCredentialsModel? clusterCredentialsModel = default, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutWithHttpInfoAsync(baseMonitorName,
            clusterCredentialsModel, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="clusterCredentialsModel"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPutWithHttpInfoAsync(string baseMonitorName,
            ClusterCredentialsModel? clusterCredentialsModel = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = clusterCredentialsModel;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>("/api/basemonitors/{baseMonitorName}/monitoredserverscluster/credentials",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameMonitoredserversclusterCredentialsPut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="postgresInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet(
        string postgresInstanceName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetWithHttpInfo(
            postgresInstanceName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="postgresInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetWithHttpInfo(
            string postgresInstanceName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'postgresInstanceName' is set
        if (postgresInstanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'postgresInstanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("postgresInstanceName",
            ClientUtils.ParameterToString(postgresInstanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/postgresinstances/{postgresInstanceName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="postgresInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetAsync(
        string postgresInstanceName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
                postgresInstanceName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="postgresInstanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
            string postgresInstanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'postgresInstanceName' is set
        if (postgresInstanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'postgresInstanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("postgresInstanceName",
            ClientUtils.ParameterToString(postgresInstanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/postgresinstances/{postgresInstanceName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNamePostgresinstancesPostgresInstanceNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet(
            string machineName, string instanceName, string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(
            machineName, instanceName, baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfo(
            string machineName, string instanceName, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetAsync(
            string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
                machineName, instanceName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGetWithHttpInfoAsync(
            string machineName, string instanceName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut(
            string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            machineName, instanceName, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutAsync(
            string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
                    machineName, instanceName, baseMonitorName, body, operationIndex, cancellationToken)
                .ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="instanceName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string machineName, string instanceName, string baseMonitorName, int? body = default,
            int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'instanceName' is set
        if (instanceName == null)
            throw new ApiException(400,
                "Missing required parameter 'instanceName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("instanceName",
            ClientUtils.ParameterToString(instanceName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/instances/{instanceName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameInstancesInstanceNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet(string machineName,
        string baseMonitorName, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetWithHttpInfo(machineName,
            baseMonitorName);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetWithHttpInfo(
            string machineName,
            string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Get<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/monitoredservers/status",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetAsync(
        string machineName, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        await ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(
            machineName, baseMonitorName, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGetWithHttpInfoAsync(
            string machineName, string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "application/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/monitoredservers/status",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory("ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusGet",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns></returns>
    public void ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut(
        string machineName, string baseMonitorName, int? body = default, int operationIndex = 0)
    {
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            machineName, baseMonitorName, body);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of Object(void)</returns>
    public ApiResponse<object>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfo(
            string machineName, string baseMonitorName, int? body = default, int operationIndex = 0)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse =
            Client.Put<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of void</returns>
    public async Task
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutAsync(
            string machineName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        await
            ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
                machineName, baseMonitorName, body, operationIndex, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="machineName"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="body"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse</returns>
    public async Task<ApiResponse<object>>
        ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPutWithHttpInfoAsync(
            string machineName, string baseMonitorName, int? body = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'machineName' is set
        if (machineName == null)
            throw new ApiException(400,
                "Missing required parameter 'machineName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling MonitoredServersApi->ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("machineName",
            ClientUtils.ParameterToString(machineName)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = body;

        localVarRequestOptions.Operation =
            "MonitoredServersApi.ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<object>(
                "/api/basemonitors/{baseMonitorName}/standalonemachines/{machineName}/monitoredservers/status/suspendedstatus",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception =
                ExceptionFactory(
                    "ApiBasemonitorsBaseMonitorNameStandalonemachinesMachineNameMonitoredserversStatusSuspendedstatusPut",
                    localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}