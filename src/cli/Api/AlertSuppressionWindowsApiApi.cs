/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using cli.Client;
using cli.Model;

namespace cli.Api;

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAlertSuppressionWindowsApiApiSync : IApiAccessor
{
    #region Synchronous Operations

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="names"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AlertSuppressionWindowDtoIEnumerableJSendSuccess</returns>
    AlertSuppressionWindowDtoIEnumerableJSendSuccess ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGet(
        string baseMonitorName, List<string>? names = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="names"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AlertSuppressionWindowDtoIEnumerableJSendSuccess</returns>
    ApiResponse<AlertSuppressionWindowDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGetWithHttpInfo(string baseMonitorName,
            List<string>? names = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AlertSuppressionWindowDtoIEnumerableJSendSuccess</returns>
    AlertSuppressionWindowDtoIEnumerableJSendSuccess ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGet(
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AlertSuppressionWindowDtoIEnumerableJSendSuccess</returns>
    ApiResponse<AlertSuppressionWindowDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGetWithHttpInfo(string baseMonitorName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>BooleanJSendSuccess</returns>
    BooleanJSendSuccess ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDelete(IntegerIdentifier id,
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of BooleanJSendSuccess</returns>
    ApiResponse<BooleanJSendSuccess> ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDeleteWithHttpInfo(
        IntegerIdentifier id, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AlertSuppressionWindowDtoJSendSuccess</returns>
    AlertSuppressionWindowDtoJSendSuccess ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGet(
        IntegerIdentifier id, string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AlertSuppressionWindowDtoJSendSuccess</returns>
    ApiResponse<AlertSuppressionWindowDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGetWithHttpInfo(IntegerIdentifier id,
            string baseMonitorName,
            int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AlertSuppressionWindowDtoJSendSuccess</returns>
    AlertSuppressionWindowDtoJSendSuccess ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPut(
        IntegerIdentifier id, string baseMonitorName,
        AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AlertSuppressionWindowDtoJSendSuccess</returns>
    ApiResponse<AlertSuppressionWindowDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPutWithHttpInfo(IntegerIdentifier id,
            string baseMonitorName,
            AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AlertSuppressionWindowDtoJSendSuccess</returns>
    AlertSuppressionWindowDtoJSendSuccess ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPost(
        string baseMonitorName, AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default,
        int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AlertSuppressionWindowDtoJSendSuccess</returns>
    ApiResponse<AlertSuppressionWindowDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPostWithHttpInfo(string baseMonitorName,
            AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AlertSuppressionTargetDtoIEnumerableJSendSuccess</returns>
    AlertSuppressionTargetDtoIEnumerableJSendSuccess ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGet(
        string baseMonitorName, int operationIndex = 0);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AlertSuppressionTargetDtoIEnumerableJSendSuccess</returns>
    ApiResponse<AlertSuppressionTargetDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGetWithHttpInfo(string baseMonitorName,
            int operationIndex = 0);

    #endregion Synchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAlertSuppressionWindowsApiApiAsync : IApiAccessor
{
    #region Asynchronous Operations

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="names"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AlertSuppressionWindowDtoIEnumerableJSendSuccess</returns>
    Task<AlertSuppressionWindowDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGetAsync(string baseMonitorName,
            List<string>? names = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="names"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AlertSuppressionWindowDtoIEnumerableJSendSuccess)</returns>
    Task<ApiResponse<AlertSuppressionWindowDtoIEnumerableJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGetWithHttpInfoAsync(string baseMonitorName,
            List<string>? names = default, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AlertSuppressionWindowDtoIEnumerableJSendSuccess</returns>
    Task<AlertSuppressionWindowDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGetAsync(string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AlertSuppressionWindowDtoIEnumerableJSendSuccess)</returns>
    Task<ApiResponse<AlertSuppressionWindowDtoIEnumerableJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGetWithHttpInfoAsync(string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BooleanJSendSuccess</returns>
    Task<BooleanJSendSuccess> ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDeleteAsync(IntegerIdentifier id,
        string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (BooleanJSendSuccess)</returns>
    Task<ApiResponse<BooleanJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDeleteWithHttpInfoAsync(IntegerIdentifier id,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AlertSuppressionWindowDtoJSendSuccess</returns>
    Task<AlertSuppressionWindowDtoJSendSuccess> ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGetAsync(
        IntegerIdentifier id, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AlertSuppressionWindowDtoJSendSuccess)</returns>
    Task<ApiResponse<AlertSuppressionWindowDtoJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGetWithHttpInfoAsync(IntegerIdentifier id,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AlertSuppressionWindowDtoJSendSuccess</returns>
    Task<AlertSuppressionWindowDtoJSendSuccess> ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPutAsync(
        IntegerIdentifier id, string baseMonitorName,
        AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default, int operationIndex = 0,
        CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AlertSuppressionWindowDtoJSendSuccess)</returns>
    Task<ApiResponse<AlertSuppressionWindowDtoJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPutWithHttpInfoAsync(IntegerIdentifier id,
            string baseMonitorName, AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AlertSuppressionWindowDtoJSendSuccess</returns>
    Task<AlertSuppressionWindowDtoJSendSuccess> ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPostAsync(
        string baseMonitorName, AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default,
        int operationIndex = 0, CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AlertSuppressionWindowDtoJSendSuccess)</returns>
    Task<ApiResponse<AlertSuppressionWindowDtoJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPostWithHttpInfoAsync(string baseMonitorName,
            AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AlertSuppressionTargetDtoIEnumerableJSendSuccess</returns>
    Task<AlertSuppressionTargetDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGetAsync(string baseMonitorName,
            int operationIndex = 0,
            CancellationToken cancellationToken = default);

    /// <summary>
    /// </summary>
    /// <remarks>
    /// </remarks>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AlertSuppressionTargetDtoIEnumerableJSendSuccess)</returns>
    Task<ApiResponse<AlertSuppressionTargetDtoIEnumerableJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGetWithHttpInfoAsync(string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default);

    #endregion Asynchronous Operations
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IAlertSuppressionWindowsApiApi : IAlertSuppressionWindowsApiApiSync,
    IAlertSuppressionWindowsApiApiAsync
{
}

/// <summary>
///     Represents a collection of functions to interact with the API endpoints
/// </summary>
public class AlertSuppressionWindowsApiApi : IAlertSuppressionWindowsApiApi
{
    private ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    ///     Initializes a new instance of the <see cref="AlertSuppressionWindowsApiApi" /> class.
    /// </summary>
    /// <returns></returns>
    public AlertSuppressionWindowsApiApi() : this((string)null)
    {
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AlertSuppressionWindowsApiApi" /> class.
    /// </summary>
    /// <returns></returns>
    public AlertSuppressionWindowsApiApi(string basePath)
    {
        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            new Configuration { BasePath = basePath }
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AlertSuppressionWindowsApiApi" /> class
    ///     using Configuration object
    /// </summary>
    /// <param name="configuration">An instance of Configuration</param>
    /// <returns></returns>
    public AlertSuppressionWindowsApiApi(Configuration configuration)
    {
        if (configuration == null) throw new ArgumentNullException("configuration");

        Configuration = cli.Client.Configuration.MergeConfigurations(
            GlobalConfiguration.Instance,
            configuration
        );
        Client = new ApiClient(Configuration.BasePath);
        AsynchronousClient = new ApiClient(Configuration.BasePath);
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     Initializes a new instance of the <see cref="AlertSuppressionWindowsApiApi" /> class
    ///     using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    public AlertSuppressionWindowsApiApi(ISynchronousClient client, IAsynchronousClient asyncClient,
        IReadableConfiguration configuration)
    {
        if (client == null) throw new ArgumentNullException("client");
        if (asyncClient == null) throw new ArgumentNullException("asyncClient");
        if (configuration == null) throw new ArgumentNullException("configuration");

        Client = client;
        AsynchronousClient = asyncClient;
        Configuration = configuration;
        ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    ///     The client for accessing this underlying API asynchronously.
    /// </summary>
    public IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    ///     The client for accessing this underlying API synchronously.
    /// </summary>
    public ISynchronousClient Client { get; set; }

    /// <summary>
    ///     Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
        return Configuration.BasePath;
    }

    /// <summary>
    ///     Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public IReadableConfiguration Configuration { get; set; }

    /// <summary>
    ///     Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public ExceptionFactory ExceptionFactory
    {
        get
        {
            if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
            return _exceptionFactory;
        }
        set => _exceptionFactory = value;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="names"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AlertSuppressionWindowDtoIEnumerableJSendSuccess</returns>
    public AlertSuppressionWindowDtoIEnumerableJSendSuccess
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGet(string baseMonitorName,
            List<string>? names = default, int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGetWithHttpInfo(baseMonitorName, names);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="names"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AlertSuppressionWindowDtoIEnumerableJSendSuccess</returns>
    public ApiResponse<AlertSuppressionWindowDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGetWithHttpInfo(string baseMonitorName,
            List<string>? names = default, int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        if (names != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "names", names));

        localVarRequestOptions.Operation =
            "AlertSuppressionWindowsApiApi.ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<AlertSuppressionWindowDtoIEnumerableJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/alertsuppressionwindows/ByNames", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="names"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AlertSuppressionWindowDtoIEnumerableJSendSuccess</returns>
    public async Task<AlertSuppressionWindowDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGetAsync(string baseMonitorName,
            List<string>? names = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGetWithHttpInfoAsync(baseMonitorName,
                names, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="names"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AlertSuppressionWindowDtoIEnumerableJSendSuccess)</returns>
    public async Task<ApiResponse<AlertSuppressionWindowDtoIEnumerableJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGetWithHttpInfoAsync(string baseMonitorName,
            List<string>? names = default, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        if (names != null)
            localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("multi", "names", names));

        localVarRequestOptions.Operation =
            "AlertSuppressionWindowsApiApi.ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<AlertSuppressionWindowDtoIEnumerableJSendSuccess>(
                "/api/basemonitors/{baseMonitorName}/alertsuppressionwindows/ByNames", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsByNamesGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AlertSuppressionWindowDtoIEnumerableJSendSuccess</returns>
    public AlertSuppressionWindowDtoIEnumerableJSendSuccess ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGet(
        string baseMonitorName, int operationIndex = 0)
    {
        var localVarResponse = ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGetWithHttpInfo(baseMonitorName);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AlertSuppressionWindowDtoIEnumerableJSendSuccess</returns>
    public ApiResponse<AlertSuppressionWindowDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGetWithHttpInfo(string baseMonitorName,
            int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AlertSuppressionWindowsApiApi.ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<AlertSuppressionWindowDtoIEnumerableJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/alertsuppressionwindows", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AlertSuppressionWindowDtoIEnumerableJSendSuccess</returns>
    public async Task<AlertSuppressionWindowDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGetAsync(string baseMonitorName, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGetWithHttpInfoAsync(baseMonitorName,
                operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AlertSuppressionWindowDtoIEnumerableJSendSuccess)</returns>
    public async Task<ApiResponse<AlertSuppressionWindowDtoIEnumerableJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGetWithHttpInfoAsync(string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AlertSuppressionWindowsApiApi.ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<AlertSuppressionWindowDtoIEnumerableJSendSuccess>(
                "/api/basemonitors/{baseMonitorName}/alertsuppressionwindows", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>BooleanJSendSuccess</returns>
    public BooleanJSendSuccess ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDelete(IntegerIdentifier id,
        string baseMonitorName, int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDeleteWithHttpInfo(id, baseMonitorName);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of BooleanJSendSuccess</returns>
    public ApiResponse<BooleanJSendSuccess> ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDeleteWithHttpInfo(
        IntegerIdentifier id, string baseMonitorName, int operationIndex = 0)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDelete");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDelete");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AlertSuppressionWindowsApiApi.ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Delete<BooleanJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/alertsuppressionwindows/{id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDelete",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BooleanJSendSuccess</returns>
    public async Task<BooleanJSendSuccess> ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDeleteAsync(
        IntegerIdentifier id, string baseMonitorName, int operationIndex = 0,
        CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDeleteWithHttpInfoAsync(id, baseMonitorName,
                operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (BooleanJSendSuccess)</returns>
    public async Task<ApiResponse<BooleanJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDeleteWithHttpInfoAsync(IntegerIdentifier id,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDelete");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDelete");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AlertSuppressionWindowsApiApi.ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDelete";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .DeleteAsync<BooleanJSendSuccess>("/api/basemonitors/{baseMonitorName}/alertsuppressionwindows/{id}",
                localVarRequestOptions, Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdDelete",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AlertSuppressionWindowDtoJSendSuccess</returns>
    public AlertSuppressionWindowDtoJSendSuccess ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGet(
        IntegerIdentifier id, string baseMonitorName, int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGetWithHttpInfo(id, baseMonitorName);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AlertSuppressionWindowDtoJSendSuccess</returns>
    public ApiResponse<AlertSuppressionWindowDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGetWithHttpInfo(IntegerIdentifier id,
            string baseMonitorName,
            int operationIndex = 0)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AlertSuppressionWindowsApiApi.ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<AlertSuppressionWindowDtoJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/alertsuppressionwindows/{id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AlertSuppressionWindowDtoJSendSuccess</returns>
    public async Task<AlertSuppressionWindowDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGetAsync(IntegerIdentifier id, string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGetWithHttpInfoAsync(id, baseMonitorName,
                operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AlertSuppressionWindowDtoJSendSuccess)</returns>
    public async Task<ApiResponse<AlertSuppressionWindowDtoJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGetWithHttpInfoAsync(IntegerIdentifier id,
            string baseMonitorName, int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGet");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AlertSuppressionWindowsApiApi.ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<AlertSuppressionWindowDtoJSendSuccess>(
                "/api/basemonitors/{baseMonitorName}/alertsuppressionwindows/{id}", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AlertSuppressionWindowDtoJSendSuccess</returns>
    public AlertSuppressionWindowDtoJSendSuccess ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPut(
        IntegerIdentifier id, string baseMonitorName,
        AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default, int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPutWithHttpInfo(id, baseMonitorName,
                alertSuppressionWindowEditDto);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AlertSuppressionWindowDtoJSendSuccess</returns>
    public ApiResponse<AlertSuppressionWindowDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPutWithHttpInfo(IntegerIdentifier id,
            string baseMonitorName,
            AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default, int operationIndex = 0)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPut");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = alertSuppressionWindowEditDto;

        localVarRequestOptions.Operation =
            "AlertSuppressionWindowsApiApi.ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Put<AlertSuppressionWindowDtoJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/alertsuppressionwindows/{id}", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AlertSuppressionWindowDtoJSendSuccess</returns>
    public async Task<AlertSuppressionWindowDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPutAsync(IntegerIdentifier id, string baseMonitorName,
            AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPutWithHttpInfoAsync(id, baseMonitorName,
                alertSuppressionWindowEditDto, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="id"></param>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AlertSuppressionWindowDtoJSendSuccess)</returns>
    public async Task<ApiResponse<AlertSuppressionWindowDtoJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPutWithHttpInfoAsync(IntegerIdentifier id,
            string baseMonitorName, AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'id' is set
        if (id == null)
            throw new ApiException(400,
                "Missing required parameter 'id' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPut");

        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPut");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("id", ClientUtils.ParameterToString(id)); // path parameter
        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = alertSuppressionWindowEditDto;

        localVarRequestOptions.Operation =
            "AlertSuppressionWindowsApiApi.ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPut";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PutAsync<AlertSuppressionWindowDtoJSendSuccess>(
                "/api/basemonitors/{baseMonitorName}/alertsuppressionwindows/{id}", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsIdPut",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AlertSuppressionWindowDtoJSendSuccess</returns>
    public AlertSuppressionWindowDtoJSendSuccess ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPost(
        string baseMonitorName, AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default,
        int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPostWithHttpInfo(baseMonitorName,
                alertSuppressionWindowEditDto);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AlertSuppressionWindowDtoJSendSuccess</returns>
    public ApiResponse<AlertSuppressionWindowDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPostWithHttpInfo(string baseMonitorName,
            AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default, int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPost");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = alertSuppressionWindowEditDto;

        localVarRequestOptions.Operation =
            "AlertSuppressionWindowsApiApi.ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Post<AlertSuppressionWindowDtoJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/alertsuppressionwindows", localVarRequestOptions, Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPost",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AlertSuppressionWindowDtoJSendSuccess</returns>
    public async Task<AlertSuppressionWindowDtoJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPostAsync(string baseMonitorName,
            AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPostWithHttpInfoAsync(baseMonitorName,
                alertSuppressionWindowEditDto, operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="alertSuppressionWindowEditDto"> (optional)</param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AlertSuppressionWindowDtoJSendSuccess)</returns>
    public async Task<ApiResponse<AlertSuppressionWindowDtoJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPostWithHttpInfoAsync(string baseMonitorName,
            AlertSuppressionWindowEditDto? alertSuppressionWindowEditDto = default, int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPost");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new[]
        {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter
        localVarRequestOptions.Data = alertSuppressionWindowEditDto;

        localVarRequestOptions.Operation =
            "AlertSuppressionWindowsApiApi.ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPost";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .PostAsync<AlertSuppressionWindowDtoJSendSuccess>(
                "/api/basemonitors/{baseMonitorName}/alertsuppressionwindows", localVarRequestOptions, Configuration,
                cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsPost",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>AlertSuppressionTargetDtoIEnumerableJSendSuccess</returns>
    public AlertSuppressionTargetDtoIEnumerableJSendSuccess
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGet(string baseMonitorName, int operationIndex = 0)
    {
        var localVarResponse =
            ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGetWithHttpInfo(baseMonitorName);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <returns>ApiResponse of AlertSuppressionTargetDtoIEnumerableJSendSuccess</returns>
    public ApiResponse<AlertSuppressionTargetDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGetWithHttpInfo(string baseMonitorName,
            int operationIndex = 0)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGet");

        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        var localVarMultipartFormData = localVarContentType == "multipart/form-data";
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AlertSuppressionWindowsApiApi.ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = Client.Get<AlertSuppressionTargetDtoIEnumerableJSendSuccess>(
            "/api/basemonitors/{baseMonitorName}/alertsuppressionwindows/targets", localVarRequestOptions,
            Configuration);
        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AlertSuppressionTargetDtoIEnumerableJSendSuccess</returns>
    public async Task<AlertSuppressionTargetDtoIEnumerableJSendSuccess>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGetAsync(string baseMonitorName,
            int operationIndex = 0,
            CancellationToken cancellationToken = default)
    {
        var localVarResponse =
            await ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGetWithHttpInfoAsync(baseMonitorName,
                operationIndex, cancellationToken).ConfigureAwait(false);
        return localVarResponse.Data;
    }

    /// <summary>
    /// </summary>
    /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="baseMonitorName"></param>
    /// <param name="operationIndex">Index associated with the operation.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AlertSuppressionTargetDtoIEnumerableJSendSuccess)</returns>
    public async Task<ApiResponse<AlertSuppressionTargetDtoIEnumerableJSendSuccess>>
        ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGetWithHttpInfoAsync(string baseMonitorName,
            int operationIndex = 0, CancellationToken cancellationToken = default)
    {
        // verify the required parameter 'baseMonitorName' is set
        if (baseMonitorName == null)
            throw new ApiException(400,
                "Missing required parameter 'baseMonitorName' when calling AlertSuppressionWindowsApiApi->ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGet");


        var localVarRequestOptions = new RequestOptions();

        var _contentTypes = new string[]
        {
        };

        // to determine the Accept header
        var _accepts = new[]
        {
            "text/plain",
            "application/json",
            "text/json"
        };

        var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
        if (localVarContentType != null)
            localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

        var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
        if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

        localVarRequestOptions.PathParameters.Add("baseMonitorName",
            ClientUtils.ParameterToString(baseMonitorName)); // path parameter

        localVarRequestOptions.Operation =
            "AlertSuppressionWindowsApiApi.ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGet";
        localVarRequestOptions.OperationIndex = operationIndex;


        // make the HTTP request
        var localVarResponse = await AsynchronousClient
            .GetAsync<AlertSuppressionTargetDtoIEnumerableJSendSuccess>(
                "/api/basemonitors/{baseMonitorName}/alertsuppressionwindows/targets", localVarRequestOptions,
                Configuration, cancellationToken).ConfigureAwait(false);

        if (ExceptionFactory != null)
        {
            var _exception = ExceptionFactory("ApiBasemonitorsBaseMonitorNameAlertsuppressionwindowsTargetsGet",
                localVarResponse);
            if (_exception != null) throw _exception;
        }

        return localVarResponse;
    }
}