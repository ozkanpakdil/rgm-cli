/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using cli.Client;
using cli.Model;

namespace cli.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPostgresTopQueriesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="maxResults"> (optional)</param>
        /// <param name="queryText"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostgresTopQueriesDtoJSendSuccess</returns>
        PostgresTopQueriesDtoJSendSuccess ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGet(ChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? maxResults = default(int?), string? queryText = default(string?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="maxResults"> (optional)</param>
        /// <param name="queryText"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostgresTopQueriesDtoJSendSuccess</returns>
        ApiResponse<PostgresTopQueriesDtoJSendSuccess> ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGetWithHttpInfo(ChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? maxResults = default(int?), string? queryText = default(string?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess</returns>
        PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGet(PostgresInstanceTopQueriesChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess</returns>
        ApiResponse<PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess> ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGetWithHttpInfo(PostgresInstanceTopQueriesChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPostgresTopQueriesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="maxResults"> (optional)</param>
        /// <param name="queryText"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostgresTopQueriesDtoJSendSuccess</returns>
        System.Threading.Tasks.Task<PostgresTopQueriesDtoJSendSuccess> ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGetAsync(ChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? maxResults = default(int?), string? queryText = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="maxResults"> (optional)</param>
        /// <param name="queryText"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostgresTopQueriesDtoJSendSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostgresTopQueriesDtoJSendSuccess>> ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGetWithHttpInfoAsync(ChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? maxResults = default(int?), string? queryText = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess</returns>
        System.Threading.Tasks.Task<PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess> ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGetAsync(PostgresInstanceTopQueriesChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess>> ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGetWithHttpInfoAsync(PostgresInstanceTopQueriesChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPostgresTopQueriesApi : IPostgresTopQueriesApiSync, IPostgresTopQueriesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PostgresTopQueriesApi : IPostgresTopQueriesApi
    {
        private cli.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PostgresTopQueriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PostgresTopQueriesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostgresTopQueriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PostgresTopQueriesApi(string basePath)
        {
            this.Configuration = cli.Client.Configuration.MergeConfigurations(
                cli.Client.GlobalConfiguration.Instance,
                new cli.Client.Configuration { BasePath = basePath }
            );
            this.Client = new cli.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cli.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostgresTopQueriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PostgresTopQueriesApi(cli.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = cli.Client.Configuration.MergeConfigurations(
                cli.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new cli.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cli.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostgresTopQueriesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PostgresTopQueriesApi(cli.Client.ISynchronousClient client, cli.Client.IAsynchronousClient asyncClient, cli.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = cli.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public cli.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public cli.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public cli.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public cli.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="maxResults"> (optional)</param>
        /// <param name="queryText"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostgresTopQueriesDtoJSendSuccess</returns>
        public PostgresTopQueriesDtoJSendSuccess ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGet(ChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? maxResults = default(int?), string? queryText = default(string?), int operationIndex = 0)
        {
            cli.Client.ApiResponse<PostgresTopQueriesDtoJSendSuccess> localVarResponse = ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGetWithHttpInfo(cir, baseMonitorName, startTime, endTime, maxResults, queryText);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="maxResults"> (optional)</param>
        /// <param name="queryText"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostgresTopQueriesDtoJSendSuccess</returns>
        public cli.Client.ApiResponse<PostgresTopQueriesDtoJSendSuccess> ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGetWithHttpInfo(ChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? maxResults = default(int?), string? queryText = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'cir' is set
            if (cir == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'cir' when calling PostgresTopQueriesApi->ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling PostgresTopQueriesApi->ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("cir", cli.Client.ClientUtils.ParameterToString(cir)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            if (queryText != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "queryText", queryText));
            }

            localVarRequestOptions.Operation = "PostgresTopQueriesApi.ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostgresTopQueriesDtoJSendSuccess>("/api/basemonitors/{baseMonitorName}/postgresInstances/{cir}/topqueries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="maxResults"> (optional)</param>
        /// <param name="queryText"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostgresTopQueriesDtoJSendSuccess</returns>
        public async System.Threading.Tasks.Task<PostgresTopQueriesDtoJSendSuccess> ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGetAsync(ChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? maxResults = default(int?), string? queryText = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            cli.Client.ApiResponse<PostgresTopQueriesDtoJSendSuccess> localVarResponse = await ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGetWithHttpInfoAsync(cir, baseMonitorName, startTime, endTime, maxResults, queryText, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="maxResults"> (optional)</param>
        /// <param name="queryText"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostgresTopQueriesDtoJSendSuccess)</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<PostgresTopQueriesDtoJSendSuccess>> ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGetWithHttpInfoAsync(ChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int? maxResults = default(int?), string? queryText = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'cir' is set
            if (cir == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'cir' when calling PostgresTopQueriesApi->ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling PostgresTopQueriesApi->ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("cir", cli.Client.ClientUtils.ParameterToString(cir)); // path parameter
            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (maxResults != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "maxResults", maxResults));
            }
            if (queryText != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "queryText", queryText));
            }

            localVarRequestOptions.Operation = "PostgresTopQueriesApi.ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostgresTopQueriesDtoJSendSuccess>("/api/basemonitors/{baseMonitorName}/postgresInstances/{cir}/topqueries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNamePostgresInstancesCirTopqueriesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess</returns>
        public PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGet(PostgresInstanceTopQueriesChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int operationIndex = 0)
        {
            cli.Client.ApiResponse<PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess> localVarResponse = ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGetWithHttpInfo(cir, baseMonitorName, startTime, endTime);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess</returns>
        public cli.Client.ApiResponse<PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess> ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGetWithHttpInfo(PostgresInstanceTopQueriesChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int operationIndex = 0)
        {
            // verify the required parameter 'cir' is set
            if (cir == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'cir' when calling PostgresTopQueriesApi->ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling PostgresTopQueriesApi->ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGet");
            }

            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "cir", cir));
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }

            localVarRequestOptions.Operation = "PostgresTopQueriesApi.ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess>("/api/basemonitors/{baseMonitorName}/postgresInstances/topqueries/history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess</returns>
        public async System.Threading.Tasks.Task<PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess> ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGetAsync(PostgresInstanceTopQueriesChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            cli.Client.ApiResponse<PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess> localVarResponse = await ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGetWithHttpInfoAsync(cir, baseMonitorName, startTime, endTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="cli.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cir"></param>
        /// <param name="baseMonitorName"></param>
        /// <param name="startTime"> (optional)</param>
        /// <param name="endTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess)</returns>
        public async System.Threading.Tasks.Task<cli.Client.ApiResponse<PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess>> ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGetWithHttpInfoAsync(PostgresInstanceTopQueriesChannelInstanceRef cir, string baseMonitorName, DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'cir' is set
            if (cir == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'cir' when calling PostgresTopQueriesApi->ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGet");
            }

            // verify the required parameter 'baseMonitorName' is set
            if (baseMonitorName == null)
            {
                throw new cli.Client.ApiException(400, "Missing required parameter 'baseMonitorName' when calling PostgresTopQueriesApi->ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGet");
            }


            cli.Client.RequestOptions localVarRequestOptions = new cli.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = cli.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cli.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("baseMonitorName", cli.Client.ClientUtils.ParameterToString(baseMonitorName)); // path parameter
            localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "cir", cir));
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(cli.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }

            localVarRequestOptions.Operation = "PostgresTopQueriesApi.ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PostgresTopQueryPropertyPostgresQueryHistoryPlanKeyDtoQueryHistoryDtoJSendSuccess>("/api/basemonitors/{baseMonitorName}/postgresInstances/topqueries/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBasemonitorsBaseMonitorNamePostgresInstancesTopqueriesHistoryGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
