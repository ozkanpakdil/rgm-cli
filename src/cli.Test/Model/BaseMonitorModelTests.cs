/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using cli.Model;
using cli.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace cli.Test.Model
{
    /// <summary>
    ///  Class for testing BaseMonitorModel
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class BaseMonitorModelTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for BaseMonitorModel
        //private BaseMonitorModel instance;

        public BaseMonitorModelTests()
        {
            // TODO uncomment below to create an instance of BaseMonitorModel
            //instance = new BaseMonitorModel();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BaseMonitorModel
        /// </summary>
        [Fact]
        public void BaseMonitorModelInstanceTest()
        {
            // TODO uncomment below to test "IsType" BaseMonitorModel
            //Assert.IsType<BaseMonitorModel>(instance);
        }

        /// <summary>
        /// Test the property 'VersionNumber'
        /// </summary>
        [Fact]
        public void VersionNumberTest()
        {
            // TODO unit test for the property 'VersionNumber'
        }

        /// <summary>
        /// Test the property 'InstallLocation'
        /// </summary>
        [Fact]
        public void InstallLocationTest()
        {
            // TODO unit test for the property 'InstallLocation'
        }

        /// <summary>
        /// Test the property 'UserRunningAs'
        /// </summary>
        [Fact]
        public void UserRunningAsTest()
        {
            // TODO unit test for the property 'UserRunningAs'
        }

        /// <summary>
        /// Test the property 'UserDomain'
        /// </summary>
        [Fact]
        public void UserDomainTest()
        {
            // TODO unit test for the property 'UserDomain'
        }

        /// <summary>
        /// Test the property 'DatabaseLocation'
        /// </summary>
        [Fact]
        public void DatabaseLocationTest()
        {
            // TODO unit test for the property 'DatabaseLocation'
        }

        /// <summary>
        /// Test the property 'Runtime'
        /// </summary>
        [Fact]
        public void RuntimeTest()
        {
            // TODO unit test for the property 'Runtime'
        }

        /// <summary>
        /// Test the property 'IsDbConnected'
        /// </summary>
        [Fact]
        public void IsDbConnectedTest()
        {
            // TODO unit test for the property 'IsDbConnected'
        }

        /// <summary>
        /// Test the property 'ErrorReportingEnabled'
        /// </summary>
        [Fact]
        public void ErrorReportingEnabledTest()
        {
            // TODO unit test for the property 'ErrorReportingEnabled'
        }

        /// <summary>
        /// Test the property 'HasCredentialDecryptionFailed'
        /// </summary>
        [Fact]
        public void HasCredentialDecryptionFailedTest()
        {
            // TODO unit test for the property 'HasCredentialDecryptionFailed'
        }

        /// <summary>
        /// Test the property 'HasUnsupportedEntities'
        /// </summary>
        [Fact]
        public void HasUnsupportedEntitiesTest()
        {
            // TODO unit test for the property 'HasUnsupportedEntities'
        }

        /// <summary>
        /// Test the property 'HasSupportedEntitiesWithUnsupportedCredentials'
        /// </summary>
        [Fact]
        public void HasSupportedEntitiesWithUnsupportedCredentialsTest()
        {
            // TODO unit test for the property 'HasSupportedEntitiesWithUnsupportedCredentials'
        }

        /// <summary>
        /// Test the property 'Platform'
        /// </summary>
        [Fact]
        public void PlatformTest()
        {
            // TODO unit test for the property 'Platform'
        }

        /// <summary>
        /// Test the property 'RepositoryDatabaseEngine'
        /// </summary>
        [Fact]
        public void RepositoryDatabaseEngineTest()
        {
            // TODO unit test for the property 'RepositoryDatabaseEngine'
        }
    }
}
