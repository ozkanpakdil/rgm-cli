/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using cli.Model;
using cli.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace cli.Test.Model
{
    /// <summary>
    ///  Class for testing RecentAlertDto
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class RecentAlertDtoTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for RecentAlertDto
        //private RecentAlertDto instance;

        public RecentAlertDtoTests()
        {
            // TODO uncomment below to create an instance of RecentAlertDto
            //instance = new RecentAlertDto();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of RecentAlertDto
        /// </summary>
        [Fact]
        public void RecentAlertDtoInstanceTest()
        {
            // TODO uncomment below to test "IsType" RecentAlertDto
            //Assert.IsType<RecentAlertDto>(instance);
        }

        /// <summary>
        /// Test the property 'AlertId'
        /// </summary>
        [Fact]
        public void AlertIdTest()
        {
            // TODO unit test for the property 'AlertId'
        }

        /// <summary>
        /// Test the property 'Status'
        /// </summary>
        [Fact]
        public void StatusTest()
        {
            // TODO unit test for the property 'Status'
        }

        /// <summary>
        /// Test the property 'Text'
        /// </summary>
        [Fact]
        public void TextTest()
        {
            // TODO unit test for the property 'Text'
        }

        /// <summary>
        /// Test the property 'Cleared'
        /// </summary>
        [Fact]
        public void ClearedTest()
        {
            // TODO unit test for the property 'Cleared'
        }

        /// <summary>
        /// Test the property 'StartTime'
        /// </summary>
        [Fact]
        public void StartTimeTest()
        {
            // TODO unit test for the property 'StartTime'
        }

        /// <summary>
        /// Test the property 'EndTime'
        /// </summary>
        [Fact]
        public void EndTimeTest()
        {
            // TODO unit test for the property 'EndTime'
        }

        /// <summary>
        /// Test the property 'WorstLevel'
        /// </summary>
        [Fact]
        public void WorstLevelTest()
        {
            // TODO unit test for the property 'WorstLevel'
        }

        /// <summary>
        /// Test the property 'Cir'
        /// </summary>
        [Fact]
        public void CirTest()
        {
            // TODO unit test for the property 'Cir'
        }

        /// <summary>
        /// Test the property 'Owner'
        /// </summary>
        [Fact]
        public void OwnerTest()
        {
            // TODO unit test for the property 'Owner'
        }

        /// <summary>
        /// Test the property 'AlertState'
        /// </summary>
        [Fact]
        public void AlertStateTest()
        {
            // TODO unit test for the property 'AlertState'
        }

        /// <summary>
        /// Test the property 'AlertTime'
        /// </summary>
        [Fact]
        public void AlertTimeTest()
        {
            // TODO unit test for the property 'AlertTime'
        }

        /// <summary>
        /// Test the property 'SubText'
        /// </summary>
        [Fact]
        public void SubTextTest()
        {
            // TODO unit test for the property 'SubText'
        }
    }
}
