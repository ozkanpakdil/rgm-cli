/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using cli.Client;
using cli.Api;
// uncomment below to import models
//using cli.Model;

namespace cli.Test.Api
{
    /// <summary>
    ///  Class for testing PublicAPIApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PublicAPIApiTests : IDisposable
    {
        private PublicAPIApi instance;

        public PublicAPIApiTests()
        {
            instance = new PublicAPIApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PublicAPIApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' PublicAPIApi
            //Assert.IsType<PublicAPIApi>(instance);
        }

        /// <summary>
        /// Test ApiV1AlertsGet
        /// </summary>
        [Fact]
        public void ApiV1AlertsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string alertTypeId = null;
            //string? monitoredEntityId = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //int? limit = null;
            //var response = instance.ApiV1AlertsGet(alertTypeId, monitoredEntityId, start, end, limit);
            //Assert.IsType<AlertDetailDtoArrayJSendSuccess>(response);
        }

        /// <summary>
        /// Test ApiV1AlertsTypesGet
        /// </summary>
        [Fact]
        public void ApiV1AlertsTypesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiV1AlertsTypesGet();
            //Assert.IsType<AlertTypeDtoArrayJSendSuccess>(response);
        }

        /// <summary>
        /// Test ApiV1BackupsGet
        /// </summary>
        [Fact]
        public void ApiV1BackupsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? monitoredEntityId = null;
            //var response = instance.ApiV1BackupsGet(monitoredEntityId);
            //Assert.IsType<DatabaseBackupDtoArrayJSendSuccess>(response);
        }

        /// <summary>
        /// Test ApiV1DiskUsageGet
        /// </summary>
        [Fact]
        public void ApiV1DiskUsageGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? monitoredEntityId = null;
            //var response = instance.ApiV1DiskUsageGet(monitoredEntityId);
            //Assert.IsType<DiskUsageDtoArrayJSendSuccess>(response);
        }

        /// <summary>
        /// Test ApiV1MetricsGet
        /// </summary>
        [Fact]
        public void ApiV1MetricsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string metricTypeId = null;
            //string? monitoredEntityId = null;
            //DateTime? start = null;
            //DateTime? end = null;
            //int? maxSampleCount = null;
            //var response = instance.ApiV1MetricsGet(metricTypeId, monitoredEntityId, start, end, maxSampleCount);
            //Assert.IsType<MetricDtoArrayJSendSuccess>(response);
        }

        /// <summary>
        /// Test ApiV1MetricsTypesGet
        /// </summary>
        [Fact]
        public void ApiV1MetricsTypesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiV1MetricsTypesGet();
            //Assert.IsType<MetricTypeDtoArrayJSendSuccess>(response);
        }

        /// <summary>
        /// Test ApiV1MonitoredEntitiesGet
        /// </summary>
        [Fact]
        public void ApiV1MonitoredEntitiesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //EntityType? entityType = null;
            //string? filter = null;
            //var response = instance.ApiV1MonitoredEntitiesGet(entityType, filter);
            //Assert.IsType<MonitoredEntityDtoArrayJSendSuccess>(response);
        }

        /// <summary>
        /// Test ApiV1MonitoredEntitiesTypesGet
        /// </summary>
        [Fact]
        public void ApiV1MonitoredEntitiesTypesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiV1MonitoredEntitiesTypesGet();
            //Assert.IsType<EntityTypeArrayJSendSuccess>(response);
        }
    }
}
