/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using cli.Client;
using cli.Api;
// uncomment below to import models
//using cli.Model;

namespace cli.Test.Api
{
    /// <summary>
    ///  Class for testing BaseMonitorAlertSettingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BaseMonitorAlertSettingsApiTests : IDisposable
    {
        private BaseMonitorAlertSettingsApi instance;

        public BaseMonitorAlertSettingsApiTests()
        {
            instance = new BaseMonitorAlertSettingsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BaseMonitorAlertSettingsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BaseMonitorAlertSettingsApi
            //Assert.IsType<BaseMonitorAlertSettingsApi>(instance);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdCommentsPatch
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdCommentsPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long alertTypeId = null;
            //string baseMonitorName = null;
            //string? body = null;
            //instance.ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdCommentsPatch(alertTypeId, baseMonitorName, body);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdGet
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long alertTypeId = null;
            //string baseMonitorName = null;
            //instance.ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdGet(alertTypeId, baseMonitorName);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdNotificationsettingsPatch
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdNotificationsettingsPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long alertTypeId = null;
            //string baseMonitorName = null;
            //AlertNotificationSettingsDto? alertNotificationSettingsDto = null;
            //instance.ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdNotificationsettingsPatch(alertTypeId, baseMonitorName, alertNotificationSettingsDto);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdSpecificsettingsPatch
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdSpecificsettingsPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long alertTypeId = null;
            //string baseMonitorName = null;
            //Hashtable? requestBody = null;
            //instance.ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdSpecificsettingsPatch(alertTypeId, baseMonitorName, requestBody);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdStatusPatch
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdStatusPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long alertTypeId = null;
            //string baseMonitorName = null;
            //int? body = null;
            //instance.ApiBasemonitorsBaseMonitorNameAlertsettingsAlertTypeIdStatusPatch(alertTypeId, baseMonitorName, body);
        }
    }
}
