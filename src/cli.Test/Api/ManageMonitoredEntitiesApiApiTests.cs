/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using cli.Client;
using cli.Api;
// uncomment below to import models
//using cli.Model;

namespace cli.Test.Api
{
    /// <summary>
    ///  Class for testing ManageMonitoredEntitiesApiApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ManageMonitoredEntitiesApiApiTests : IDisposable
    {
        private ManageMonitoredEntitiesApiApi instance;

        public ManageMonitoredEntitiesApiApiTests()
        {
            instance = new ManageMonitoredEntitiesApiApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ManageMonitoredEntitiesApiApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ManageMonitoredEntitiesApiApi
            //Assert.IsType<ManageMonitoredEntitiesApiApi>(instance);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameMonitoredserversEditcredentialsPost
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameMonitoredserversEditcredentialsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string baseMonitorName = null;
            //SentEditCredentialsRequest? sentEditCredentialsRequest = null;
            //var response = instance.ApiBasemonitorsBaseMonitorNameMonitoredserversEditcredentialsPost(baseMonitorName, sentEditCredentialsRequest);
            //Assert.IsType<JSendSuccess>(response);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameMonitoredserversGet
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameMonitoredserversGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string baseMonitorName = null;
            //var response = instance.ApiBasemonitorsBaseMonitorNameMonitoredserversGet(baseMonitorName);
            //Assert.IsType<ManageEntityViewModelArrayJSendSuccess>(response);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameMonitoredserversRemovePost
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameMonitoredserversRemovePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string baseMonitorName = null;
            //RemoveEntityRequest? removeEntityRequest = null;
            //var response = instance.ApiBasemonitorsBaseMonitorNameMonitoredserversRemovePost(baseMonitorName, removeEntityRequest);
            //Assert.IsType<JSendSuccess>(response);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameMonitoredserversRemoveinstancePost
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameMonitoredserversRemoveinstancePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string baseMonitorName = null;
            //RemoveUninstalledInstanceRequest? removeUninstalledInstanceRequest = null;
            //var response = instance.ApiBasemonitorsBaseMonitorNameMonitoredserversRemoveinstancePost(baseMonitorName, removeUninstalledInstanceRequest);
            //Assert.IsType<JSendSuccess>(response);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameMonitoredserversRetryPost
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameMonitoredserversRetryPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string baseMonitorName = null;
            //RetryEntityRequest? retryEntityRequest = null;
            //var response = instance.ApiBasemonitorsBaseMonitorNameMonitoredserversRetryPost(baseMonitorName, retryEntityRequest);
            //Assert.IsType<JSendSuccess>(response);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserversPost
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserversPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string baseMonitorName = null;
            //AddSqlServerRequest? addSqlServerRequest = null;
            //var response = instance.ApiBasemonitorsBaseMonitorNameMonitoredserversSqlserversPost(baseMonitorName, addSqlServerRequest);
            //Assert.IsType<JSendSuccess>(response);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameMonitoredserversSuspendPost
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameMonitoredserversSuspendPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string baseMonitorName = null;
            //SuspendEntityRequest? suspendEntityRequest = null;
            //var response = instance.ApiBasemonitorsBaseMonitorNameMonitoredserversSuspendPost(baseMonitorName, suspendEntityRequest);
            //Assert.IsType<JSendSuccess>(response);
        }
    }
}
