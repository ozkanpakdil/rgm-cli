/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using cli.Client;
using cli.Api;
// uncomment below to import models
//using cli.Model;

namespace cli.Test.Api
{
    /// <summary>
    ///  Class for testing AlertInboxPagingApiApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class AlertInboxPagingApiApiTests : IDisposable
    {
        private AlertInboxPagingApiApi instance;

        public AlertInboxPagingApiApiTests()
        {
            instance = new AlertInboxPagingApiApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of AlertInboxPagingApiApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' AlertInboxPagingApiApi
            //Assert.IsType<AlertInboxPagingApiApi>(instance);
        }

        /// <summary>
        /// Test AlertReport
        /// </summary>
        [Fact]
        public void AlertReportTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageSize = null;
            //bool? isGrouped = null;
            //long? timeRange = null;
            //long? endDate = null;
            //AlertReportTimeRangeType? timeRangeType = null;
            //List<string>? channelInstanceRefs = null;
            //AlertsFilterTimeRangeTypeDto? timeRangeType2 = null;
            //int? timeRangeRelativeMinutes = null;
            //long? timeRangeFromDateTime = null;
            //long? timeRangeToDateTime = null;
            //AlertsFilterTimeWindowModesDto? timeRangeTimeWindowMode = null;
            //bool? includeStatusSeverityHigh = null;
            //bool? includeStatusSeverityMedium = null;
            //bool? includeStatusSeverityLow = null;
            //bool? includeStatusReadYes = null;
            //bool? includeStatusReadNo = null;
            //bool? includeStatusClearedYes = null;
            //bool? includeStatusClearedNo = null;
            //bool? includeStatusStatusEvent = null;
            //bool? includeStatusStatusActive = null;
            //bool? includeStatusStatusEnded = null;
            //bool? includeStatusCommentYes = null;
            //bool? includeStatusCommentNo = null;
            //List<string>? includeAlertTypeIds = null;
            //List<TagDto>? selectedTags = null;
            //var response = instance.AlertReport(pageSize, isGrouped, timeRange, endDate, timeRangeType, channelInstanceRefs, timeRangeType2, timeRangeRelativeMinutes, timeRangeFromDateTime, timeRangeToDateTime, timeRangeTimeWindowMode, includeStatusSeverityHigh, includeStatusSeverityMedium, includeStatusSeverityLow, includeStatusReadYes, includeStatusReadNo, includeStatusClearedYes, includeStatusClearedNo, includeStatusStatusEvent, includeStatusStatusActive, includeStatusStatusEnded, includeStatusCommentYes, includeStatusCommentNo, includeAlertTypeIds, selectedTags);
            //Assert.IsType<GroupOfAlertsDto>(response);
        }

        /// <summary>
        /// Test AlertsInboxLoad
        /// </summary>
        [Fact]
        public void AlertsInboxLoadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? startTicks = null;
            //long? alertId = null;
            //List<string>? channelInstanceRefs = null;
            //int? pageSize = null;
            //bool? isGrouped = null;
            //FilterSettingsDto? filterSettingsDto = null;
            //instance.AlertsInboxLoad(startTicks, alertId, channelInstanceRefs, pageSize, isGrouped, filterSettingsDto);
        }

        /// <summary>
        /// Test AlertsInboxMoveNewer
        /// </summary>
        [Fact]
        public void AlertsInboxMoveNewerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? startTicks = null;
            //long? alertId = null;
            //List<string>? channelInstanceRefs = null;
            //int? pageSize = null;
            //bool? isGrouped = null;
            //FilterSettingsDto? filterSettingsDto = null;
            //instance.AlertsInboxMoveNewer(startTicks, alertId, channelInstanceRefs, pageSize, isGrouped, filterSettingsDto);
        }

        /// <summary>
        /// Test AlertsInboxMoveNewest
        /// </summary>
        [Fact]
        public void AlertsInboxMoveNewestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? channelInstanceRefs = null;
            //int? pageSize = null;
            //bool? isGrouped = null;
            //FilterSettingsDto? filterSettingsDto = null;
            //instance.AlertsInboxMoveNewest(channelInstanceRefs, pageSize, isGrouped, filterSettingsDto);
        }

        /// <summary>
        /// Test AlertsInboxMoveOlder
        /// </summary>
        [Fact]
        public void AlertsInboxMoveOlderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string? startTicks = null;
            //long? alertId = null;
            //List<string>? channelInstanceRefs = null;
            //int? pageSize = null;
            //bool? isGrouped = null;
            //FilterSettingsDto? filterSettingsDto = null;
            //instance.AlertsInboxMoveOlder(startTicks, alertId, channelInstanceRefs, pageSize, isGrouped, filterSettingsDto);
        }

        /// <summary>
        /// Test AlertsInboxMoveOldest
        /// </summary>
        [Fact]
        public void AlertsInboxMoveOldestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string>? channelInstanceRefs = null;
            //int? pageSize = null;
            //bool? isGrouped = null;
            //FilterSettingsDto? filterSettingsDto = null;
            //instance.AlertsInboxMoveOldest(channelInstanceRefs, pageSize, isGrouped, filterSettingsDto);
        }
    }
}
