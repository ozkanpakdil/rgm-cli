/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using cli.Api;
using Xunit;

// uncomment below to import models
//using cli.Model;

namespace cli.Test.Api;

/// <summary>
///     Class for testing LinuxMachineDiskAlertSettingsApi
/// </summary>
/// <remarks>
///     This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
///     Please update the test case below to test the API endpoint.
/// </remarks>
public class LinuxMachineDiskAlertSettingsApiTests : IDisposable
{
    private LinuxMachineDiskAlertSettingsApi instance;

    public LinuxMachineDiskAlertSettingsApiTests()
    {
        instance = new LinuxMachineDiskAlertSettingsApi();
    }

    public void Dispose()
    {
        // Cleanup when everything is done.
    }

    /// <summary>
    ///     Test an instance of LinuxMachineDiskAlertSettingsApi
    /// </summary>
    [Fact]
    public void InstanceTest()
    {
        // TODO uncomment below to test 'IsType' LinuxMachineDiskAlertSettingsApi
        //Assert.IsType<LinuxMachineDiskAlertSettingsApi>(instance);
    }

    /// <summary>
    ///     Test ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdCommentsPatch
    /// </summary>
    [Fact]
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdCommentsPatchTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string machineName = null;
        //string diskName = null;
        //long alertTypeId = null;
        //string baseMonitorName = null;
        //string? body = null;
        //instance.ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdCommentsPatch(machineName, diskName, alertTypeId, baseMonitorName, body);
    }

    /// <summary>
    ///     Test ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdGet
    /// </summary>
    [Fact]
    public void ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdGetTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string machineName = null;
        //string diskName = null;
        //long alertTypeId = null;
        //string baseMonitorName = null;
        //instance.ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdGet(machineName, diskName, alertTypeId, baseMonitorName);
    }

    /// <summary>
    ///     Test
    ///     ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdNotificationsettingsPatch
    /// </summary>
    [Fact]
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdNotificationsettingsPatchTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string machineName = null;
        //string diskName = null;
        //long alertTypeId = null;
        //string baseMonitorName = null;
        //AlertNotificationSettingsDto? alertNotificationSettingsDto = null;
        //instance.ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdNotificationsettingsPatch(machineName, diskName, alertTypeId, baseMonitorName, alertNotificationSettingsDto);
    }

    /// <summary>
    ///     Test
    ///     ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdSpecificsettingsPatch
    /// </summary>
    [Fact]
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdSpecificsettingsPatchTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string machineName = null;
        //string diskName = null;
        //long alertTypeId = null;
        //string baseMonitorName = null;
        //Hashtable? requestBody = null;
        //instance.ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdSpecificsettingsPatch(machineName, diskName, alertTypeId, baseMonitorName, requestBody);
    }

    /// <summary>
    ///     Test ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdStatusPatch
    /// </summary>
    [Fact]
    public void
        ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdStatusPatchTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string machineName = null;
        //string diskName = null;
        //long alertTypeId = null;
        //string baseMonitorName = null;
        //int? body = null;
        //instance.ApiBasemonitorsBaseMonitorNameLinuxmachinesMachineNameDisksDiskNameAlertsettingsAlertTypeIdStatusPatch(machineName, diskName, alertTypeId, baseMonitorName, body);
    }
}