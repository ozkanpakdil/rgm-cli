/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using cli.Api;
using Xunit;

// uncomment below to import models
//using cli.Model;

namespace cli.Test.Api;

/// <summary>
///     Class for testing AzureSqlDatabaseAlertSettingsApi
/// </summary>
/// <remarks>
///     This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
///     Please update the test case below to test the API endpoint.
/// </remarks>
public class AzureSqlDatabaseAlertSettingsApiTests : IDisposable
{
    private AzureSqlDatabaseAlertSettingsApi instance;

    public AzureSqlDatabaseAlertSettingsApiTests()
    {
        instance = new AzureSqlDatabaseAlertSettingsApi();
    }

    public void Dispose()
    {
        // Cleanup when everything is done.
    }

    /// <summary>
    ///     Test an instance of AzureSqlDatabaseAlertSettingsApi
    /// </summary>
    [Fact]
    public void InstanceTest()
    {
        // TODO uncomment below to test 'IsType' AzureSqlDatabaseAlertSettingsApi
        //Assert.IsType<AzureSqlDatabaseAlertSettingsApi>(instance);
    }

    /// <summary>
    ///     Test
    ///     ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdCommentsPatch
    /// </summary>
    [Fact]
    public void
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdCommentsPatchTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string serverName = null;
        //string databaseName = null;
        //long alertTypeId = null;
        //string baseMonitorName = null;
        //string? body = null;
        //instance.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdCommentsPatch(serverName, databaseName, alertTypeId, baseMonitorName, body);
    }

    /// <summary>
    ///     Test ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdGet
    /// </summary>
    [Fact]
    public void
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdGetTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string serverName = null;
        //string databaseName = null;
        //long alertTypeId = null;
        //string baseMonitorName = null;
        //instance.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdGet(serverName, databaseName, alertTypeId, baseMonitorName);
    }

    /// <summary>
    ///     Test
    ///     ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdNotificationsettingsPatch
    /// </summary>
    [Fact]
    public void
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdNotificationsettingsPatchTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string serverName = null;
        //string databaseName = null;
        //long alertTypeId = null;
        //string baseMonitorName = null;
        //AlertNotificationSettingsDto? alertNotificationSettingsDto = null;
        //instance.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdNotificationsettingsPatch(serverName, databaseName, alertTypeId, baseMonitorName, alertNotificationSettingsDto);
    }

    /// <summary>
    ///     Test
    ///     ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdSpecificsettingsPatch
    /// </summary>
    [Fact]
    public void
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdSpecificsettingsPatchTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string serverName = null;
        //string databaseName = null;
        //long alertTypeId = null;
        //string baseMonitorName = null;
        //Hashtable? requestBody = null;
        //instance.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdSpecificsettingsPatch(serverName, databaseName, alertTypeId, baseMonitorName, requestBody);
    }

    /// <summary>
    ///     Test
    ///     ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdStatusPatch
    /// </summary>
    [Fact]
    public void
        ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdStatusPatchTest()
    {
        // TODO uncomment below to test the method and replace null with proper value
        //string serverName = null;
        //string databaseName = null;
        //long alertTypeId = null;
        //string baseMonitorName = null;
        //int? body = null;
        //instance.ApiBasemonitorsBaseMonitorNameAzuresqlserversServerNameDatabasesDatabaseNameAlertsettingsAlertTypeIdStatusPatch(serverName, databaseName, alertTypeId, baseMonitorName, body);
    }
}