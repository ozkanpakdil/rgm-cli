/*
 * Redgate Monitor API - internal - for dev use only
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 14.0.45
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using cli.Client;
using cli.Api;
// uncomment below to import models
//using cli.Model;

namespace cli.Test.Api
{
    /// <summary>
    ///  Class for testing LinuxMachineAlertSettingsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LinuxMachineAlertSettingsApiTests : IDisposable
    {
        private LinuxMachineAlertSettingsApi instance;

        public LinuxMachineAlertSettingsApiTests()
        {
            instance = new LinuxMachineAlertSettingsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of LinuxMachineAlertSettingsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' LinuxMachineAlertSettingsApi
            //Assert.IsType<LinuxMachineAlertSettingsApi>(instance);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdCommentsPatch
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdCommentsPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string linuxMachineName = null;
            //long alertTypeId = null;
            //string baseMonitorName = null;
            //string? body = null;
            //instance.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdCommentsPatch(linuxMachineName, alertTypeId, baseMonitorName, body);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdGet
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string linuxMachineName = null;
            //long alertTypeId = null;
            //string baseMonitorName = null;
            //var response = instance.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdGet(linuxMachineName, alertTypeId, baseMonitorName);
            //Assert.IsType<AlertSettingsDto>(response);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdNotificationsettingsPatch
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdNotificationsettingsPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string linuxMachineName = null;
            //long alertTypeId = null;
            //string baseMonitorName = null;
            //AlertNotificationSettingsDto? alertNotificationSettingsDto = null;
            //instance.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdNotificationsettingsPatch(linuxMachineName, alertTypeId, baseMonitorName, alertNotificationSettingsDto);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdSpecificsettingsPatch
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdSpecificsettingsPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string linuxMachineName = null;
            //long alertTypeId = null;
            //string baseMonitorName = null;
            //Hashtable? requestBody = null;
            //instance.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdSpecificsettingsPatch(linuxMachineName, alertTypeId, baseMonitorName, requestBody);
        }

        /// <summary>
        /// Test ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdStatusPatch
        /// </summary>
        [Fact]
        public void ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdStatusPatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string linuxMachineName = null;
            //long alertTypeId = null;
            //string baseMonitorName = null;
            //int? body = null;
            //instance.ApiBasemonitorsBaseMonitorNameLinuxmachinesLinuxMachineNameAlertsettingsAlertTypeIdStatusPatch(linuxMachineName, alertTypeId, baseMonitorName, body);
        }
    }
}
